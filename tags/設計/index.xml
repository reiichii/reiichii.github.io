<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>設計 on 日々のあれこれφ(．．)</title><link>https://reiichii.github.io/tags/%E8%A8%AD%E8%A8%88/</link><description>Recent content in 設計 on 日々のあれこれφ(．．)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Feb 2023 14:52:15 +0900</lastBuildDate><atom:link href="https://reiichii.github.io/tags/%E8%A8%AD%E8%A8%88/index.xml" rel="self" type="application/rss+xml"/><item><title>ドメイン駆動設計入門(SoftwareDesign2023年2月号)を読んだ</title><link>https://reiichii.github.io/post/2023-02-27-15/</link><pubDate>Mon, 27 Feb 2023 14:52:15 +0900</pubDate><guid>https://reiichii.github.io/post/2023-02-27-15/</guid><description>&lt;p>Software Design2月号で特集されていたドメイン駆動設計入門を読んだ時のメモです。&lt;/p>
&lt;h2 id="きっかけ">きっかけ&lt;/h2>
&lt;p>直近のタスクで作ったコードの設計がなんとなくいまいちで、どうすればもっとよくできていたのか悩んでいました。
また少し読んでいたGoの本で出てきたAPIのリポジトリ構成の設計思想がクリーンアーキテクチャやDDDがベースになっているもので、この辺り理解を深めたいなと思っていました。
そんな折にたまたま雑誌を見つけたので買って読んでみた次第です。&lt;/p>
&lt;h2 id="ざっくりとした感想">ざっくりとした感想&lt;/h2>
&lt;p>ちゃんと学びたいのであれば本当は原点の本にあたるべきなのですが、分厚く内容も古いため、雑誌の方が効率よく概要を把握できたような気がします。
特に本では説明されていない、クリーンアーキテクチャのような他の設計との関係性など、実用的な追記されているのが良いところでした。&lt;/p>
&lt;p>前半1~3章（概要・ドメインモデルの作り方・分散アーキテクチャの設計パターン）まではよかったのですが、4章（開発事例）に関しては説明が腑に落ちなかったり、事例に結果が伴っていなかったりと物足りなさは感じました。
とはいえ前半3章だけでも十分に読む価値はありました。&lt;/p>
&lt;p>思想みたいなものは大分把握できたと思うのですが、実業務にうまいこと導入するところに関してはまだイメージが湧かないので、もう少しいろんな他社事例を見てみれたらと思います。&lt;/p>
&lt;p>余談ですが、分散アーキテクチャの章で紹介されていた書籍「ソフトウェアアーキテクチャ ノードパーツ」読みたい。&lt;/p>
&lt;h2 id="内容">内容&lt;/h2>
&lt;p>主に復習&amp;amp;自分が思い出す用。第4章は割愛し、第5章（用語まとめ）は織り交ぜて要所要所に混ぜ込んだ。&lt;/p>
&lt;h3 id="第1章-ドメイン駆動設計とは">第1章. ドメイン駆動設計とは&lt;/h3>
&lt;p>根本の考え方について説明されている章。原点本の内容ベースだが、それにアプリケーション開発・オブジェクト指向・アジャイル開発と絡めた説明を筆者が追記している。&lt;/p>
&lt;ul>
&lt;li>前提としている考え方
&lt;ul>
&lt;li>事業の存続と発展&lt;/li>
&lt;li>それには、成長と変化するソフトウェアが必要になる&lt;/li>
&lt;li>それを実現するためには、複雑な業務ロジックに焦点を当てる必要がある&lt;/li>
&lt;li>そのためにドメインモデルを使う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメイン
&lt;ul>
&lt;li>なんらかのルールに基づいて管理されている範囲&lt;/li>
&lt;li>ソフトウェアが対象とする領域&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメイン駆動設計は、ソフトウェアV字モデルの最上位と最深部を強く関連づけることを目標とし、事業活動が発展し、変化を繰り返しながら存続していくことに貢献することを目指している&lt;/li>
&lt;li>ドメインモデル
&lt;ul>
&lt;li>事業の要点を抜き出してわかりやすくしたもの&lt;/li>
&lt;li>活用方法として以下がある
&lt;ul>
&lt;li>業務知識の理解を深める&lt;/li>
&lt;li>用語がバラバラになる問題に対し、同じ言葉で開発できるようにする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>知識豊富な設計&lt;/code>
&lt;ul>
&lt;li>重要な業務ルールを見極め、関係性を整理するためにドメインモデルを作っていくこと&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>深いモデル&lt;/code>
&lt;ul>
&lt;li>見落としに気付けたり、暗黙的な枠組みを明示的に表現できるようになったドメインモデル&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>これら二つは目指す方向性の認識合わせに必要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モデルと実装を結びつけるためのパターン
&lt;ol>
&lt;li>3層構造&lt;/li>
&lt;li>ポート&amp;amp;アダプター&lt;/li>
&lt;li>クリーンアーキテクチャ&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>3は完成コストが高く、それを簡略化したものが1や2という見方もある。上記3つの基本原則は同じ&lt;/li>
&lt;li>分離方法
&lt;ul>
&lt;li>業務ロジックとそれ以外のクラスを分離する&lt;/li>
&lt;li>業務ロジックを表現するクラスだけを、ドメインモデルに置く&lt;/li>
&lt;li>必要であれば両方を合成するクラスを作る（これはドメインモデルの外に置く）
&lt;ul>
&lt;li>これらが混在することはよくあるので、都度リファクタリングをしていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第2章-ドメインモデルを理解しよう">第2章. ドメインモデルを理解しよう&lt;/h3>
&lt;p>ドメイン駆動設計の中心となるドメインクラス設計のやり方について、原点本にも出てくる貨物運搬の予約フローを例にモデルに落とし込むやり方が解説されている。&lt;/p>
&lt;ul>
&lt;li>業務ロジックを記述する方法3つ
&lt;ol>
&lt;li>トランザクションスクリプト
&lt;ul>
&lt;li>入出力手順中心&lt;/li>
&lt;li>▲同じ計算が異なるトランザクションスクリプトに点在。関連する業務ルールが点在しがちになる。複雑なルールの記載は難しい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメインモデル
&lt;ul>
&lt;li>業務ロジックとデータ参照を分ける&lt;/li>
&lt;li>このデータ参照部分をアプリケーションクラス・ユースケースクラスと言ったりする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>テーブルモジュール
&lt;ul>
&lt;li>CRUDの中に必要に応じて業務ロジックを埋め込む&lt;/li>
&lt;li>▲複数のテーブルをまたぐロジックは埋め込めない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>事業活動のモデルを作る観点として、以下3つがある
&lt;ul>
&lt;li>観点
&lt;ul>
&lt;li>プロセス
&lt;ul>
&lt;li>フロー図やumlのアクティビティ図に起こす&lt;/li>
&lt;li>この図ではルールの存在を明示できない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>データ
&lt;ul>
&lt;li>よくあるのは、イベントとリソースに分けてモデリングするやり方&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ルール
&lt;ul>
&lt;li>業務ルールを表現する概念をクラスで表現しながら、業務ルールに基づく計算判断のロジックの置き場所としてメソッドを作る&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モデル設計の構成要素
&lt;ul>
&lt;li>エンティティ
&lt;ul>
&lt;li>個別に認識できる実態。管理番号を持つ何か。クラスの有力候補&lt;/li>
&lt;li>業務ルールを見つける方法として、エンティティを「イベント」「短命なリソース」「長命なリソース」に分けるやり方がある
&lt;ul>
&lt;li>イベントには2種類のルールが関連する
&lt;ul>
&lt;li>イベント発生に関するルール（許可・禁止）&lt;/li>
&lt;li>行動ルール（記録・通知など）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>値オブジェクト
&lt;ul>
&lt;li>業務ルールに基づく計算判断に使う属性を発勁んし、クラスとして表現するパターン&lt;/li>
&lt;li>値オブジェクトに注目することで、値を使う業務ルールが見つかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コレクションオブジェクト
&lt;ul>
&lt;li>配列・集合・写像などインスタンス変数としてもち、それを使う操作ロジックを同じクラスに集める&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>区分オブジェクト
&lt;ul>
&lt;li>場合分けを整理するのに使う。Enumで表現されるような&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モジュール
&lt;ul>
&lt;li>エンティティやオブジェクトなど、数あるクラスをわかりやすく整理するパターン。パッケージや名前空間となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第3章-分散アーキテクチャとドメイン駆動設計">第3章. 分散アーキテクチャとドメイン駆動設計&lt;/h3>
&lt;p>分散アーキテクチャとドメイン駆動設計がどう絡むかを、原点本ベースにした内容が紹介されている。&lt;/p>
&lt;ul>
&lt;li>単一モデル
&lt;ul>
&lt;li>従来のソフトウェア設計では、事業活動全体をこれで考えていた。しかしそれによって全体の構造が固定され、柔軟性や発展性が失われていった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>分散モデル
&lt;ul>
&lt;li>自立して活動する複数の構成要素が動的につながって、ネットワークを構成している&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメイン駆動設計が提供する分散アーキテクチャのモデルには、以下の3パターンがある
&lt;ol>
&lt;li>境界づけられたコンテキスト
&lt;ul>
&lt;li>1つのドメインが対象とする範囲を限定するアプローチ&lt;/li>
&lt;li>これによって、業務の目的や関心事が異なる領域を切り分ける。ユビキタス言語の適用範囲になる&lt;/li>
&lt;li>コンテキスト(文脈)：言葉の意味は文章の前後によって決まる。ドメインモデルを作るときは言葉の意味が同じになる範囲を切り分ける、が発想元&lt;/li>
&lt;li>必ずしも分散アーキテクチャの範囲となるわけではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コンテキストマップ
&lt;ul>
&lt;li>1の中だけで意味を持つ複数のドメインモデルをどう繋げるかを検討するパターン&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コアドメイン
&lt;ul>
&lt;li>2が増えた時に、複雑な全体の中で中核になる要素に焦点を合わせ、全体に秩序を生み出す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>マイクロサービス化する際に考えなければいけないこと
&lt;ul>
&lt;li>サービス間の繋ぎ方
&lt;ul>
&lt;li>通信はDBに比べて遅く不安定なので、検知やリトライの仕組みが必要になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>データの共有
&lt;ul>
&lt;li>同じデータを参照する仕組みのやり方色々
&lt;ul>
&lt;li>必要な情報を都度問い合わせる&lt;/li>
&lt;li>共有のためのサービスを作る&lt;/li>
&lt;li>情報を複製（キャッシュ）する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コンテキストマップを複雑にする要因はチーム間の関係性
&lt;ul>
&lt;li>関係性のパターン
&lt;ul>
&lt;li>対等
&lt;ul>
&lt;li>パートナーシップ&lt;/li>
&lt;li>共有カーネル&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>偏りがある
&lt;ul>
&lt;li>顧客と供給者&lt;/li>
&lt;li>順応者&lt;/li>
&lt;li>腐敗防止層&lt;/li>
&lt;li>公開ホストサービス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>断絶した関係&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サービス間調整のやり方
&lt;ul>
&lt;li>API仕様の公開&lt;/li>
&lt;li>テスト仕様の公開
&lt;ul>
&lt;li>仕様を一種の契約と見做して、双方が満たすことに責任を持つ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>テスト環境の提供
&lt;ul>
&lt;li>提供側の負担は大きいが、問題の早期発見につながる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コアドメインに集中する
&lt;ul>
&lt;li>事業領域の全体にドメイン駆動設計のやり方を適用するのは、現実的ではないので、集中すべきところを絞る&lt;/li>
&lt;li>集中すべきところ
&lt;ul>
&lt;li>業務プロセスやルールが複雑な箇所&lt;/li>
&lt;li>独自性のある箇所&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コアドメイン以外の対処法
&lt;ul>
&lt;li>既製品を使う。契約管理など&lt;/li>
&lt;li>イージーオーダー&lt;/li>
&lt;li>フルオーダー&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>進化する秩序&lt;/code>
&lt;ul>
&lt;li>コンテキストやつなぎ方は日々進化していくため、秩序を整えていく必要がある&lt;/li>
&lt;li>&lt;code>責務のレイヤー&lt;/code>
&lt;ul>
&lt;li>上記を実現する手段の一つ。1つのドメインの中でパッケージの役割を分類し、パッケージ間の依存関係を整理する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメインモデルを中核としたアプリケーションを動かすパターン
&lt;ul>
&lt;li>ユースケース（アプリケーション）
&lt;ul>
&lt;li>アプリケーションが必要とする計算判断を「集約」が提供するが、それを使って計算判断を実行する役割のクラス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ファクトリー
&lt;ul>
&lt;li>複雑な集約を生成する役割のクラス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>リポジトリ
&lt;ul>
&lt;li>ユースケースが記録や参照に使う役割のクラス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>