<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 日々のあれこれφ(．．)</title><link>https://reiichii.github.io/post/</link><description>Recent content in Posts on 日々のあれこれφ(．．)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 03 Dec 2023 20:46:47 +0900</lastBuildDate><atom:link href="https://reiichii.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>ゲームを題材に学ぶ 内部構造から理解するMySQL を読んだ</title><link>https://reiichii.github.io/post/2023-12-03-20/</link><pubDate>Sun, 03 Dec 2023 20:46:47 +0900</pubDate><guid>https://reiichii.github.io/post/2023-12-03-20/</guid><description>&lt;p>MySQLの内部構造についてもう少し理解を深めたいと本や資料などを探していた。ネットの記事の方が気軽に情報収集できるので、先にそちらを読むことにした。&lt;/p>
&lt;p>&lt;a class="link" href="https://gihyo.jp/list/group/%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E9%A1%8C%E6%9D%90%E3%81%AB%E5%AD%A6%E3%81%B6-%E5%86%85%E9%83%A8%E6%A7%8B%E9%80%A0%E3%81%8B%E3%82%89%E7%90%86%E8%A7%A3%E3%81%99%E3%82%8BMySQL" target="_blank" rel="noopener"
>ゲームを題材に学ぶ 内部構造から理解するMySQL | gihyo.jp&lt;/a>&lt;/p>
&lt;p>上記は2019年の記事でMySQL8系にも対応していた。全8ページあり、1ページもボリュームもそんなになく読みやすかった。1h30minほどで読み切れた。&lt;/p>
&lt;p>以下読んでいた時のメモ&lt;/p>
&lt;pre tabindex="0">&lt;code># 第1章 DBサーバの構造を知ろう！
- RDBMSはページ単位でデータを読み書きする
- インメモリDBはレコード単位でi/oできる
- MyISAMは固定調のシーケンシャルファイルとしてデータが保存される。超えた場合はフラグメンテーションが起きる。トランザクション処理がない。テーブルロックがかかる。更新が行われないマスタデータに利用すると高速化できる可能性がある。
- PKはクラスタードインデックスという形式で格納される(ルート・ブランチ・リーフ)
- 複合キーを使って同時に使うことが多いデータは同じページになる可能性が高くなるため、i/oの高速化が期待できる
- B-Treeインデックス。mysqlで特定のカラム値のある行を素早く見つけるための仕組み
- 通常のインデックスは、キーとアドレスの組み合わせで保存される
- 更新処理で行っていること
- ログバッファ(HDDに遅延書き込み)
- メモリ上のデータを書き換え
- 再起動時にログファイルのデータをHDDに書き込む
- バックアップファイルとそれ以降のログファイルがあれば、最後にコミットされた時点まで復元可能
# 第2章 ゲーム系で確認すべきパラメータ
- OLTP側は小さいページの方が有利になる可能性がある。
- ただし利用されない空白が多くなる
- TEXT、BLOBなどのデータ型は別ページに保存され
- ページサイズが大きいほど、データが細密に充填されメモリやHDDの利用効率が上がるため、大量のデータの処理に向く
- ログファイルが溢れて、HDDへのフラッシュ（実データの書き込み）が大量に起き、サーバの負荷が高くなる
- innodb_flush_log_at_trx_commit: ログファイルへの書き込みを1sに1回、などに設定できる。書き込み負荷を減らすことに貢献する。デフォルトはコミットごとの書き込み。最大1sデータをログファイルに書き込まれたデータをロストするリスクもある。またバッファが足りなくなったら、1s立たなくても書き込みが行われないことがある
- innodb_buffer_pool_size: 各処理が行える量以上に割り当てないようにしつつ、できる限り大きく取る。目安はキャッシュヒット率99~95%。
# 第3章 実行計画を見てSQLの構造を理解しよう
- sqlはDBエンジンの中のオプティマイザが手続型のソースに翻訳してコンパイルして実行するという処理で行われる
- データと分散具合によってアルゴリズムが変わる
- DBエンジンはヒット率を予想するために事前に統計情報を作っている
- 統計情報が更新されるとき
- インデックスが全体の数%書きかわったとき
- ランダムにインデックスの数ページを選んで統計情報を作成する
- oracleは実行計画が精密だが、更新のパフォーマンスが高い
- joinの順番を変えても実行計画は変わらない。使われているテーブルと結合条件が同じであれば
# 第4章 NoSQLとSQLの使いどころを知ろう
- memcacheとHandlerSocket(mysqlをKVSとして使用できるプラグイン)で処理速度の比較の例。今回の実験ではHandlerSocketの方が早かった
- 処理時間のほとんどがネットワーク処理とsqlのオーバーヘッドで費やされている傾向にあった
- NoSQLを使うと集計処理をDB側でできないためN+1のような非効率な処理になりうる
- NoSQLの方がMySQLよりも早いと言われるが、適材適所。ユーザアクションに対して1件のレコードだけを処理する」機能が多ければNosqlの方が適している可能性がある
# 第5章 DB側でやること、アプリ側でやることを見極めよう
- シンプルなクエリを大量に発行する処理(N+1)はsqlのオーバーヘッドとネットワークの処理が無駄に繰り返されるだけなので、パフォーマンス向上にも寄与しない
- アプリケーション鯖で肩代わりできる処理は、キャッシュやソート(ページャーがない)処理くらいしかない
- DBサーバから大量のデータをAPサーバにすべて値渡しして処理するより、DBサーバ内でできる処理は参照渡しで処理するほうが効率が良い
# 第6章 DBサーバでゲームの処理を作るとどうなる？
- MySQLのストアドプロしーじゃはプリコンパイルされないため、case式の方が高速
- さらに速度を追求する場合はUser Defined Function
# 第7章 パーティショニング
- 多くの処理で抽出条件に指定されるカラム（ゲーム系ではユーザIDなど）がある場合、レスポンスやサーバの負荷削減に効果が高い機能
- MySQLでは、サブパーティションまで作成できる
- MySQLでは、パーティショニングキーになるカラムは、プライマリーキー、または、ユニークキーの一部である必要がある
- 外部キー制約がついているテーブルはパーティショニングができない」という制限がある
- 種類
- ハッシュ: 整数値のカラムの値を分割する個数で割った余りの値で分割する
- キー
- レンジ: 保持期限で削除したい場合、DELETE文で削除するとインデックスの更新処理などが必要になるため非常に時間がかかりますが、レンジパーティショニングにしておけば、不要なパーティションをDROP文で捨て去ることができる
- リスト: Languege = &amp;#39;jp&amp;#39;などカーディナリティの低いカラムで分割
# 第8章 （最終回）　まとめ―
- 集合のイメージを持つ
&lt;/code>&lt;/pre></description></item><item><title>catatsuy/private-isuのパフォーマンス改善（max10万点程度）</title><link>https://reiichii.github.io/post/2023-04-09-11/</link><pubDate>Sun, 09 Apr 2023 10:50:51 +0900</pubDate><guid>https://reiichii.github.io/post/2023-04-09-11/</guid><description>&lt;p>平日夜の時間を使ってちょこちょこprivate-isuでパフォーマンス改善の勉強をしていました。&lt;/p>
&lt;p>大半やISUCON本や他の方のブログを参考にしたものなので、パフォーマンス改善面で真新しいことはやっていません。自分の整理&amp;amp;復習目的でやったことを書こうと思っていたのですが、試行錯誤ログが酷すぎて復習ブログ書くのが困難だったので、一旦作業ログとしてソースコードだけ残します。&lt;/p>
&lt;p>4月はプライベートが忙しくなりそうなのと、ちょっと別のことをやりたくなったので、落ち着いたら復習がてら解きなおして再度まとめたい..。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon-private-isu" target="_blank" rel="noopener"
>https://github.com/reiichii/isucon-private-isu&lt;/a>&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://knowledge.sakura.ad.jp/31520/" target="_blank" rel="noopener"
>ISUCON過去問題の環境を「さくらのクラウド」で構築する | さくらのナレッジ&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://amzn.asia/d/iYHy8uZ" target="_blank" rel="noopener"
>達人が教えるWebパフォーマンスチューニング 〜ISUCONから学ぶ高速化の実践 | Amazon&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.stenyan.jp/entry/2022/07/18/224212" target="_blank" rel="noopener"
>ISUCONの素振りで private-isu をやってGo実装で32万点までひとまず行った | stefafafan の fa は3つです&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>プログラマー脳 ~優れたプログラマーになるための認知科学に基づくアプローチ を読んだ</title><link>https://reiichii.github.io/post/2023-04-09-10/</link><pubDate>Sun, 09 Apr 2023 10:27:16 +0900</pubDate><guid>https://reiichii.github.io/post/2023-04-09-10/</guid><description>&lt;p>『プログラマー脳 ~優れたプログラマーになるための認知科学に基づくアプローチ』と言う本を読んだ時のメモです。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">積み本そっちのけで読む &lt;a href="https://t.co/6XuNOV4aXs">pic.twitter.com/6XuNOV4aXs&lt;/a>&lt;/p>&amp;mdash; れ (@reiichii01) &lt;a href="https://twitter.com/reiichii01/status/1630138659428274176?ref_src=twsrc%5Etfw">February 27, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="きっかけ">きっかけ&lt;/h2>
&lt;p>Goを勉強している時や仕事の中で、なんとなくコーディングに苦手意識がありました。そんな折にたまたまこの本を知って、息抜きがてら読んでみました。&lt;/p>
&lt;h2 id="ざっくりとした感想">ざっくりとした感想&lt;/h2>
&lt;p>自分の場合、脳への負荷が高くなると思考が停止してしまうことが多いのですが、そんな時に今の作業や状態をなるべく小さい単位で把握できると、どこが課題なのかどう対処できそうか考えを進めることができるので、それを実践していきたいと改めて思いました。本の各章に様々な課題に役に立ちそうなtipsが残っていたので、そういった状況に直面したタイミングで、使えそうだなと思ったものをちゃんと思い出せるようにしたいです。&lt;/p>
&lt;p>本に出てくる「チャンク化」や「メンタルモデル」のなどは、コーディング以外のところではやっている自覚はあって、ただ自分ではそういうことをしているという自覚はなかったので、無意識だったものを言語化して把握することができました。&lt;/p>
&lt;p>他にもオンボーディングの話や、初学者と熟練者の取り組み方の比較など書いてあったので、自分よりも若手の人に教えたりする機会にも役に立ちそうな内容が多く含まれていました。&lt;/p>
&lt;p>複数人に対してどんな風に変数の命名をするか課題を出して結果を比較するなど、プログラミング関連の研究事例が多数紹介されていたのも面白かったです。世の中にこんな研究している人たちがいることを知って目から鱗でした。&lt;/p>
&lt;h2 id="内容">内容&lt;/h2>
&lt;p>とりわけ印象に残っているところを中心に、自分が思い出す用途のものです。ただ内容をしっかり説明できるほど理解はできていないので、一旦そう言うものがあるのかも程度に留め、必要に応じて該当箇所を読み返したいです。&lt;/p>
&lt;h3 id="第1章-コードをよりよく理解するために">第1章 コードをよりよく理解するために&lt;/h3>
&lt;p>この章ではコーディング時に発生する認知負荷についてどんなものがあるのか、またそれらがどう影響し合っているのか、それらを踏まえてコードを読みやすくするためにできる工夫などが書かれていた。&lt;/p>
&lt;ul>
&lt;li>コードを読む時の認知負荷
&lt;ul>
&lt;li>知識不足&lt;/li>
&lt;li>情報不足&lt;/li>
&lt;li>処理能力の不足&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>記憶のチャンク化
&lt;ul>
&lt;li>ビーコンなど、記憶を容易にする工夫をすると良い&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>負荷が高いと感じる時に、何によるものなのか自分が把握できると良いのかもと思った。&lt;/p>
&lt;h3 id="第2章-コードについて考える">第2章 コードについて考える&lt;/h3>
&lt;p>この章では第1章の認知負荷の話を踏まえて、コードをより理解するためのアプローチ方法について書かれていた。&lt;/p>
&lt;ul>
&lt;li>変数の役割11パターン
&lt;ol>
&lt;li>固定値&lt;/li>
&lt;li>ステッパー：ループ処理の際に使われるiのようなもの&lt;/li>
&lt;li>フラグ&lt;/li>
&lt;li>ウォーカー：ステッパーと同様にデータを走査する際に使用されるが、ステッパーのように何が入るか予測しにくいもの。配列のインデックスだったり、ポインタだったり&lt;/li>
&lt;li>直近の値の保持者：例えばファイルから読み込んだ行など&lt;/li>
&lt;li>最も重要な値の保持者：反復処理の中などで目的の値を保持するもの&lt;/li>
&lt;li>収集者：データを一つの変数に集約させている時に使うもの&lt;/li>
&lt;li>コンテナ：リストや配列など、複数要素を保持するもの&lt;/li>
&lt;li>フォロワー：アルゴリズムなどで、前や次の値を保持して、他の変数とセットで利用されるもの&lt;/li>
&lt;li>オーガナイザー：値を並べ替えたり、異なる形式で保存するためだけに使われるもの&lt;/li>
&lt;li>テンポラリ：短期間だけ使われるもの&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>コードを読む際にも適用可能な文書理解の戦略
&lt;ul>
&lt;li>活性化：関連する事柄を積極的に考え、過去の知識を活性化させる&lt;/li>
&lt;li>監視：理解度を把握し続ける&lt;/li>
&lt;li>重要性の判断&lt;/li>
&lt;li>推論&lt;/li>
&lt;li>可視化&lt;/li>
&lt;li>自問自答&lt;/li>
&lt;li>要約&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>メンタルモデル&lt;/li>
&lt;li>より良い変数名のための3ステップ
&lt;ul>
&lt;li>命名に含める概念を選択する&lt;/li>
&lt;li>概念を表す単語を選択する&lt;/li>
&lt;li>単語を使って命名を行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>変数の役割11パターンは自分考えたことなかったけど、言われてみれば役割は何パターンかに集約されそう。&lt;/p>
&lt;h3 id="第3章-より良いコードを書くために">第3章 より良いコードを書くために&lt;/h3>
&lt;p>この章では理解しやすいコードを書くにはどうするか、またその逆として理解しにくいコードにはどういう特徴があるか、といった内容が書かれていた。&lt;/p>
&lt;ul>
&lt;li>コードの臭い
&lt;ul>
&lt;li>「巨大なクラス」や「長過ぎるメソッド」など、リファクタリング本で取り上げられているものが紹介されていた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>範例（work example）。問題解決能力を養うには、公式だけではなく、公式を使ってどうやって解いたかも合わせて教えてもらったグループの方が点数が高くなる傾向にあると言う教育系の研究事例がある。&lt;/li>
&lt;/ul>
&lt;p>リファクタリング本は読もうと思っていて積んでいたので、内容を少し知れて参考になった。&lt;/p>
&lt;p>今までの章を読んでこの章を読むと、分かりやすい命名によって受けられる恩恵の大きさを再認識できた気がする。&lt;/p>
&lt;h3 id="第4章-コーディングにおける共同作業">第4章 コーディングにおける共同作業&lt;/h3>
&lt;p>この章では開発者個人からさらに視野を広げて、チームで開発する際に新しい人が参画しやすくする方法などについて書かれていた。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>プログラミングの中の様々な活動&lt;/p>
&lt;ul>
&lt;li>転写&lt;/li>
&lt;li>探索&lt;/li>
&lt;li>理解&lt;/li>
&lt;li>検索&lt;/li>
&lt;li>増強：検索・理解・転写を組み合わせて新しい機能を作ること&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コードの理解のしやすさの指標&lt;/p>
&lt;ul>
&lt;li>エラーの発生しやすさ&lt;/li>
&lt;li>一貫性&lt;/li>
&lt;li>拡張性&lt;/li>
&lt;li>隠された依存関係&lt;/li>
&lt;li>暫定性&lt;/li>
&lt;li>粘性&lt;/li>
&lt;li>段階的評価&lt;/li>
&lt;li>役割表現力&lt;/li>
&lt;li>マッピングの近接度&lt;/li>
&lt;li>ハードな心的操作&lt;/li>
&lt;li>副次的表記&lt;/li>
&lt;li>抽象化&lt;/li>
&lt;li>視認性&lt;/li>
&lt;/ul>
&lt;p>表記法の認知特性（cognitive dimentions of notation）と言うものを、コードを対象に拡張したもの。ただしこれらは全部を満たせれば良いと言うものではなく、トレードオフの関係になるものもある。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新人のオンボーディングにあたって、認知負荷が高いことを覚えておく必要がある。熟練者は習得にかかった負荷を忘れてしまうもの&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>エンジニア1年目の自分は熟練のプログラマーは頭の中で全てコーディングを完結させているものだと思っていたので、1年目の自分にこれを教えてあげたかった。&lt;/p></description></item><item><title>ドメイン駆動設計入門(SoftwareDesign2023年2月号)を読んだ</title><link>https://reiichii.github.io/post/2023-02-27-15/</link><pubDate>Mon, 27 Feb 2023 14:52:15 +0900</pubDate><guid>https://reiichii.github.io/post/2023-02-27-15/</guid><description>&lt;p>Software Design2月号で特集されていたドメイン駆動設計入門を読んだ時のメモです。&lt;/p>
&lt;h2 id="きっかけ">きっかけ&lt;/h2>
&lt;p>直近のタスクで作ったコードの設計がなんとなくいまいちで、どうすればもっとよくできていたのか悩んでいました。
また少し読んでいたGoの本で出てきたAPIのリポジトリ構成の設計思想がクリーンアーキテクチャやDDDがベースになっているもので、この辺り理解を深めたいなと思っていました。
そんな折にたまたま雑誌を見つけたので買って読んでみた次第です。&lt;/p>
&lt;h2 id="ざっくりとした感想">ざっくりとした感想&lt;/h2>
&lt;p>ちゃんと学びたいのであれば本当は原点の本にあたるべきなのですが、分厚く内容も古いため、雑誌の方が効率よく概要を把握できたような気がします。
特に本では説明されていない、クリーンアーキテクチャのような他の設計との関係性など、実用的な追記されているのが良いところでした。&lt;/p>
&lt;p>前半1~3章（概要・ドメインモデルの作り方・分散アーキテクチャの設計パターン）まではよかったのですが、4章（開発事例）に関しては説明が腑に落ちなかったり、事例に結果が伴っていなかったりと物足りなさは感じました。
とはいえ前半3章だけでも十分に読む価値はありました。&lt;/p>
&lt;p>思想みたいなものは大分把握できたと思うのですが、実業務にうまいこと導入するところに関してはまだイメージが湧かないので、もう少しいろんな他社事例を見てみれたらと思います。&lt;/p>
&lt;p>余談ですが、分散アーキテクチャの章で紹介されていた書籍「ソフトウェアアーキテクチャ ノードパーツ」読みたい。&lt;/p>
&lt;h2 id="内容">内容&lt;/h2>
&lt;p>主に復習&amp;amp;自分が思い出す用。第4章は割愛し、第5章（用語まとめ）は織り交ぜて要所要所に混ぜ込んだ。&lt;/p>
&lt;h3 id="第1章-ドメイン駆動設計とは">第1章. ドメイン駆動設計とは&lt;/h3>
&lt;p>根本の考え方について説明されている章。原点本の内容ベースだが、それにアプリケーション開発・オブジェクト指向・アジャイル開発と絡めた説明を筆者が追記している。&lt;/p>
&lt;ul>
&lt;li>前提としている考え方
&lt;ul>
&lt;li>事業の存続と発展&lt;/li>
&lt;li>それには、成長と変化するソフトウェアが必要になる&lt;/li>
&lt;li>それを実現するためには、複雑な業務ロジックに焦点を当てる必要がある&lt;/li>
&lt;li>そのためにドメインモデルを使う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメイン
&lt;ul>
&lt;li>なんらかのルールに基づいて管理されている範囲&lt;/li>
&lt;li>ソフトウェアが対象とする領域&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメイン駆動設計は、ソフトウェアV字モデルの最上位と最深部を強く関連づけることを目標とし、事業活動が発展し、変化を繰り返しながら存続していくことに貢献することを目指している&lt;/li>
&lt;li>ドメインモデル
&lt;ul>
&lt;li>事業の要点を抜き出してわかりやすくしたもの&lt;/li>
&lt;li>活用方法として以下がある
&lt;ul>
&lt;li>業務知識の理解を深める&lt;/li>
&lt;li>用語がバラバラになる問題に対し、同じ言葉で開発できるようにする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>知識豊富な設計&lt;/code>
&lt;ul>
&lt;li>重要な業務ルールを見極め、関係性を整理するためにドメインモデルを作っていくこと&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>深いモデル&lt;/code>
&lt;ul>
&lt;li>見落としに気付けたり、暗黙的な枠組みを明示的に表現できるようになったドメインモデル&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>これら二つは目指す方向性の認識合わせに必要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モデルと実装を結びつけるためのパターン
&lt;ol>
&lt;li>3層構造&lt;/li>
&lt;li>ポート&amp;amp;アダプター&lt;/li>
&lt;li>クリーンアーキテクチャ&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>3は完成コストが高く、それを簡略化したものが1や2という見方もある。上記3つの基本原則は同じ&lt;/li>
&lt;li>分離方法
&lt;ul>
&lt;li>業務ロジックとそれ以外のクラスを分離する&lt;/li>
&lt;li>業務ロジックを表現するクラスだけを、ドメインモデルに置く&lt;/li>
&lt;li>必要であれば両方を合成するクラスを作る（これはドメインモデルの外に置く）
&lt;ul>
&lt;li>これらが混在することはよくあるので、都度リファクタリングをしていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第2章-ドメインモデルを理解しよう">第2章. ドメインモデルを理解しよう&lt;/h3>
&lt;p>ドメイン駆動設計の中心となるドメインクラス設計のやり方について、原点本にも出てくる貨物運搬の予約フローを例にモデルに落とし込むやり方が解説されている。&lt;/p>
&lt;ul>
&lt;li>業務ロジックを記述する方法3つ
&lt;ol>
&lt;li>トランザクションスクリプト
&lt;ul>
&lt;li>入出力手順中心&lt;/li>
&lt;li>▲同じ計算が異なるトランザクションスクリプトに点在。関連する業務ルールが点在しがちになる。複雑なルールの記載は難しい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメインモデル
&lt;ul>
&lt;li>業務ロジックとデータ参照を分ける&lt;/li>
&lt;li>このデータ参照部分をアプリケーションクラス・ユースケースクラスと言ったりする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>テーブルモジュール
&lt;ul>
&lt;li>CRUDの中に必要に応じて業務ロジックを埋め込む&lt;/li>
&lt;li>▲複数のテーブルをまたぐロジックは埋め込めない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>事業活動のモデルを作る観点として、以下3つがある
&lt;ul>
&lt;li>観点
&lt;ul>
&lt;li>プロセス
&lt;ul>
&lt;li>フロー図やumlのアクティビティ図に起こす&lt;/li>
&lt;li>この図ではルールの存在を明示できない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>データ
&lt;ul>
&lt;li>よくあるのは、イベントとリソースに分けてモデリングするやり方&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ルール
&lt;ul>
&lt;li>業務ルールを表現する概念をクラスで表現しながら、業務ルールに基づく計算判断のロジックの置き場所としてメソッドを作る&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モデル設計の構成要素
&lt;ul>
&lt;li>エンティティ
&lt;ul>
&lt;li>個別に認識できる実態。管理番号を持つ何か。クラスの有力候補&lt;/li>
&lt;li>業務ルールを見つける方法として、エンティティを「イベント」「短命なリソース」「長命なリソース」に分けるやり方がある
&lt;ul>
&lt;li>イベントには2種類のルールが関連する
&lt;ul>
&lt;li>イベント発生に関するルール（許可・禁止）&lt;/li>
&lt;li>行動ルール（記録・通知など）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>値オブジェクト
&lt;ul>
&lt;li>業務ルールに基づく計算判断に使う属性を発勁んし、クラスとして表現するパターン&lt;/li>
&lt;li>値オブジェクトに注目することで、値を使う業務ルールが見つかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コレクションオブジェクト
&lt;ul>
&lt;li>配列・集合・写像などインスタンス変数としてもち、それを使う操作ロジックを同じクラスに集める&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>区分オブジェクト
&lt;ul>
&lt;li>場合分けを整理するのに使う。Enumで表現されるような&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モジュール
&lt;ul>
&lt;li>エンティティやオブジェクトなど、数あるクラスをわかりやすく整理するパターン。パッケージや名前空間となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第3章-分散アーキテクチャとドメイン駆動設計">第3章. 分散アーキテクチャとドメイン駆動設計&lt;/h3>
&lt;p>分散アーキテクチャとドメイン駆動設計がどう絡むかを、原点本ベースにした内容が紹介されている。&lt;/p>
&lt;ul>
&lt;li>単一モデル
&lt;ul>
&lt;li>従来のソフトウェア設計では、事業活動全体をこれで考えていた。しかしそれによって全体の構造が固定され、柔軟性や発展性が失われていった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>分散モデル
&lt;ul>
&lt;li>自立して活動する複数の構成要素が動的につながって、ネットワークを構成している&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメイン駆動設計が提供する分散アーキテクチャのモデルには、以下の3パターンがある
&lt;ol>
&lt;li>境界づけられたコンテキスト
&lt;ul>
&lt;li>1つのドメインが対象とする範囲を限定するアプローチ&lt;/li>
&lt;li>これによって、業務の目的や関心事が異なる領域を切り分ける。ユビキタス言語の適用範囲になる&lt;/li>
&lt;li>コンテキスト(文脈)：言葉の意味は文章の前後によって決まる。ドメインモデルを作るときは言葉の意味が同じになる範囲を切り分ける、が発想元&lt;/li>
&lt;li>必ずしも分散アーキテクチャの範囲となるわけではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コンテキストマップ
&lt;ul>
&lt;li>1の中だけで意味を持つ複数のドメインモデルをどう繋げるかを検討するパターン&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コアドメイン
&lt;ul>
&lt;li>2が増えた時に、複雑な全体の中で中核になる要素に焦点を合わせ、全体に秩序を生み出す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>マイクロサービス化する際に考えなければいけないこと
&lt;ul>
&lt;li>サービス間の繋ぎ方
&lt;ul>
&lt;li>通信はDBに比べて遅く不安定なので、検知やリトライの仕組みが必要になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>データの共有
&lt;ul>
&lt;li>同じデータを参照する仕組みのやり方色々
&lt;ul>
&lt;li>必要な情報を都度問い合わせる&lt;/li>
&lt;li>共有のためのサービスを作る&lt;/li>
&lt;li>情報を複製（キャッシュ）する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コンテキストマップを複雑にする要因はチーム間の関係性
&lt;ul>
&lt;li>関係性のパターン
&lt;ul>
&lt;li>対等
&lt;ul>
&lt;li>パートナーシップ&lt;/li>
&lt;li>共有カーネル&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>偏りがある
&lt;ul>
&lt;li>顧客と供給者&lt;/li>
&lt;li>順応者&lt;/li>
&lt;li>腐敗防止層&lt;/li>
&lt;li>公開ホストサービス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>断絶した関係&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サービス間調整のやり方
&lt;ul>
&lt;li>API仕様の公開&lt;/li>
&lt;li>テスト仕様の公開
&lt;ul>
&lt;li>仕様を一種の契約と見做して、双方が満たすことに責任を持つ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>テスト環境の提供
&lt;ul>
&lt;li>提供側の負担は大きいが、問題の早期発見につながる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コアドメインに集中する
&lt;ul>
&lt;li>事業領域の全体にドメイン駆動設計のやり方を適用するのは、現実的ではないので、集中すべきところを絞る&lt;/li>
&lt;li>集中すべきところ
&lt;ul>
&lt;li>業務プロセスやルールが複雑な箇所&lt;/li>
&lt;li>独自性のある箇所&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コアドメイン以外の対処法
&lt;ul>
&lt;li>既製品を使う。契約管理など&lt;/li>
&lt;li>イージーオーダー&lt;/li>
&lt;li>フルオーダー&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>進化する秩序&lt;/code>
&lt;ul>
&lt;li>コンテキストやつなぎ方は日々進化していくため、秩序を整えていく必要がある&lt;/li>
&lt;li>&lt;code>責務のレイヤー&lt;/code>
&lt;ul>
&lt;li>上記を実現する手段の一つ。1つのドメインの中でパッケージの役割を分類し、パッケージ間の依存関係を整理する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドメインモデルを中核としたアプリケーションを動かすパターン
&lt;ul>
&lt;li>ユースケース（アプリケーション）
&lt;ul>
&lt;li>アプリケーションが必要とする計算判断を「集約」が提供するが、それを使って計算判断を実行する役割のクラス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ファクトリー
&lt;ul>
&lt;li>複雑な集約を生成する役割のクラス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>リポジトリ
&lt;ul>
&lt;li>ユースケースが記録や参照に使う役割のクラス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>『ポーズの定理』イラスト講座 参加ログ</title><link>https://reiichii.github.io/post/2023-02-26-14/</link><pubDate>Sun, 26 Feb 2023 14:19:45 +0900</pubDate><guid>https://reiichii.github.io/post/2023-02-26-14/</guid><description>&lt;p>2/28(土)に『ポーズの定理』イラスト講座に参加してきたのでその記録です。&lt;/p>
&lt;p>一番印象に残ったことは、人体を書く時はそのポーズのフェーズも意識する必要があると知れたことでした。それにより重心がどっちに向いているのか、重心の向く方向によって首や手首や胴体の捻りが生じ、それを描くことで固くならないリアリティのあるポーズに繋がります。
漫画を書く時なんかは特にこれを知っているか知らないかでだいぶ差が出そうな気がしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://t.livepocket.jp/e/ilqq_?utm_source=ATTEND-MAIL&amp;amp;utm_medium=email&amp;amp;utm_campaign=196969&amp;amp;utm_content=Mail20230216" target="_blank" rel="noopener"
>理論と実践で学ぶ「魅力的なポーズの描き方」 ~2時間でわかる【ポーズの定理】~｜ライヴポケット&lt;/a>&lt;/p>
&lt;h2 id="ポーズの定理とは">『ポーズの定理』とは&lt;/h2>
&lt;p>漫画家・篠房六郎先生の著書です。書籍自体はかな前にたまたまtwitterで知って、同人版を購入していたのですが、長くてなかなか読みきれず、前半軽く目を通して積んでしまっていました。オンライン講座は著者自らが2hにわたってポイントを紹介・解説してくれるとのことで、これはもう参加するしかない次第でした。&lt;/p>
&lt;h2 id="参加メモ">参加メモ&lt;/h2>
&lt;p>私が思い出す用です。&lt;/p>
&lt;h3 id="1-基本手首は小指側に倒れる">1. 基本手首は小指側に倒れる&lt;/h3>
&lt;ul>
&lt;li>壁に手をつくと腕は斜めに倒れる&lt;/li>
&lt;li>足首も脱力すると内側にまがる。それによりくるぶしの位置が内側の方が高くなる&lt;/li>
&lt;li>男女で傾向の違い(描き分けのポイント)
&lt;ul>
&lt;li>男子は膝もつま先も外向き。ひじは外側&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>女性は膝を正面に、つま先を内側に。ひじは内側に入る&lt;/li>
&lt;/ul>
&lt;h3 id="2-肩甲骨の動きで背骨も傾く">2. 肩甲骨の動きで背骨も傾く&lt;/h3>
&lt;ul>
&lt;li>左右の肘の位置が上下に離れていると、体が傾く&lt;/li>
&lt;li>両腕の内、肘の位置が後ろにある方に、背骨は傾きやすい&lt;/li>
&lt;li>ひねりの話
&lt;ul>
&lt;li>かばんを持つサンプルと、合気道の動画で紹介&lt;/li>
&lt;li>肘の位置と合わせて捻りも意識すると良い&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-立ち直り反応">3. 立ち直り反応&lt;/h3>
&lt;ul>
&lt;li>人がこけた時の動きのパターンの話
&lt;ul>
&lt;li>意識がある人は、頭が上がる。それに伴い上半身と肘もついてくる&lt;/li>
&lt;li>意識がない人は頭が下に下がる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>首を左右に振ったときに目線は水平にならない
&lt;ul>
&lt;li>左右に触れた時は顎が上がる。後頭部の重心に引っ張られるため&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>下にあるものを拾おうとする時、頭と体は垂直にならず、肩の低い方に向かって後頭部を倒す形になる&lt;/li>
&lt;li>体制を斜めの状態で固定しようとした時、首だけ低い方に倒れ、後頭部の重心は上に向かって後頭部を残す形でバランスを保とうとする&lt;/li>
&lt;li>肩と後頭部の位置の関係。首を描くときは首自体と頭の付け根の二か所で稼働を考えると良い&lt;/li>
&lt;li>股関節に関して、軸足側の腰が上がる形になる&lt;/li>
&lt;/ul>
&lt;h3 id="4-abcパターン">4. ABCパターン&lt;/h3>
&lt;p>良いとされるポーズは、基本的には以下のパターンになることが多い。&lt;/p>
&lt;ul>
&lt;li>A. モデル立ちの時は、肩と反対の腰が上がる&lt;/li>
&lt;li>B. 前屈みの時は、同じ側の肩と腰が上がる。（ヒーロー着地のような）&lt;/li>
&lt;li>角度によって正中線が斜めなのに、真っ直ぐ見えてしまうことがある。
&lt;ul>
&lt;li>見分け方は、腰、腹がどちらに開いているのか。重心の向きが後ろか前かで、A.Bパターンを当てはめて逆算が可能になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C. A,Bの例外。片足で立った場合、腰は高い方に倒れ込む&lt;/li>
&lt;li>AとBの複合&lt;/li>
&lt;li>美少女を描くときは基本CAパターンが良いらしい&lt;/li>
&lt;/ul>
&lt;h3 id="公開添削">公開添削&lt;/h3>
&lt;ol>
&lt;li>走っている人の絵&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>全力で走ると腕が開く&lt;/li>
&lt;li>一番手足が振り切っているときは、宙に浮いている状態の時になる&lt;/li>
&lt;li>背骨の剃り&lt;/li>
&lt;li>手が後ろに振り切っている時、手は脱力状態になる&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>猫耳イラスト&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>篠房先生的にも結構難しいポーズだった。考えながら描いたこととしては、Aパターンだから上がる腰と手は反対の方向になるはず、など&lt;/li>
&lt;li>前傾のポーズだったため、腰が見えにくい。そのため見えないから捨てるという判断をしたり&lt;/li>
&lt;li>肘が内側に入っていると、手は小指側ではなく内側に向く&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>Q&amp;amp;Aメモ
&lt;ul>
&lt;li>ポーズの定理は手癖に陥らないようにするためのものでもある。定理に忠実に描くことにより一時期は硬くなることもあるが、覚えると描けるものの域が広がってくるはず。(守破離の守)&lt;/li>
&lt;li>体の練習方法に関して、パーツを足していくのではなく、全体を割っていくように描くと、バランスよく描ける&lt;/li>
&lt;li>チェック項目としてポーズの定理がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="その他感想">その他感想&lt;/h2>
&lt;p>開催はzoomで、進行はKADOKAWAの編集者の人が行う形でした。普段はIT系の勉強会くらいしか参加したことなかったので、進行が雰囲気や大分異なり、新鮮でした。
スライドは最小限で、アジェンダなどあるもののそこにきっちりと言うよりは、篠房先生のipadを黒板に、思いついた方向に話が進むことも多かったです。良くも悪くも緩い感じで。&lt;/p>
&lt;p>同人版はpdfなのですが、ページ数多い割には目次などもないので読みづらく、講座の中で紹介されていた書籍版の中身は結構良い感じに見やすくまとまっていそうだったので、そのうち買い直そうかと思いました。&lt;/p></description></item><item><title>さよなら2022年</title><link>https://reiichii.github.io/post/2022-12-29-12/</link><pubDate>Thu, 29 Dec 2022 12:23:40 +0900</pubDate><guid>https://reiichii.github.io/post/2022-12-29-12/</guid><description>&lt;p>年末なのでふりかえりをしていました。&lt;/p>
&lt;h2 id="今年立てていた目標のこと">今年立てていた目標のこと&lt;/h2>
&lt;p>2022年は以下3つの目標を立てていました。&lt;/p>
&lt;ul>
&lt;li>イラスト上達&lt;/li>
&lt;li>ISUCON出場&lt;/li>
&lt;li>読書する習慣を取り戻す&lt;/li>
&lt;/ul>
&lt;p>イラストに関しては、今年一番注力していたものでした。基本スタイルとしては平日朝の始業までの時間で描いており、気の向くままに描きたいものを書き散らしつつ、気になったところを補っていく形です。&lt;br>
やってよかったものとしては100日チャレンジでした。私はものすごく筆が重く、今までは1人+簡単な背景に10h以上かかっていたのですが、1日1枚描くのを100日続ける！を試してみたところ、3,4h程度で同じクオリティを出せるようになりました。また枚数も少ない時は1ヶ月1枚しか完成しなかったものが、100日チャレンジ期間中は1ヶ月30枚仕上げることができ、人間やればできるものだなと実感したものでした。1枚に掛けられる時間は以前よりも少なくなったのですが、大ラフ〜線画までのトライ&amp;amp;エラーのサイクルを早く回せるようになったおかげか、ベースのクオリティも今年前半と比べるとだいぶ良くなったように見えます。ただ1日1枚はやっぱり厳しく、日常生活に支障をきたすようになってきたので100日は続きませんでした笑&lt;br>
ただそれでもまだ筆は重いし、描くことは辛いです。今年ほどは時間は割けないかもしれませんが、イラストは自分の心の支柱となりつつあるので、来年も楽しくマイペースに続けていきたいです。&lt;/p>
&lt;p>ISUCONに関しては、今年初出場することができました。&lt;br>
0次予選(ただの申し込み)が3回あって本当に助かりました&amp;hellip;。仕事でバタバタしている時期だったので2回申し込みそびれて、出場すらできませんでしたというオチになりかけていたのですが、幸い3回目はすんなり申し込めました。ただ肝心の結果は散々でした。&lt;br>
今年は手に馴染んだPythonでの出場だったのですが、サーバサイドエンジニアとして幅を広げたいというのもあり、来年はGoで出て結果を残すことが目標です。&lt;/p>
&lt;p>読書する習慣を取り戻すに関しては、私は普段電車の中で本を読んでいたのですが、コロナ禍でリモワに突入して以降本を読まなくなってしまったので立てたものでした。&lt;br>
結論から言うと、決まった時間に読むといった形での習慣化はできていないのですが、気になる本を見つけて、ちょこちょこ時間を作って年17冊ほどは読むことはできました（仕事関係、小説などジャンルはまちまち。漫画は含まない）。ブクログにつけ忘れることが多々あったので、記録化も合わせて来年以降も続けていきたいです。話題になっていた三体シリーズは読んで本当によかったです。外伝シリーズはまだですが、2巻以降の本編はあっという間でした。&lt;/p>
&lt;h2 id="仕事のこと">仕事のこと&lt;/h2>
&lt;p>仕事面では、今年1年は自分にとっては非常に大きな手応えを得ることができました。&lt;/p>
&lt;p>今年の頭は今のチームに移動して1年くらい経った頃で、一通りの通常業務やシステムへの理解を深められた一方で、未だ漠然とした不安を抱えていたように記憶しています。そんな中先輩社員との1on1の中で「何やりたい？」と聞かれた時にふわっとベースで「設計」と言っていました。それがきっかけで「ビジネス側へのヒアリング→用件定義とシステム設計に落とし込む→実装→テスト→リリース」までを一通り任せてもらえ、そんなサイクルを4回くらい回していました。今までシステム設計以上のフェーズにはほとんど携わったことがなかったのですが、一通りのサイクルを所々チームメンバーにサポートをしてもらいつつも、自分の考えや判断ベースで進めることができて通用することを実感でき、社会人になって以来抱えていた漠然とした不安の大半を解消することができたように思えます。実際会社の評価も2回連続で良いものでした。ただ、今のまま行くとソフトスキルばかり求められるような気がして、それが最近新しい悩みになりつつあります。&lt;/p>
&lt;p>テクニカルスキル面もプライベートでちまちま気になったことを勉強していましたが、特に平日夜は疲れていて思うように時間を確保できなかった時期が多々ありました。今年イラストにかけていた分、来年はこちらの比重を増やし、自分が満足できるアウトプットをより多く出していけたらと思います。&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>今年からの試みの一つとして、以下を行なっていました&lt;/p>
&lt;ol>
&lt;li>目標とそのためにやることを管理するためのボードを作って、取り組みと成果を追う&lt;/li>
&lt;li>Googleカレンダーにやっていたことの時間を大まかにつけ、discordに個人メモを残す&lt;/li>
&lt;/ol>
&lt;p>2をしていたおかげで、注力していること以外にどんなことをしていたかを見返すことができました。ふりかえる前は「今年はイラスト以外はイマイチだったな」という所感だったのですが、やってみようと思ったこと、何週間か続いたけどいつの間にかやめていたこと(日記をつけるとか、朝ラジオ体操するとか)、定着し過ぎていて意識から漏れていたこと(メモがとっ散らかっていたので情報を記録する場所をNotionとDiscordと2つに決めてそれのみで行うとか)細かいことが大半ですが、自分が思っていたよりは色々なことをしていました。些細な取り組みも塵積になると侮れないことを実感したので、また来年も上手くいかないことばかりだったとしても、めげずにやっていこうと思いました。&lt;/p>
&lt;p>今年ならではの出来事としては、解散したガネクロのイベントに行けたり、住宅ローンの審査があったり、ガンダムシリーズ(主に宇宙世紀シリーズ)にハマったり、福島に嫁いだ妹の家に遊びに行ったことが特に印象深かったです。&lt;/p>
&lt;p>来年は二十代ラストの年なのですが、歳をとることへの不安というよりは、歳を重ねるごとに人生良くなってきている実感があるので、この調子で楽しくやっていけたらなと思います。ただ首や肩の凝り、肉体面に関しては最近危機感が増しているので、そこらへんは今の内になんとかしたいところ&amp;hellip;🙂&lt;/p></description></item><item><title>TyperとPoetryでcliを作って公開するまでの流れ</title><link>https://reiichii.github.io/post/2022-10-10-12/</link><pubDate>Mon, 10 Oct 2022 12:30:14 +0900</pubDate><guid>https://reiichii.github.io/post/2022-10-10-12/</guid><description>&lt;p>cliを作りたかったというよりは、FastAPIの兄弟ツールTyperを触ってみたかったのと、Pythonでcliを作る流れを思い出したかったのが動機です。ですのでtodolistは最小限の機能だけを持っています。&lt;/p>
&lt;p>最後にcliを作ったのはPython初めて1年目くらいの頃で、その頃はまだPoetryも触っておらず、setup.py書くの大変だったという記憶しかなかったのですが、今はこんなに手軽に作れてしまうんだなと感動でした。&lt;/p>
&lt;h2 id="poetryでパッケージを作成する">Poetryでパッケージを作成する&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Poetryでプロジェクトの雛形を作成します&lt;/p>
&lt;pre tabindex="0">&lt;code>poetry new python_cli_todo
.
├── README.md
├── pyproject.toml
├── r_todolist
│ └── __init__.py
└── tests
└── __init__.py
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>作成したライブラリに必要なパッケージをインストールします。&lt;/p>
&lt;pre tabindex="0">&lt;code>poetry add typer[all]
&lt;/code>&lt;/pre>&lt;p>今回はTyperだけです。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pyproject.tomlにcli用の設定を追記&lt;/p>
&lt;pre tabindex="0">&lt;code>[tool.poetry.scripts]
todo = &amp;#34;r_todolist.main:app&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;code>todo&lt;/code>コマンドで動くようになっています&lt;/p>
&lt;/li>
&lt;li>
&lt;p>サンプルコードを載せておく&lt;/p>
&lt;p>動作確認をした後実装する予定なので、今は公式ドキュメントの以下のコードを配置しておきます。&lt;/p>
&lt;p>&lt;a class="link" href="https://typer.tiangolo.com/tutorial/package/#create-your-app" target="_blank" rel="noopener"
>https://typer.tiangolo.com/tutorial/package/#create-your-app&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>仮想環境内でcliを実行してみる&lt;/p>
&lt;pre tabindex="0">&lt;code>poetry install
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ poetry run todo load
Loading portal gun
$ poetry run todo shoot
Shooting portal gun
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="アプリケーションの実装">アプリケーションの実装&lt;/h2>
&lt;p>今回実装するtodolistはCRUD4つのサブコマンドを持つものです。DBはSQLite3を使います。各サブコマンドの細かい出力例は&lt;a class="link" href="https://github.com/reiichii/python-todolist-cli#%E4%BB%95%E6%A7%98" target="_blank" rel="noopener"
>README&lt;/a>に記載してあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>add&lt;/code>: タスクの追加&lt;/li>
&lt;li>&lt;code>ls&lt;/code>: タスクの一覧参照(デフォルトで未完了のもの・オプションで完了済みのものを表示できる)&lt;/li>
&lt;li>&lt;code>done&lt;/code>: 完了したタスクを完了済みにする&lt;/li>
&lt;li>&lt;code>rm&lt;/code>: タスクの削除(複数指定可)&lt;/li>
&lt;/ul>
&lt;h3 id="typerについて">Typerについて&lt;/h3>
&lt;p>&lt;a class="link" href="https://typer.tiangolo.com/" target="_blank" rel="noopener"
>https://typer.tiangolo.com/&lt;/a>&lt;/p>
&lt;p>FastAPIの作者が作ったcliを作成するためのライブラリになります。作者曰く兄弟ライブラリとのことで、FastAPIの要素である「型定義してエディタのサポートを受け開発効率を上げる」をcli開発時にも実現する設計思想のようです。ただしPydanticではなくClickパッケージをベースに実現させているようでした。&lt;/p>
&lt;p>他にもcli出力時にstyleを良い感じにしてくれるrichというライブラリや、パッケージをインストールしたときに自動で実行環境のシェルに合う形で自動補完設定を追記してくれる機能がついていたりなど、色々充実していました。&lt;/p>
&lt;p>以下ではTyper周りの部分だけ抜粋する形で取り上げています。コードの全体は&lt;a class="link" href="https://github.com/reiichii/python-todolist-cli/blob/main/r_todolist/main.py" target="_blank" rel="noopener"
>main.py&lt;/a>の1ファイルに全部収まっています。&lt;/p>
&lt;h3 id="addサブコマンド">addサブコマンド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> typer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> rich &lt;span style="color:#f92672">import&lt;/span> print
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Typer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.command&lt;/span>() &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task: str &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Option( &lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, &lt;span style="color:#75715e"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;what you have to do.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show_default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;send a email&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> add task to list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#f92672">.&lt;/span>insert_task(task)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;[green]added.[/green]&amp;#34;&lt;/span>) &lt;span style="color:#75715e"># 5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>@app.command()&lt;/code> でサブコマンドを関数として定義できる&lt;/li>
&lt;li>Typerの基本的な挙動として、関数の引数にデフォルト値を含めなければcli実行時の必須のパラメータになり、デフォルト値を指定すればcli実行時のoptionを作ることができる&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>例えばadd関数の例では、上記の定義をすれば &lt;code>--task&lt;/code> というoptionが使えるようになっており、&lt;code>--task&lt;/code>で指定した値がtask変数に渡される&lt;/li>
&lt;li>今回はoptionで指定しているが、デフォルト値を省略しているため必須項目としてhelpの表示が出たり、バリデーションが走るようになっている&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;code>typer.Option()&lt;/code>や &lt;code>typer.Arguments()&lt;/code>を使えば、引数により詳細な設定を追加することができる&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>例えば&lt;code>prompt=True&lt;/code>にしていることで、この関数ではtaskの入力を対話形式で入力できる&lt;/li>
&lt;li>&lt;code>help&lt;/code>パラメータで、&lt;code>--help&lt;/code>した時にこのオプションの説明を追加することができる&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>docstringで定義した文章は、&lt;code>--help&lt;/code>時にそのままサブコマンドの説明として表示される&lt;/li>
&lt;li>richライブラリの機能で、文字を緑色で表示させる。&lt;/li>
&lt;/ol>
&lt;h3 id="lsサブコマンド">lsサブコマンド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> typer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> rich &lt;span style="color:#f92672">import&lt;/span> print
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Typer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.command&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ls&lt;/span>(done: bool &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Option(&lt;span style="color:#66d9ef">False&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Show only DONE tasks.&amp;#34;&lt;/span>)): &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> show incomplete tasks.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task_lists &lt;span style="color:#f92672">=&lt;/span> db&lt;span style="color:#f92672">.&lt;/span>get_lists(done)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> l &lt;span style="color:#f92672">in&lt;/span> task_lists:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is_done &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\[x]&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> l&lt;span style="color:#f92672">.&lt;/span>is_done &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;[]&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;- &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>is_done&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>l&lt;span style="color:#f92672">.&lt;/span>id&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">. &amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>l&lt;span style="color:#f92672">.&lt;/span>task&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>lsサブコマンドのデフォルトの引数を &lt;code>False&lt;/code> に設定している。この定義をした時点で &lt;code>--done&lt;/code> というoptionが使えるようになっており、これを指定するとTrueが渡される&lt;/li>
&lt;li>markdownのチェックボックス形式でタスク一覧を表示させるようにしたかったが、&lt;code>[x]&lt;/code>のように書いてしまうとrichの機能と競合して表示されなかった&lt;/li>
&lt;/ol>
&lt;h3 id="doneサブコマンド">doneサブコマンド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.command&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">done&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: int &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Argument( &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Select task id&amp;#34;&lt;/span>, metavar&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TASK_ID&amp;#34;&lt;/span>, show_default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> check the task
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task &lt;span style="color:#f92672">=&lt;/span> db&lt;span style="color:#f92672">.&lt;/span>done_task(id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>task&lt;span style="color:#f92672">.&lt;/span>id&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">. &amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>task&lt;span style="color:#f92672">.&lt;/span>task&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34; is done:tada:&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>task_idが必須項目になるので &lt;code>typer.Argument(...)&lt;/code>で定義した&lt;/li>
&lt;li>metavarパラメータでhelpの表示時を指定できる。また関数のデフォルト値ではなく、helpに表示するときのデフォルト値を&lt;code>show_default&lt;/code>で変えられる&lt;/li>
&lt;li>richの機能で絵文字が表示させることができる&lt;/li>
&lt;/ol>
&lt;h3 id="rmコマンド">rmコマンド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.command&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">rm&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ids: List[int] &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Argument( &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Select task_ids separated by spaces.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show_default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1 2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metavar&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TASK_ID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> delete the tasks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#f92672">.&lt;/span>delete_ids(ids)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;removed: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join([str(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> ids])&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>スペース区切りで入力したcliの引数値を、配列として渡すことができる&lt;/li>
&lt;/ol>
&lt;h2 id="pypiへ公開する">PyPIへ公開する&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>PyPIへログインし、API tokenを発行する&lt;/p>
&lt;p>ちなみにAPI tokenを発行する際にはscopeを選択するのですが、プロジェクトがない状態だと全プロジェクトしか選択できません。ただプロジェクトをpublishした後にプロジェクトの管理画面からスコープをプロジェクトに限定したAPI tokenが発行できるようでした。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PoetryにPyPIのAPI tokenを設定する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ poetry config pypi-token.pypi {API TOKEN}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>publishする&lt;/p>
&lt;pre tabindex="0">&lt;code>poetry publish --build
&lt;/code>&lt;/pre>&lt;p>publishしたらもう公開されており、pip installでインストールできるようになっています。また更新はpyproject.tomlで設定しているversionを更新して再度同じコマンドを実行する必要があります。&lt;/p>
&lt;p>&lt;a class="link" href="https://pypi.org/project/r-todolist/" target="_blank" rel="noopener"
>https://pypi.org/project/r-todolist/&lt;/a> 🎉&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://typer.tiangolo.com/tutorial/package/" target="_blank" rel="noopener"
>Building a Package - Typer&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>プロジェクター付きホテルと温泉で優勝してきた</title><link>https://reiichii.github.io/post/2022-09-06-22/</link><pubDate>Tue, 06 Sep 2022 22:20:50 +0900</pubDate><guid>https://reiichii.github.io/post/2022-09-06-22/</guid><description>&lt;img src="https://reiichii.github.io/post/2022-09-06-22/IMG_8438.jpg" alt="Featured image of post プロジェクター付きホテルと温泉で優勝してきた" />&lt;p>買ってまだ見ていないライブDVDをホテルに篭って鑑賞したいなー🥺🥺🥺そしてできれば大浴場と美味しい朝食も付いていて欲しいなー🥺🥺というところから始まり、有給取って行ってきました。&lt;/p>
&lt;p>ただ残念ながら部屋にプロジェクターが付いていて、且つ持ち込みのDVDを再生できて、且つ大浴場が付いて、且つ一人二人用の部屋というのは探した限りでは見つからず、大浴場を諦めることにしました。&lt;/p>
&lt;p>ただ偶然にもホテルから徒歩圏内で行けるところに銭湯があり、大浴場ではないもののサウナがあって温泉が沸いているとのことで結果的にほとんど叶いました。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">ホテルに籠ってライブDVDを観る会✌️部屋スタイリッシュで超綺麗だった。狭いけど正方形なので全然圧迫感なく、住める。リクライニングベッドとスクリーンの上下を備え付けのiPodで操作できたり。これなら冷房と照明もできるようにして欲しかった笑 &lt;a href="https://t.co/fZ073wTy2D">pic.twitter.com/fZ073wTy2D&lt;/a>&lt;/p>&amp;mdash; れ (@reiichii01) &lt;a href="https://twitter.com/reiichii01/status/1566999622291431426?ref_src=twsrc%5Etfw">September 6, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>行ったホテルはこちら。&lt;/p>
&lt;p>ちょっとした問い合わせは全部公式サイトのチャットで済むのも便利で良かった。また行きたい。&lt;/p>
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.slashhotels.com%2F" title="【公式】slash川崎 (スラッシュ川崎)｜デジタルテクノロジーを活用したライフスタイルホテル" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 680px; margin: 10px 0px;" loading="lazy">&lt;/iframe>
&lt;p>銭湯は歩いて5分ほどのところにある政之湯というところ。&lt;/p>
&lt;p>建物は古くシャワーヘッドは動かず浴槽は小さいのですが、清潔感があって天井高くて居心地は良かったです。何よりサウナが付いていて(後から作られたのか綺麗だった)、川崎天然温泉なる黒い湯が沸いていました。&lt;/p>
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fk-o-i.jp%2Fkoten%2Fmasanoyu-kawa%2F" title="政の湯 | 【公式】神奈川の銭湯情報" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 680px; margin: 10px 0px;" loading="lazy">&lt;/iframe>
&lt;ul>
&lt;li>15:00 チェックイン&lt;/li>
&lt;li>買い出し&lt;/li>
&lt;li>ライブDVD1本目鑑賞&lt;/li>
&lt;li>銭湯行く&lt;/li>
&lt;li>散歩がてらドミノピザ(徒歩10分)まで歩いて夕飯調達&lt;/li>
&lt;li>ライブDVD2本目鑑賞&lt;/li>
&lt;li>寝る&lt;/li>
&lt;li>起きる&lt;/li>
&lt;li>ホテルのカフェで朝食&lt;/li>
&lt;li>読書&lt;/li>
&lt;li>11:00 チェックアウト&lt;/li>
&lt;/ul>
&lt;p>な具合で巣篭もり満喫できて満足でした☺️&lt;/p>
&lt;p>&lt;img src="https://reiichii.github.io/post/2022-09-06-22/IMG_8438.jpg"
width="2736"
height="2077"
srcset="https://reiichii.github.io/post/2022-09-06-22/IMG_8438_hu4858278573ce4ed581962d459c2ca03b_1191585_480x0_resize_q75_box.jpg 480w, https://reiichii.github.io/post/2022-09-06-22/IMG_8438_hu4858278573ce4ed581962d459c2ca03b_1191585_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>プロジェクターやDVD再生機器が必要なければ、スクリーンと大浴場(しかも温泉)と朝食付いたこちらのホテルに行きたかった。&lt;/p>
&lt;p>また別の機会に。&lt;/p>
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.superhotel.co.jp%2Fs_hotels%2Fginza%2F" title="【公式最安】スーパーホテルPremier銀座 - 東京都中央区銀座のビジネスホテル" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 680px; margin: 10px 0px;" loading="lazy">&lt;/iframe></description></item><item><title>ISUCON12予選問題解き直し2</title><link>https://reiichii.github.io/post/2022-09-04-22/</link><pubDate>Sun, 04 Sep 2022 22:28:00 +0900</pubDate><guid>https://reiichii.github.io/post/2022-09-04-22/</guid><description>&lt;p>&lt;a class="link" href="http://localhost:1313/post/2022-08-27-15/" target="_blank" rel="noopener"
>前回の記事&lt;/a>の続きです。&lt;/p>
&lt;p>&lt;a class="link" href="https://isucon.net/archives/56842718.html" target="_blank" rel="noopener"
>ISUCON12 予選の解説 (Node.jsでSQLiteのまま10万点行く方法) : ISUCON公式Blog&lt;/a>を参考にPythonで解き直していました。アプリケーションサーバを分ける手前まで改善したのですがmax6500点までしかいかず、分けても10万点どころか予選突破相当の24000点に届くかさえ怪しかったので頓挫しました。&lt;/p>
&lt;p>追加で実施できたもの&lt;/p>
&lt;ul>
&lt;li>tenantDB player_scoreにINDEXをはる&lt;/li>
&lt;li>Ranking APIでランキング集計するのをやめる&lt;/li>
&lt;/ul>
&lt;p>自分で追加で行ったこと&lt;/p>
&lt;ul>
&lt;li>scoreエンドポイントのトランザクション見直し&lt;/li>
&lt;li>Finish APIでBillingReportを生成する の修正&lt;/li>
&lt;li>lockによるエラーが多発したので一旦timeoutを伸ばす&lt;/li>
&lt;li>players/addの改善&lt;/li>
&lt;/ul>
&lt;p>実施しなかったもの&lt;/p>
&lt;ul>
&lt;li>AddTenant APIでSQLite DBを作るのをやめる&lt;/li>
&lt;li>nginxで複数台に振り分ける&lt;/li>
&lt;li>nginxをupstream keepaliveする&lt;/li>
&lt;li>MySQLをちょっとチューニングする&lt;/li>
&lt;/ul>
&lt;h2 id="scoreエンドポイントのトランザクション見直し">scoreエンドポイントのトランザクション見直し&lt;/h2>
&lt;p>整合性チェック時に3回に1回くらいの頻度でエラーが発生していたので修正に着手しました。
AUTOCOMMITの設定がちゃんと効いていなかった模様。sqlalchemyはデフォルトでautocommitが効いており、scoreの時だけ設定を上書きするようにしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/91045ac410fa11ce0fbf7b6bfabf3b08bfe9a3f1" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>エラー解消が目的だったのでスコアに影響はありませんでした。&lt;/p>
&lt;p>参考&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.sqlalchemy.org/en/14/orm/session_transaction.html#setting-isolation-for-individual-transactions" target="_blank" rel="noopener"
>Transactions and Connection Management — SQLAlchemy 1.4 Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://qiita.com/tosizo/items/7a3e2d5b6f2f34867274" target="_blank" rel="noopener"
>SQLAlchemyのautocommitについて - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="finish-apiでbillingreportを生成する-の修正">Finish APIでBillingReportを生成する の修正&lt;/h2>
&lt;p>整合性チェックは通るのですがベンチマーク全体の中で1~3回ほど &lt;code>GET /api/organizer/billing 請求レポートの数が違います (want: 5, got: 1)のようなエラーが出る。&lt;/code> のようなエラーが出る状態でした。&lt;/p>
&lt;p>終わっていない大会の情報も出してあげる必要があったのですが、それらの情報がDBには存在していないのが原因でした。存在しなければscore等を0を入れてレスポンスデータを生成します。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/9a515f9acb6249dabdc8f1752bbc2f4a56517e5c" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>上記二つを行なってエラーもなくなり、スコアが安定するようになりました。ただし負荷走行中にSQLite3でlockエラーが多発するようになりました。&lt;/p>
&lt;h2 id="tenantdb-player_scoreにindexをはる">tenantDB player_scoreにINDEXをはる&lt;/h2>
&lt;p>初期化時にinitial_dataをtenant_db配下にコピーしているのでinitial_dataのテーブルに対してINDEXを追加します。
テナントごとにdbがあるのでシェルでまとめて適用してあげます（ブログに書いてあったコマンドをそのまま実行しました）&lt;/p>
&lt;p>クエリ：&lt;code>create index idx_score on player_score (tenant_id, competition_id, player_id);&lt;/code>&lt;/p>
&lt;p>&lt;code>for db in *.db; do echo &amp;quot;CREATE INDEX...&amp;quot; | sqlite3 $db; done&lt;/code>&lt;/p>
&lt;p>ちなみにplayer_score以外のテーブルはデータ量が100件程度しかなく、貼っても意味なさそうなのでそのままにしました。
SQLite3の実行計画は クエリの頭に&lt;code>EXPLAIN QUERY PLAN&lt;/code> を付けます。&lt;/p>
&lt;pre tabindex="0">&lt;code># player/&amp;lt;player_id&amp;gt;時
EXPLAIN QUERY PLAN SELECT c.title AS title, p.score AS score
FROM player_score AS p
INNER JOIN competition AS c ON c.id = p.competition_id
WHERE c.tenant_id = ?
AND p.player_id = ?
ORDER BY c.created_at ASC
# 結果
|--SCAN p
|--SEARCH c USING INDEX sqlite_autoindex_competition_1 (id=?)
`--USE TEMP B-TREE FOR ORDER BY
&lt;/code>&lt;/pre>&lt;p>点数は500点ほど上がったのですが、それ以上にDBのlockによるエラーがひどく、41%失点している有様でした。&lt;/p>
&lt;h2 id="lockによるエラーが多発したので一旦timeoutを伸ばす">lockによるエラーが多発したので一旦timeoutを伸ばす&lt;/h2>
&lt;p>タイムアウトを伸ばすしか思い浮かばなかったのでデフォルト値を調べてみることにしました。&lt;/p>
&lt;p>ソースコードを見た感じPythonのSQLite3の標準ライブラリの設定がそのまま反映されているようでそれが5sでした。
30sに設定してみたところlockによる500エラーは大幅に減らせました。ただしclient側でconnection timeoutが発生しているのですがひとまず1件程度まで抑えられたので一旦よしとしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/74691d3703b159842f71a2c409156028e87b142b" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;h2 id="ranking-apiでランキング集計するのをやめる">Ranking APIでランキング集計するのをやめる&lt;/h2>
&lt;blockquote>
&lt;p>ranking APIの呼び出される回数とscoreが入稿される回数は10～20倍くらい差がある
rankingはscoreを入稿したときしか変わらない&lt;/p>
&lt;/blockquote>
&lt;p>言われてみれば確かに。&lt;/p>
&lt;p>大会中にこのボトルネックに気づいていたらまず間違いなくDELETE+bulk insertで対処していたと思うのですが、 &lt;code>ON DUPLICATE KEY UPDATE&lt;/code> を初めて知ったのでこっちで実装してみることにしました。&lt;/p>
&lt;ul>
&lt;li>ON DUPLICATE KEY UPDATE
&lt;ul>
&lt;li>ON DUPLICATE KEY UPDATE を指定した時、UNIQUEインデックスまたは PRIMARY KEY
 に重複した値を発生させる行が挿入された場合、mysqlによって古い行の値が実行される&lt;/li>
&lt;li>存在していればupdate する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>やることとしては以下です。&lt;/p>
&lt;ul>
&lt;li>rankingテーブルを作成する
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> ranking (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span> BIGINT UNSIGNED &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>rank&lt;span style="color:#f92672">`&lt;/span> INT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>score&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_display_name&lt;span style="color:#f92672">`&lt;/span> TEXT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> (&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>rank&lt;span style="color:#f92672">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) ENGINE&lt;span style="color:#f92672">=&lt;/span>InnoDB &lt;span style="color:#66d9ef">DEFAULT&lt;/span> CHARACTER &lt;span style="color:#66d9ef">SET&lt;/span>&lt;span style="color:#f92672">=&lt;/span>utf8mb4;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>row_numは不要だから消したと思われる。competition_idさえ分かればtenant_idはなくても良さそうに思える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>scoreエンドポイントでrankingを生成し、insertする&lt;/li>
&lt;li>初期化対応
&lt;ul>
&lt;li>が必要とのことでしたが、データを入れ直さなくてもベンチマークが通ったのでしませんでした。データが溜まっていってしまうのを防ぐために削除だけ行うように修正しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/2be866a002c2e71dbc2c8b94367c8b3f34b7ed4a" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>ベンチマークを何度か実行していたのですが6500~5600と振り幅が大きい&amp;hellip;。&lt;/p>
&lt;h2 id="playersaddの改善">players/addの改善&lt;/h2>
&lt;p>alpの結果を眺めていたら上記エンドポイントが異常に重たくなっていました。スコアログを見返すとflockをトランザクションにしたあたりからずっとひどい状態でした笑&lt;/p>
&lt;p>スコアが伸び悩んでいたのもあり、気になったので改善してみようとコードを読んだら、こちらもfor文の中で逐一クエリが発行されていました。sqliteの負荷が懸念だったのもあり以下のようにそれぞれまとめて取得してPython側で頑張るように修正しました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/3016f0fe8a3198163c6153168ae0159a892990da" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>alpを見た感じ改修の効果は得られた(25s→2sになった)のですが、点数には影響せず&amp;hellip;。&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>10万はいかなくとも2万くらいはいきたいなと思っていたのですが、今のまま複数台分散してもそこまで上がる見込みがなく、だれてきてしまったのもあり一旦一区切りにしようと思います😓&lt;/p>
&lt;p>全体の改善のログは以下に。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/issues/1" target="_blank" rel="noopener"
>スコア推移のログ · Issue #1 · reiichii/isucon12q-after&lt;/a>&lt;/p>
&lt;p>ISUCON11予選問題解説のやり方を参考に残していました。&lt;/p></description></item><item><title>ISUCON12予選問題解き直し</title><link>https://reiichii.github.io/post/2022-08-27-15/</link><pubDate>Sat, 27 Aug 2022 14:57:37 +0900</pubDate><guid>https://reiichii.github.io/post/2022-08-27-15/</guid><description>&lt;p>8月は&lt;a class="link" href="https://isucon.net/archives/56842718.html" target="_blank" rel="noopener"
>ISUCON12 予選の解説 (Node.jsでSQLiteのまま10万点行く方法) | ISUCON公式Blog&lt;/a>を見ながらISUCON12予選問題の解き直しをしていました。まだ全部施策をやり切れておらず、点数も上がりきってはいないのですが、1ヶ月経ったので途中までまとめることに。&lt;/p>
&lt;p>実施できたもの&lt;/p>
&lt;ul>
&lt;li>adminDB visit_history にINDEXを張る&lt;/li>
&lt;li>dispenseIDでMySQLを使うのをやめる&lt;/li>
&lt;li>Ranking APIのループクエリをなくす&lt;/li>
&lt;li>Score APIの追加のループクエリをなくす&lt;/li>
&lt;li>アトミック書き込みのためのflockをトランザクションに変更する(※怪しい)&lt;/li>
&lt;li>adminDB visit_historyの初期データをコンパクトにする&lt;/li>
&lt;li>db用サーバを投入し、2台構成にする&lt;/li>
&lt;li>Finish APIでBillingReportを生成する(※怪しい)&lt;/li>
&lt;li>Player APIをなんとかする&lt;/li>
&lt;/ul>
&lt;p>まだできていないもの&lt;/p>
&lt;ul>
&lt;li>tenantDB player_scoreにINDEXをはる&lt;/li>
&lt;li>Ranking APIでランキング集計するのをやめる&lt;/li>
&lt;li>AddTenant APIでSQLite DBを作るのをやめる&lt;/li>
&lt;li>nginxで複数台に振り分ける&lt;/li>
&lt;li>nginxをupstream keepaliveする&lt;/li>
&lt;li>MySQLをちょっとチューニングする&lt;/li>
&lt;/ul>
&lt;p>半分以上は実施しているのに未だ点数が6000点代という&amp;hellip;思ったより厳しかった。&lt;/p>
&lt;h2 id="admindb-visit_history-にindexを張る">adminDB visit_history にINDEXを張る&lt;/h2>
&lt;p>去年の問題ならinitialエンドポイントテーブルが作り直しているのでschemaにindexを追加していたのですが、今回は対象テーブルではdrop createは実行されていないのでここに書いても意味なかったという🙂&lt;/p>
&lt;p>covering indexという概念を初めて知りました。indexって貼れていればいいと思っていたのですが、張り方によっても性能(点数)に差が出てしまうんですね。せっかくなので3パターンで実行計画を比較してみました。&lt;/p>
&lt;pre tabindex="0">&lt;code># 既存
EXPLAIN SELECT player_id, MIN(created_at) AS min_created_at FROM visit_history WHERE tenant_id = 1 AND competition_id = &amp;#39;S&amp;#39; GROUP BY player_id;
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx | tenant_id_idx | 8 | const | 1292937 | 10.00 | Using where; Using temporary |
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
# covering index
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx,idx_all_cover | idx_all_cover | 1030 | const,const | 1 | 100.00 | Using index |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
# createdなし
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx,idx_all_cover | idx_all_cover | 1030 | const,const | 1 | 100.00 | NULL |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>indexを追加すると、possible_keys,keyにidx_all_coverが追加され、filteredが100%になる&lt;/li>
&lt;li>covering indexにすると、ExtraにUsing indexが表示される&lt;/li>
&lt;li>createdありとなしではスコアには200点ほど差がでた&lt;/li>
&lt;/ul>
&lt;p>mysqlのconvering indexとは&lt;/p>
&lt;ul>
&lt;li>クエリーによって取得されたすべてのカラムを含む&lt;em>&lt;strong>インデックス&lt;/strong>&lt;/em>&lt;/li>
&lt;li>検索を索引内で完結でき、表からデータを読み取る必要がないため効率が良い&lt;/li>
&lt;li>表のサイズがメモリに保持しきれないほど大きい場合の検索で有効&lt;/li>
&lt;/ul>
&lt;p>+500点ほど&lt;/p>
&lt;h2 id="dispenseidでmysqlを使うのをやめる">dispenseIDでMySQLを使うのをやめる&lt;/h2>
&lt;p>一意なidを生成するために以下のようにわざわざDBにアクセスしているが、これをuuidを生成するようにする&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/3409af51893bbda12ca68dc1ff1d1de914b0bb14" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>SQLの&lt;code>REPLACE INTO&lt;/code>とは&lt;/p>
&lt;ul>
&lt;li>基本INSERTと同じだが、テーブル内の古い行にprivary keyまたはuniqueインデックスに関して新しい行と同じ値が含まれている場合その古い行は新しい行が挿入される前に削除される&lt;/li>
&lt;li>挿入 or 削除と挿入　の違い&lt;/li>
&lt;/ul>
&lt;p>raise fromについて&lt;/p>
&lt;ul>
&lt;li>例外を連鎖することができる
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Python" data-lang="Python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">RuntimeError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to open database&amp;#34;&lt;/span>) &lt;span style="color:#f92672">from&lt;/span> e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>出力は以下：&lt;code>The above exception was the direct cause of the following exception&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Python" data-lang="Python">&lt;span style="display:flex;">&lt;span>Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;~/ghq/github.com/reiichii/isucon12q-after/tmp.py&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ConnectionError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The above exception was the direct cause of the following exception:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;/~/ghq/github.com/reiichii/isucon12q-after/tmp.py&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">RuntimeError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to open database&amp;#34;&lt;/span>) &lt;span style="color:#f92672">from&lt;/span> e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">RuntimeError&lt;/span>: Failed to open database
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>from を使わないと、&lt;code>During handling of the above exception, another exception occurred&lt;/code> のようになる&lt;/li>
&lt;/ul>
&lt;p>+200点ほど&lt;/p>
&lt;h2 id="ranking-apiのループクエリをなくす">Ranking APIのループクエリをなくす&lt;/h2>
&lt;p>リクエストの合計時間が一番長い /api/player/competition/&amp;lt;competition_id&amp;gt;/ranking をなんとかする。&lt;/p>
&lt;p>N+1になっているのでjoinを使う。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/62e3d7bd4bdaca3b14cc682e0bce6605de907014" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>+1000点になりました😳&lt;/p>
&lt;h2 id="score-apiの追加のループクエリをなくす">Score APIの追加のループクエリをなくす&lt;/h2>
&lt;blockquote>
&lt;p>rankingの次にレスポンスタイム合計が大きいのはscoreなので&lt;/p>
&lt;/blockquote>
&lt;p>Node.jsで解いていたブログ記事では上記のように書いてあったが、私の環境(Python)ではscoreよりも/api/player/player/&amp;lt;player_id&amp;gt; の方が重かったです。&lt;/p>
&lt;p>自分では最後のinsertのところをbulk insertにすればいいのかなと思っていたが、存在しないplayer_idを返す必要はないので数を比較するだけで十分という考えには至れませんでした。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/8f787574d5a847a7f1cc33dc7ecdb4e35a1403d8" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>こちらも+1000点ほど&lt;/p>
&lt;h2 id="アトミック書き込みのためのflockをトランザクションに変更する怪しい">アトミック書き込みのためのflockをトランザクションに変更する(※怪しい)&lt;/h2>
&lt;p>既存コードではテナントDB更新の際に、排他制御をするためにファイルをロックすることをしていますが、トランザクションを使うようにします。
delete-insertの部分をトランザクションにしてflockを外す。他のflockは参照のみなので外すだけで良かった。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/69b53bfb6318f46cdc0db67e38c1fb64271693a0" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>この部分を実装したところ、数回に1回整合性チェックが通らなくなりました😢おそらくトランザクションがちゃんと効いていない模様で、なんでか全然分からなかったのですがおそらくAuto Commitが効いてしまっているところに思い至ったのでこれから確認する段階です。&lt;/p>
&lt;p>そしてなぜか点数はそれほど上がらないどころか実行するたびに数百点の振り幅が出るように。&lt;/p>
&lt;h2 id="admindb-visit_historyの初期データをコンパクトにする">adminDB visit_historyの初期データをコンパクトにする&lt;/h2>
&lt;p>アプリケーションの作りがアクセスしたかどうかが分かればいいため、visit_historyのテナントID、大会ID、プレイヤーIDをgroup byしてmin(created_at) / min(updated_at)のデータのみが残るようにして重複したデータを減らす。&lt;/p>
&lt;p>ちなみに対象テーブルのMySQLの初期化の部分は以下のようになっていて、一定のデータが消えないようになっています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">DELETE&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> visit_history &lt;span style="color:#66d9ef">WHERE&lt;/span> created_at &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;1654041600&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>念の為既存データを残しておきたかったので、私は以下の手順で実施しました。&lt;/p>
&lt;ol>
&lt;li>一時テーブルを作成（visit_history_tmpとする）&lt;/li>
&lt;li>INSERT SELECT
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">INSERT&lt;/span> &lt;span style="color:#66d9ef">INTO&lt;/span> visit_history_tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> player_id, tenant_id, competition_id, &lt;span style="color:#66d9ef">MIN&lt;/span>(created_at), &lt;span style="color:#66d9ef">MIN&lt;/span>(updated_at)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> visit_history
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">GROUP&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>古いテーブルをrename
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RENAME&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> visit_history &lt;span style="color:#66d9ef">TO&lt;/span> visit_history_backup;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>一時テーブルをvisit_historyにrename
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RENAME&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> visit_history_tmp &lt;span style="color:#66d9ef">TO&lt;/span> visit_history;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>初期化時点の行数：3,224,839 → 削減後のデータ数：200,474（0.06%にまで削減された）&lt;/p>
&lt;p>ただし私の場合スコアは変わらず&lt;/p>
&lt;h2 id="db用サーバを投入し2台構成にする">DB用サーバを投入し、2台構成にする&lt;/h2>
&lt;p>ブログの方では複数台構成準備のための施策に突入するのですが、私は先にappとdbの二台構成にすることにしました。&lt;/p>
&lt;ul>
&lt;li>mysqlで他サーバからのアクセスを許容する&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE USER `isucon`@`192.168.%` IDENTIFIED BY &amp;#39;isucon&amp;#39;;
GRANT ALL PRIVILEGES ON `isuports`.* TO `isucon`@`192.168.%`;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>application側で参照先dbを変更
&lt;ul>
&lt;li>今回はdocker-composeにホストが書いてあったのでそこの値を変更する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>前のベンチマークの時点でCPUが余っていたので、これやっても点数が大して変わらないのは予想通りでした。&lt;/p>
&lt;h2 id="finish-apiでbillingreportを生成する">Finish APIでBillingReportを生成する&lt;/h2>
&lt;blockquote>
&lt;p>今回の当日マニュアルにあった、「Finish APIを呼び出したあとにAdmin/OrganizerのBilling APIに結果が反映されるまで3秒の猶予があるの意味は、「初期実装だとBilling APIで請求額を計算しているけど、大会ごとにfinishするときに大会の請求額が確定するので、BillingReportをそこで生成してストレージにいれてね!」です。&lt;/p>
&lt;/blockquote>
&lt;p>分からん&amp;hellip;😇&lt;/p>
&lt;p>finish が呼ばれた時にbilling_report_by_competitionを呼び出して、その結果をinsertします。&lt;/p>
&lt;ul>
&lt;li>テーブルを作成
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#f92672">`&lt;/span>billing_report&lt;span style="color:#f92672">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span> BIGINT UNSIGNED &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_title&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_count&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>visitor_count&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_player_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_visitor_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span>(&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) ENGINE&lt;span style="color:#f92672">=&lt;/span>InnoDB &lt;span style="color:#66d9ef">DEFAULT&lt;/span> CHARACTER &lt;span style="color:#66d9ef">SET&lt;/span>&lt;span style="color:#f92672">=&lt;/span>utf8mb4;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>finish apiの時にbilling_report_by_competitionを呼び出して結果をinsertする&lt;/li>
&lt;li>admin/organizationのbillingの参照先をdbからselectして取ってくる&lt;/li>
&lt;li>初期データ生成処理を改修
&lt;ul>
&lt;li>初期データを入れ直したあとに全ての終了済み大会について billingReportByCompetition を実行してINSERTしなおす必要がある&lt;/li>
&lt;li>billing report初期データ生成スクリプトを作成&lt;/li>
&lt;li>&lt;code>mysqldump -uroot -proot isuports billing_report &amp;gt; initial_billing_report.dump&lt;/code>&lt;/li>
&lt;li>initial時に初期データをimportさせる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/64b7251efa85305e548fbfac2c19fed82d2379f9" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>スコアはそれほど変わらず、不安定さが増してしまったように見受けられました。(編集とは関係ないエンドポイントでエラーが発生する)
ただ&lt;code>api/admin/tenants/billing&lt;/code>, &lt;code>api/organizer/billing&lt;/code>の呼び出し回数と合計レスポンスタイムが大幅に改善されているので一旦よしとします。&lt;/p>
&lt;h2 id="player-apiをなんとかする">Player APIをなんとかする&lt;/h2>
&lt;p>上記のメトリクスを眺めているときにPlayer APIがものすごく重たくなっている(MAX 5s程度だったものがMAX 30sになっていた笑)ことに気づき、あまりにも気になったので先に直すことにしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/17801b6a6af423f4ea6bc0670ba91af8c0111660" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>これもN+1を直すだけです。必要な情報に対して多くクエリを発行しているのでスリムに書き直してあげます。&lt;/p>
&lt;p>今まで4000点代で伸び悩んでいたスコアが6000点台まで届きました👏&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>スコアが伸び悩んで、また他のことをやりたくなってきたのもあり、8月いっぱいで一旦やめにしようかなと思いかけていたのですが、月末の週に突入して解決の兆しが見えてきたので、もう少し粘ってみようかと思います。&lt;/p>
&lt;p>複数台構成にしたら10万点まで届くのだろうか&amp;hellip;&lt;/p>
&lt;p>続きも書けたら書きます。&lt;/p></description></item><item><title>ISUCON12予選参加した</title><link>https://reiichii.github.io/post/2022-07-24-14/</link><pubDate>Sun, 24 Jul 2022 14:06:01 +0900</pubDate><guid>https://reiichii.github.io/post/2022-07-24-14/</guid><description>&lt;img src="https://reiichii.github.io/post/2022-07-24-14/score_graph.png" alt="Featured image of post ISUCON12予選参加した" />&lt;p>ISUCON12予選に参加しました。結果は散々だったのですが振り返りも兼ねて残しておこうと思います。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">ISUCON12 オンライン予選、17:00の時点でスコアは凍結されました🚀 残時間 01:00:00のスコアはこちら！ &lt;a href="https://twitter.com/hashtag/isucon?src=hash&amp;amp;ref_src=twsrc%5Etfw">#isucon&lt;/a> &lt;a href="https://t.co/SGjrF9nBCR">pic.twitter.com/SGjrF9nBCR&lt;/a>&lt;/p>&amp;mdash; ISUCON公式 (@isucon_official) &lt;a href="https://twitter.com/isucon_official/status/1550753842446630912?ref_src=twsrc%5Etfw">July 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ステータス">ステータス&lt;/h2>
&lt;ul>
&lt;li>初出場&lt;/li>
&lt;li>Python&lt;/li>
&lt;li>1人チーム&lt;/li>
&lt;li>2502点&lt;/li>
&lt;/ul>
&lt;p>目標は「闇雲に手を動かずに爪痕残す」でした。
爪痕は残せませんでした🪦&lt;/p>
&lt;h2 id="準備">準備&lt;/h2>
&lt;p>やっていたこととしては以下です。&lt;/p>
&lt;ul>
&lt;li>ISUCON11予選過去問解く
&lt;ul>
&lt;li>alpやmysqlのslow query logなどの計測ツールを使えるようになっておくこと&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>6月に行われた事前講習とハンズオンへの参加
&lt;ul>
&lt;li>普段rubyさわらないので多少やりにくかったのですが、出て良かったです。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ISUCON用ansible playbookを用意
&lt;ul>
&lt;li>計測ツールの導入をスムーズに行うため準備していました&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="タイムライン">タイムライン&lt;/h2>
&lt;ul>
&lt;li>09:40~ 配信視聴
&lt;ul>
&lt;li>予選問題の概要を聞く&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>10:00~ 開始
&lt;ul>
&lt;li>ポータルサイト一通り見る（感動した）&lt;/li>
&lt;li>当日レギュレーションを読む&lt;/li>
&lt;li>マニュアルを読む&lt;/li>
&lt;li>読みながらアプリケーションを触ったり、ユースケース図を書いて仕様を把握&lt;/li>
&lt;li>サーバへのssh接続確認&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>11:00~ 準備
&lt;ul>
&lt;li>ソースコードをgit管理下に置く&lt;/li>
&lt;li>初回ベンチマークを実行&lt;/li>
&lt;li>フワッと改善の目星をつける&lt;/li>
&lt;li>サーバ構成をmysql用サーバとapplication用の2台構成に変更する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>12:00~ 準備
&lt;ul>
&lt;li>計測ツールの導入&lt;/li>
&lt;li>nginxの設定ファイルをgit管理下に配置し直す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>13:00~13:30 お昼休憩
&lt;ul>
&lt;li>20分でご飯食べて10分昼寝。もうこの時点で結構疲れていた&lt;/li>
&lt;li>午前中はアプリケーションコードをほとんど見れていない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>13:30~ 準備の延長戦
&lt;ul>
&lt;li>nginxの設定ファイルを間違えており、修正箇所探しに時間を潰す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>14:00~ 改善開始
&lt;ul>
&lt;li>アプリケーションのコードを眺める&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>14:30~16:30 改善案1.スロウクエリを潰す試み&lt;/li>
&lt;li>16:30~17:30 改善案2.リクエスト数の多いエンドポイントの改善&lt;/li>
&lt;li>17:30~ 改善案3.bulkinsertに書き換えてみる&lt;/li>
&lt;li>17:45~ 再起動チェック&lt;/li>
&lt;li>18:00~19:00 競技終了・配信で講評を聞く&lt;/li>
&lt;/ul>
&lt;p>こうして振り返ってみると計測ツールをスムーズに導入できていれば+1hくらいコード読む時間を捻出できていましたね。ansibleを用意していたがちょこちょこ小さいエラーにはまって気がついたら1hほど経ってしまっていました。&lt;/p>
&lt;p>今回の目標が闇雲に手を動かさないだったので、一応自分なりに根拠や狙いを持っていたつもりだったのですが、講評を聞く感じ的が外れていました。&lt;/p>
&lt;h3 id="改善案0サーバの役割分担">改善案0.サーバの役割分担&lt;/h3>
&lt;p>サーバ構成をmysql用サーバとapplication用の2台構成に変更しました。&lt;/p>
&lt;p>初回ベンチ実行時にtopの出力を眺めていたのですが、dbとpythonがcpuを食い潰しあっているように見えたため。先に分けた方が今後変化追いやすいかなと思ったというのもあります。&lt;/p>
&lt;p>分けたことにより+500点ほどスコアが改善しました。goからpythonにしたときに下がった分が元に戻っただけなので実質プラマイ0ですね。&lt;/p>
&lt;h3 id="改善案1料金集計処理のスロウクエリを潰す試み">改善案1.料金集計処理のスロウクエリを潰す試み&lt;/h3>
&lt;ul>
&lt;li>adminとorg系リクエストの配点が高いこと&lt;/li>
&lt;li>adminの一覧画面とorgの請求情報一覧画面が異様に重かったこと&lt;/li>
&lt;li>スロウクエリログで一番重かったクエリが、上記二つのリクエスト時に実行されるクエリだったこと&lt;/li>
&lt;/ul>
&lt;p>から、この処理を改善すればパフォーマンスが大きく改善するのではと着手することにしました。&lt;/p>
&lt;p>それ自体は良かったのですが、 処理が参照しているデータ源がmysqlとsqliteに分かれていることからどうしたら良いものかと手が動かず。sqliteをmysqlに載せ替えるといった選択肢は効果が見込めるかどうか分からなかったので実施に踏み切れませんでした。&lt;/p>
&lt;p>mysql側の改善をしようと検索件数を必要な分だけに絞ったりしていたのですが、ベンチマーカーによる整合性チェックでエラーが出てしまいました。この処理の改善に2hほどかけてしまっていたので中断することにしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify/commit/855a3be79efea20a55c1bd6f6a04bb1f3d050d19" target="_blank" rel="noopener"
>ログ&lt;/a>&lt;/p>
&lt;h3 id="改善案2-playerのリーダーボード一覧エンドポイントを改善する試み">改善案2. playerのリーダーボード一覧エンドポイントを改善する試み&lt;/h3>
&lt;ul>
&lt;li>alpでリクエストを集計したところ合計レスポンスタイムが一番多かったのはplayerのリーダーボード一覧エンドポイントだったこと&lt;/li>
&lt;li>ベンチマーカーの出力に「leaderboardの表示に1秒以上かかったため2人の参加者が離脱しました。」のように出ていたこと&lt;/li>
&lt;/ul>
&lt;p>player系エンドポイントは、先ほどのadminやorg系エンドポイントと異なり加算は少ないのですが、上記の理由からここを改善すれば少なくともスコアがそれなりに改善される見込みがありました。&lt;/p>
&lt;p>ただ参照先がsqliteのデータで、パフォーマンス改善ってどうやるんだと首を捻る羽目に。調べてみたらsqliteにもインデックスの概念があり、DB初期化スクリプトのcreate table sql見たところインデックスは貼られていなかったので試しに貼って見たのですが、ほとんどスコアに影響はありませんでした。&lt;/p>
&lt;p>まだ改善の余地はあったのかもですが、この時点で残り1hを切ってしまっていたため一旦深追いをやめてしまいました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify/commit/82167412532d0dd2e789c27afb5ed6187d427c3b" target="_blank" rel="noopener"
>ログ&lt;/a>&lt;/p>
&lt;h3 id="改善案3-forでinsertしている箇所をbulkinsertさせる">改善案3. forでinsertしている箇所をbulkinsertさせる&lt;/h3>
&lt;p>残り時間が微妙だったので、ソースコード眺めているときに気になっており、すぐに改善できそうな箇所として &lt;code>/api/organizer/players/add&lt;/code> のinsert処理を書き換えようと思いました。実施して見たもののベンチマーカーがこけました。単純に書き換えるだけだと後続処理が意図した形に動かなかくなってしまうことに後から気づきました。&lt;/p>
&lt;p>そもそもアプローチ方法が間違えていたのか、後続処理も合わせてなんとかする余地があったのか、残りが15分と検討する時間がもうなかったので中断しました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify/commit/e9bc7671bb06d673cb8a4061841e457da5d236ac" target="_blank" rel="noopener"
>ログ&lt;/a>&lt;/p>
&lt;h2 id="問題の所感">問題の所感&lt;/h2>
&lt;ul>
&lt;li>「mysqlで準備していたからpostgresqlとかだったらきついな..まあスポンサーにmysqlがいるからないか」とか思っていたらまさかのmysql+sqliteでびっくり&lt;/li>
&lt;li>auto_incrementのところも何か変なコードがあるなぁとは思っていたのですが、料金表とリーダーボード表示の箇所にばかり気を取られていたので全然見れませんでした&lt;/li>
&lt;li>講評で「インデックスを貼ればdbの負荷がひとまずは下がる」ようなことが言われていて、もう少しDB周りを重点的に確認すれば良かったです。見ていた箇所のクエリのインデックスは確認していたつもりだったのですがそうではなく、出てきたスロークエリに対してインデックスが効いているかを見ておくべきでした&lt;/li>
&lt;li>lockがやたら多いのも気にはなっていたのですが、トランザクションを使う箇所というのが出てきませんでした。ただの知見不足です&lt;/li>
&lt;li>ユースケース図を書いていたのですが、アプリの全体像を網羅的に把握するのに役立ちました。アプリケーションとdbのやりとり周りも何かしらの方法でスムーズに把握できるようになれると良かったのですが&lt;/li>
&lt;/ul>
&lt;h2 id="その他感想">その他感想&lt;/h2>
&lt;ul>
&lt;li>ISUCON11予選問題を解いていた時はアプリケーションの使用の仕様が難しく、何やっていいか全く分からない状態でした。それに比べたら今回の問題はまだその辺りの把握はしやすかったです&lt;/li>
&lt;li>ポータルサイトがどんなものかずっと見てみたかったので感動しました。終わった後速攻で選手用ページが見れなくなってしまい、ベンチマークのログやダッシュボードのスクショを取り損ねてしまいました&lt;/li>
&lt;li>終わった後眼精疲労でくたくたで、速攻でpc閉じてしまったのですが、DCの方では感想戦で盛り上がっていて他の参加者のバイタリティの高さを感じました。翌朝読み返していて面白く、復習時の参考にまた読み返そうと思います&lt;/li>
&lt;li>集中力は8h意外と持ちました。1h~1h30minにつき5minの休憩を無理やり設けるようにして良かったです&lt;/li>
&lt;/ul>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>無念 : 楽しかった！ が 6:4の気持ちです。&lt;/p>
&lt;p>あと目と手と頭が足りないです。本戦一人出場している人の凄さを実感します。私がアプリケーション側でもう少しまともに戦えるようになったら、次回は誰か誘ってみるのもありかもなと思えてしまいました。&lt;/p>
&lt;p>今年もPythonでの本戦出場選手は出なかったのでPythonで狙いたいなと思う反面、業務で触らないgoの勉強の口実にしたいという気持ちのが強いので、来年はgoで10000点以上出すことを目標に出てみたいと思います。ベンチマーカーがgoで書かれていて、その辺りの処理ももう少し読めるようになりたいんですよね。&lt;/p>
&lt;p>運営の皆様、開催ありがとうございました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify" target="_blank" rel="noopener"
>https://github.com/reiichii/isucon12-qualify&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify/issues/1" target="_blank" rel="noopener"
>計測ログ&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://reiichii.github.io/post/2022-07-24-14/score_graph.png"
width="2336"
height="1122"
srcset="https://reiichii.github.io/post/2022-07-24-14/score_graph_hu1c45c6ba752b88bcb48fca24fcaa2fcb_322845_480x0_resize_box_3.png 480w, https://reiichii.github.io/post/2022-07-24-14/score_graph_hu1c45c6ba752b88bcb48fca24fcaa2fcb_322845_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="上げられなかった"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="499px"
>&lt;/p>
&lt;p>&lt;img src="https://reiichii.github.io/post/2022-07-24-14/usecase.jpg"
width="4032"
height="3024"
srcset="https://reiichii.github.io/post/2022-07-24-14/usecase_hu8aac09e64bc6d0d3413f56a86150a826_1612266_480x0_resize_q75_box.jpg 480w, https://reiichii.github.io/post/2022-07-24-14/usecase_hu8aac09e64bc6d0d3413f56a86150a826_1612266_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="こんなアプリケーションでした(?)"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p></description></item><item><title>ISUCON11-qualifyのログインページが開かなかった</title><link>https://reiichii.github.io/post/2022-07-13-22/</link><pubDate>Wed, 13 Jul 2022 22:21:31 +0900</pubDate><guid>https://reiichii.github.io/post/2022-07-13-22/</guid><description>&lt;p>ISUCON11予選環境構築時、構築したアプリケーションでログインしようとすると「このサイトにアクセスできません」が表示されます。また遷移先urlが「&lt;code>http://localhost:5000/?callback=https://isucondition.t.isucon.dev&lt;/code>」のようにおかしな表示になります。&lt;/p>
&lt;p>前提として以下の手順を参考に、クラウド環境にアプリケーションを構築し、トップページが開けるところまでを確認済みです。&lt;/p>
&lt;p>&lt;a class="link" href="https://knowledge.sakura.ad.jp/31520/" target="_blank" rel="noopener"
>ISUCON過去問題の環境を「さくらのクラウド」で構築する | さくらのナレッジ&lt;/a>&lt;/p>
&lt;h2 id="やること1-jia-api-mockを起動する">やること1. JIA API Mockを起動する&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/blob/main/docs/isucondition.md#jia-api-mock-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6" target="_blank" rel="noopener"
>アプリケーションマニュアル&lt;/a>の末尾に書いてあるのですが、サーバの5000portで一部のリクエストを待ち受けるようになっているみたいです。&lt;/p>
&lt;p>実際urlからも分かる通り、apiのログイン時に5000portに飛ばすようになっています。該当コードは以下です。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/blob/main/webapp/frontend/src/components/Home/Auth.tsx#L6" target="_blank" rel="noopener"
>https://github.com/isucon/isucon11-qualify/blob/main/webapp/frontend/src/components/Home/Auth.tsx#L6&lt;/a>&lt;/p>
&lt;p>自動起動はしないため、マニュアルに書いてある手順でモックのサービスを起動してあげます。&lt;/p>
&lt;h2 id="やること2-ポートフォワーディングの設定">やること2. ポートフォワーディングの設定&lt;/h2>
&lt;p>このままだとアプリケーションした際にローカル環境の「localhost:5000」にアクセスされてしまいます。&lt;/p>
&lt;p>ローカル環境の5000にアクセスされたら、リモートサーバの5000にアクセスされるようにポートフォワーディングの設定をしておきます。&lt;/p>
&lt;p>&lt;code>ssh -A -L 5000:{ip}:5000 {user}@{ip}&lt;/code>&lt;/p>
&lt;p>ssh接続した状態で「JIAのアカウントでログイン」を押すと、「Sign in with JIA」の画面が開き、ユーザー名とパスワードを入力してログイン後の画面にすすめるようになります👏&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>分かる人には分かるのかもしれませんが、これは構築手順書に説明があった方が親切なような気がしました。&lt;/p>
&lt;p>ちなみにこの辺の仕様について話されているissueも発見しました。完全に理解はしていません..。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/issues/1260" target="_blank" rel="noopener"
>https://github.com/isucon/isucon11-qualify/issues/1260&lt;/a>&lt;/p></description></item><item><title>ISUCON12事前講習</title><link>https://reiichii.github.io/post/2022-06-07-20/</link><pubDate>Tue, 07 Jun 2022 20:56:13 +0900</pubDate><guid>https://reiichii.github.io/post/2022-06-07-20/</guid><description>&lt;p>ISUCONハンズオン目的で申し込んだのですが、去年一昨年の事前講習レポートには書いていない内容が盛り込まれていて普通に楽しかったです。&lt;/p>
&lt;p>&lt;a class="link" href="https://speakerdeck.com/rosylilly/isucon12-shi-qian-jiang-xi" target="_blank" rel="noopener"
>ISUCON12 事前講習 - Speaker Deck&lt;/a>&lt;/p>
&lt;p>ほぼ資料に書いてあるのですが、記念に手元のメモも残します。&lt;/p>
&lt;pre tabindex="0">&lt;code>## 強いチームがしていること
* なんとなくで手を動かさない。
- 優勝者インタビューで「何が効いたのかわからない」というチームはいない
* デプロイのリードタイムをに1分以上かけない
- GUIでgit操作しがちなご時世だけど、gitコマンドを使った方がいいよ
* 使い慣れたミドルウェアのconfigを1から書かない
- 事前に用意しておく
* やったことがないことをやらない
- 大会中に実務で触っていないgoに移植しようとしてボロ負けした経験がある
&lt;/code>&lt;/pre>&lt;p>なんとなく手を動かすな、仮説をベースに動くことはISUCON以外の仕事でも言える。&lt;/p>
&lt;pre tabindex="0">&lt;code>## タイムライン
10:00
* マニュアルとレギュレーションを読む
* ブラウザでサービスを見て、アプリケーションを把握する
* 各コンポートネントがどう起動されているか、設定やconfigの場所を確認
- init.dかsystemcnfかdockerかなど
* 自分が必要なruntimeをさっとインストールできるようにしておく
* dbスキーマがどう定義されているか調べる
* デプロイ方法を構築する
* 使われているミドルウェアの種類とバージョンを調べる
- 過去にmemcacheかと思ったらmemcacheのplaginを入れたmysqlでそれがすごく重い、という罠があったらしい
* 使っているサーバのスペックを各台調査する
- サーバによってスペックが異なるケースがある
* ベンチマークを実行する
11:00
* 得点源が何かを確認する
* 減点の要因を把握する
* プロファイリングツールを入れる
* 初期状態の完全なバックアップを作成する
- tarで固めておく
12:00
* ちゃんとご飯を食べる
* わからないことが出たらリストにしておく
* やること、やらないことを明確にする
13:00
* デプロイが1コマンドでできるように
* デプロイ→性能計測→プロファイルまで一気通貫で行える仕組みを用意しておく
- line_profile
- リクエスト単位　どちらも
14:00~17:00
* 1コミット1ベンチマーク
* 気にする指標を明確に把握してプロファイルする
17:00
* 再起動試験をする
* apmを入れていたら停止する
- newrelicのapm止めるの意外と難しかったりする
* デバックログの出力を止める
* プロファイル用に差し込んだものを止める
18:00
* 作業ログをブログに書く準備をする
* 記憶が明確な間に振り返りをする
&lt;/code>&lt;/pre>&lt;p>優勝経験チームの行動をトレスしたタイムラインは、考え方など参考にできるところが多い貴重な資料です。&lt;/p>
&lt;p>前にISUCON11予選過去問に挑戦した時、私の場合マニュアルとレギュレーションを読むだけで1時間はかかったので10:00代きっっっつて思いながら聞いていました🙂&lt;/p>
&lt;pre tabindex="0">&lt;code>### おすすめの練習
* デプロイ方法セットアップ
- リポジトリ作って、git initして、チェックインして、deploy
* ansibleを最速で回せるようになっておく
* ベンチマークから集計を1コマンドでできるようにする
- 集計スクリプトを作っておく
* サーバの役割変更
- 起動を止める(systemctlならdisableし忘れない)、接続先を変更する
* 使いたいツールのインストール
- 使いたいツールは一発で入れられるようにする(alp,pt-query-digest)
- prebuilt binaryが用意できるなら用意するのも手
&lt;/code>&lt;/pre>&lt;p>もし今年出れるなら、最低限これだけは準備していきたい。&lt;/p>
&lt;p>また最後に同じ問題5回くらい解くと、新しい発見があって楽しいよといったこともあって、また過去問解き直そうと思いました。&lt;/p>
&lt;p>ちなみにまだ参加申し込みできていませんorz&lt;/p></description></item><item><title>キーマップ変更する時の手順</title><link>https://reiichii.github.io/post/2022-06-05-16/</link><pubDate>Sun, 05 Jun 2022 16:19:27 +0900</pubDate><guid>https://reiichii.github.io/post/2022-06-05-16/</guid><description>&lt;img src="https://reiichii.github.io/post/2022-06-05-16/img_keymap.png" alt="Featured image of post キーマップ変更する時の手順" />&lt;p>&lt;img src="https://reiichii.github.io/post/2022-06-05-16/img_keymap.png"
width="720"
height="720"
srcset="https://reiichii.github.io/post/2022-06-05-16/img_keymap_hu50b55d9f2e639c377323533322f7b495_75174_480x0_resize_box_3.png 480w, https://reiichii.github.io/post/2022-06-05-16/img_keymap_hu50b55d9f2e639c377323533322f7b495_75174_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="新しいキーマップ。大体端のものを真ん中に寄せているだけ"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>1年ほど前にこしらえた自作キーボードでpc作業を行なっています。&lt;/p>
&lt;p>久しぶりにキーマップを変えようと思ったらびっくりするくらいやり方を忘れており、思い出すのに結構時間が掛かったため未来の自分用に忘備録としてやり方を残しておきます。&lt;/p>
&lt;p>&lt;a class="link" href="https://reiichii.hateblo.jp/entry/2021/05/04/210513" target="_blank" rel="noopener"
>【自作キーボード】Sparrow62を組み立てた&lt;/a>&lt;/p>
&lt;h2 id="やること">やること&lt;/h2>
&lt;ul>
&lt;li>キーマップの設計&lt;/li>
&lt;li>キーボードのfirmwareに書き込む&lt;/li>
&lt;/ul>
&lt;h3 id="キーマップの設計">キーマップの設計&lt;/h3>
&lt;p>キーマップの設計は、&lt;a class="link" href="https://config.qmk.fm/#/sparrow62/LAYOUT" target="_blank" rel="noopener"
>QMK Configurator&lt;/a>というWebアプリからGUIで行います。&lt;/p>
&lt;ol>
&lt;li>前の設定を読み込ませる
&lt;ul>
&lt;li>KEYBOARDを自分が使っているものに選択する&lt;/li>
&lt;li>urlからjsonをアップロードするボタンを押下し、keymap.json（以前の設定時にexportしておいたもの）のrowファイルのurlを読み込ませる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>画面ぽちぽちでキーマップの配置を変更する&lt;/li>
&lt;li>右上のCOMPILEボタンを押下する&lt;/li>
&lt;li>右下のFIRMWAREボタンを押下し、hexファイルをダウンロードする&lt;/li>
&lt;/ol>
&lt;p>後の作業のために、この画面はまだ閉じないでおく。&lt;/p>
&lt;p>参考：&lt;a class="link" href="https://salicylic-acid3.hatenablog.com/entry/qmk-configurator" target="_blank" rel="noopener"
>（初心者編）QMK Configuratorを使ってキーマップを書き換えよう - 自作キーボード温泉街の歩き方&lt;/a>&lt;/p>
&lt;h3 id="キーボードのfirmwareに書き込む">キーボードのfirmwareに書き込む&lt;/h3>
&lt;p>ローカルPCにインストール済みのQMK Toolboxに先ほどのhexファイルを読み込ませ、キーボードのfirmwareに書き込みます。キーボードは左右繋げたままにして、左右それぞれに書き込みをします。&lt;/p>
&lt;ol>
&lt;li>QMK Toolboxを開く&lt;/li>
&lt;li>先ほどダウンロードしたhexファイルを読み込ませる&lt;/li>
&lt;li>autoreloadにチェックをする&lt;/li>
&lt;li>キーボードのリセットボタンを1度押下する
&lt;ul>
&lt;li>書き込みが始まり、「done. thank you. disconnect」の文言が出たら無事成功&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>反対のキーボードにケーブルを差し、3と4を行う&lt;/li>
&lt;/ol>
&lt;p>QMK ConfiguratorのTEST KEYBOARDでキーボードのボタンに意図した変更が反映されていることを確認する。&lt;/p>
&lt;p>参考：&lt;a class="link" href="https://salicylic-acid3.hatenablog.com/entry/qmk-toolbox" target="_blank" rel="noopener"
>（初心者編）自作キーボードにファームウェアを書き込む - 自作キーボード温泉街の歩き方&lt;/a>&lt;/p>
&lt;h3 id="後片付け">後片付け&lt;/h3>
&lt;ul>
&lt;li>QMK Configuratorでjsonファイルをexportしておく（次回また読み込ませるため）&lt;/li>
&lt;li>PRINT KEYMAPで画像をスクショしておく（稀にボタンの配置がどうなっていたのか見返したくなるため）&lt;/li>
&lt;li>上記をkeymapリポジトリに反映させておく&lt;/li>
&lt;/ul>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>初回は設定で精一杯で運用(?)のことを全然考えていなかったので、「あれjsonファイル出力してたっけ」「キーマップの画像をスクショしておいたはずなんだけどどこやったっけ」なんてわたわたしていました。githubに上げておけば家からでも会社からでもキーマップ確認できるし、これできっと一安心😌&lt;/p></description></item><item><title>ブログ引っ越した</title><link>https://reiichii.github.io/post/2022-05-27-16/</link><pubDate>Fri, 27 May 2022 17:01:55 +0900</pubDate><guid>https://reiichii.github.io/post/2022-05-27-16/</guid><description>&lt;img src="https://reiichii.github.io/post/2022-05-27-16/IMG_8179.jpg" alt="Featured image of post ブログ引っ越した" />&lt;p>はてなからHugoで立てたブログに引っ越しました。&lt;/p>
&lt;p>大きな理由としては、以前のブログの見た目が気に入らなかった（カスタマイズのコストが高い）ことと、vscodeとmarkdownでブログ書きたかったというのが主です。&lt;/p>
&lt;p>デプロイ先はNetlifyを使おうか悩んだのですが、ブログの目的がアウトプットの習慣付けが主で、アクセス数稼ぎに力を入れていないことと、普段業務でGitLabを使うことが多かったので、GitHub PagesやCICDをちょっと触ってみたいなというのもあり、ミニマムにGitHub Pagesで始めてみることにしました。後から乗り換えることもできなくはないですし。その場合ドメイン変わってしまいますが個人ブログでリスクもないので気の向くままにやっていく方針で😌&lt;/p>
&lt;p>既存のブログと記事は特にexportせずそのまま残しておく予定です。（もしかしたら戻る可能性もなくはないので）&lt;/p>
&lt;p>これからもマイペースに続けていきたいと思います。&lt;/p>
&lt;p>&lt;a class="link" href="https://reiichii.hateblo.jp/" target="_blank" rel="noopener"
>以前のブログ&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://reiichii.github.io/post/2022-05-27-16/IMG_8179.jpg"
width="2448"
height="1471"
srcset="https://reiichii.github.io/post/2022-05-27-16/IMG_8179_hu05940ea99d8537e6bd20faf24b516d8b_1077440_480x0_resize_q75_box.jpg 480w, https://reiichii.github.io/post/2022-05-27-16/IMG_8179_hu05940ea99d8537e6bd20faf24b516d8b_1077440_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="こないだ食べたコース料理のデザートの羊モナカ可愛かった"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p></description></item></channel></rss>