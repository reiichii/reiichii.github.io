<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>日々のあれこれφ(．．)</title><link>https://reiichii.github.io/</link><description>Recent content on 日々のあれこれφ(．．)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Sep 2022 22:20:50 +0900</lastBuildDate><atom:link href="https://reiichii.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>プロジェクター付きホテルと温泉で優勝してきた</title><link>https://reiichii.github.io/post/2022-09-06-22/</link><pubDate>Tue, 06 Sep 2022 22:20:50 +0900</pubDate><guid>https://reiichii.github.io/post/2022-09-06-22/</guid><description>&lt;img src="https://reiichii.github.io/post/2022-09-06-22/IMG_8438.jpg" alt="Featured image of post プロジェクター付きホテルと温泉で優勝してきた" />&lt;p>買ってまだ見ていないライブDVDをホテルに篭って鑑賞したいなー🥺🥺🥺そしてできれば大浴場と美味しい朝食も付いていて欲しいなー🥺🥺というところから始まり、有給取って行ってきました。&lt;/p>
&lt;p>ただ残念ながら部屋にプロジェクターが付いていて、且つ持ち込みのDVDを再生できて、且つ大浴場が付いて、且つ一人二人用の部屋というのは探した限りでは見つからず、大浴場を諦めることにしました。&lt;/p>
&lt;p>ただ偶然にもホテルから徒歩圏内で行けるところに銭湯があり、大浴場ではないもののサウナがあって温泉が沸いているとのことで結果的にほとんど叶いました。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">ホテルに籠ってライブDVDを観る会✌️部屋スタイリッシュで超綺麗だった。狭いけど正方形なので全然圧迫感なく、住める。リクライニングベッドとスクリーンの上下を備え付けのiPodで操作できたり。これなら冷房と照明もできるようにして欲しかった笑 &lt;a href="https://t.co/fZ073wTy2D">pic.twitter.com/fZ073wTy2D&lt;/a>&lt;/p>&amp;mdash; 🥚🥚🥚 (@reiichii01) &lt;a href="https://twitter.com/reiichii01/status/1566999622291431426?ref_src=twsrc%5Etfw">September 6, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>行ったホテルはこちら。&lt;/p>
&lt;p>ちょっとした問い合わせは全部公式サイトのチャットで済むのも便利で良かった。また行きたい。&lt;/p>
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.slashhotels.com%2F" title="【公式】slash川崎 (スラッシュ川崎)｜デジタルテクノロジーを活用したライフスタイルホテル" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 680px; margin: 10px 0px;" loading="lazy">&lt;/iframe>
&lt;p>銭湯は歩いて5分ほどのところにある政之湯というところ。&lt;/p>
&lt;p>建物は古くシャワーヘッドは動かず浴槽は小さいのですが、清潔感があって天井高くて居心地は良かったです。何よりサウナが付いていて(後から作られたのか綺麗だった)、川崎天然温泉なる黒い湯が沸いていました。&lt;/p>
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fk-o-i.jp%2Fkoten%2Fmasanoyu-kawa%2F" title="政の湯 | 【公式】神奈川の銭湯情報" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 680px; margin: 10px 0px;" loading="lazy">&lt;/iframe>
&lt;ul>
&lt;li>15:00 チェックイン&lt;/li>
&lt;li>買い出し&lt;/li>
&lt;li>ライブDVD1本目鑑賞&lt;/li>
&lt;li>銭湯行く&lt;/li>
&lt;li>散歩がてらドミノピザ(徒歩10分)まで歩いて夕飯調達&lt;/li>
&lt;li>ライブDVD2本目鑑賞&lt;/li>
&lt;li>寝る&lt;/li>
&lt;li>起きる&lt;/li>
&lt;li>ホテルのカフェで朝食&lt;/li>
&lt;li>読書&lt;/li>
&lt;li>11:00 チェックアウト&lt;/li>
&lt;/ul>
&lt;p>な具合で巣篭もり満喫できて満足でした☺️&lt;/p>
&lt;p>&lt;img src="https://reiichii.github.io/post/2022-09-06-22/IMG_8438.jpg"
width="2736"
height="2077"
srcset="https://reiichii.github.io/post/2022-09-06-22/IMG_8438_hu4858278573ce4ed581962d459c2ca03b_1191585_480x0_resize_q75_box.jpg 480w, https://reiichii.github.io/post/2022-09-06-22/IMG_8438_hu4858278573ce4ed581962d459c2ca03b_1191585_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>プロジェクターやDVD再生機器が必要なければ、スクリーンと大浴場(しかも温泉)と朝食付いたこちらのホテルに行きたかった。&lt;/p>
&lt;p>また別の機会に。&lt;/p>
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.superhotel.co.jp%2Fs_hotels%2Fginza%2F" title="【公式最安】スーパーホテルPremier銀座 - 東京都中央区銀座のビジネスホテル" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 680px; margin: 10px 0px;" loading="lazy">&lt;/iframe></description></item><item><title>ISUCON12予選問題解き直し2</title><link>https://reiichii.github.io/post/2022-09-04-22/</link><pubDate>Sun, 04 Sep 2022 22:28:00 +0900</pubDate><guid>https://reiichii.github.io/post/2022-09-04-22/</guid><description>&lt;p>&lt;a class="link" href="http://localhost:1313/post/2022-08-27-15/" target="_blank" rel="noopener"
>前回の記事&lt;/a>の続きです。&lt;/p>
&lt;p>&lt;a class="link" href="https://isucon.net/archives/56842718.html" target="_blank" rel="noopener"
>ISUCON12 予選の解説 (Node.jsでSQLiteのまま10万点行く方法) : ISUCON公式Blog&lt;/a>を参考にPythonで解き直していました。アプリケーションサーバを分ける手前まで改善したのですがmax6500点までしかいかず、分けても10万点どころか予選突破相当の24000点に届くかさえ怪しかったので頓挫しました。&lt;/p>
&lt;p>追加で実施できたもの&lt;/p>
&lt;ul>
&lt;li>tenantDB player_scoreにINDEXをはる&lt;/li>
&lt;li>Ranking APIでランキング集計するのをやめる&lt;/li>
&lt;/ul>
&lt;p>自分で追加で行ったこと&lt;/p>
&lt;ul>
&lt;li>scoreエンドポイントのトランザクション見直し&lt;/li>
&lt;li>Finish APIでBillingReportを生成する の修正&lt;/li>
&lt;li>lockによるエラーが多発したので一旦timeoutを伸ばす&lt;/li>
&lt;li>players/addの改善&lt;/li>
&lt;/ul>
&lt;p>実施しなかったもの&lt;/p>
&lt;ul>
&lt;li>AddTenant APIでSQLite DBを作るのをやめる&lt;/li>
&lt;li>nginxで複数台に振り分ける&lt;/li>
&lt;li>nginxをupstream keepaliveする&lt;/li>
&lt;li>MySQLをちょっとチューニングする&lt;/li>
&lt;/ul>
&lt;h2 id="scoreエンドポイントのトランザクション見直し">scoreエンドポイントのトランザクション見直し&lt;/h2>
&lt;p>整合性チェック時に3回に1回くらいの頻度でエラーが発生していたので修正に着手しました。
AUTOCOMMITの設定がちゃんと効いていなかった模様。sqlalchemyはデフォルトでautocommitが効いており、scoreの時だけ設定を上書きするようにしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/91045ac410fa11ce0fbf7b6bfabf3b08bfe9a3f1" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>エラー解消が目的だったのでスコアに影響はありませんでした。&lt;/p>
&lt;p>参考&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.sqlalchemy.org/en/14/orm/session_transaction.html#setting-isolation-for-individual-transactions" target="_blank" rel="noopener"
>Transactions and Connection Management — SQLAlchemy 1.4 Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://qiita.com/tosizo/items/7a3e2d5b6f2f34867274" target="_blank" rel="noopener"
>SQLAlchemyのautocommitについて - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="finish-apiでbillingreportを生成する-の修正">Finish APIでBillingReportを生成する の修正&lt;/h2>
&lt;p>整合性チェックは通るのですがベンチマーク全体の中で1~3回ほど &lt;code>GET /api/organizer/billing 請求レポートの数が違います (want: 5, got: 1)のようなエラーが出る。&lt;/code> のようなエラーが出る状態でした。&lt;/p>
&lt;p>終わっていない大会の情報も出してあげる必要があったのですが、それらの情報がDBには存在していないのが原因でした。存在しなければscore等を0を入れてレスポンスデータを生成します。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/9a515f9acb6249dabdc8f1752bbc2f4a56517e5c" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>上記二つを行なってエラーもなくなり、スコアが安定するようになりました。ただし負荷走行中にSQLite3でlockエラーが多発するようになりました。&lt;/p>
&lt;h2 id="tenantdb-player_scoreにindexをはる">tenantDB player_scoreにINDEXをはる&lt;/h2>
&lt;p>初期化時にinitial_dataをtenant_db配下にコピーしているのでinitial_dataのテーブルに対してINDEXを追加します。
テナントごとにdbがあるのでシェルでまとめて適用してあげます（ブログに書いてあったコマンドをそのまま実行しました）&lt;/p>
&lt;p>クエリ：&lt;code>create index idx_score on player_score (tenant_id, competition_id, player_id);&lt;/code>&lt;/p>
&lt;p>&lt;code>for db in *.db; do echo &amp;quot;CREATE INDEX...&amp;quot; | sqlite3 $db; done&lt;/code>&lt;/p>
&lt;p>ちなみにplayer_score以外のテーブルはデータ量が100件程度しかなく、貼っても意味なさそうなのでそのままにしました。
SQLite3の実行計画は クエリの頭に&lt;code>EXPLAIN QUERY PLAN&lt;/code> を付けます。&lt;/p>
&lt;pre tabindex="0">&lt;code># player/&amp;lt;player_id&amp;gt;時
EXPLAIN QUERY PLAN SELECT c.title AS title, p.score AS score
FROM player_score AS p
INNER JOIN competition AS c ON c.id = p.competition_id
WHERE c.tenant_id = ?
AND p.player_id = ?
ORDER BY c.created_at ASC
# 結果
|--SCAN p
|--SEARCH c USING INDEX sqlite_autoindex_competition_1 (id=?)
`--USE TEMP B-TREE FOR ORDER BY
&lt;/code>&lt;/pre>&lt;p>点数は500点ほど上がったのですが、それ以上にDBのlockによるエラーがひどく、41%失点している有様でした。&lt;/p>
&lt;h2 id="lockによるエラーが多発したので一旦timeoutを伸ばす">lockによるエラーが多発したので一旦timeoutを伸ばす&lt;/h2>
&lt;p>タイムアウトを伸ばすしか思い浮かばなかったのでデフォルト値を調べてみることにしました。&lt;/p>
&lt;p>ソースコードを見た感じPythonのSQLite3の標準ライブラリの設定がそのまま反映されているようでそれが5sでした。
30sに設定してみたところlockによる500エラーは大幅に減らせました。ただしclient側でconnection timeoutが発生しているのですがひとまず1件程度まで抑えられたので一旦よしとしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/74691d3703b159842f71a2c409156028e87b142b" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;h2 id="ranking-apiでランキング集計するのをやめる">Ranking APIでランキング集計するのをやめる&lt;/h2>
&lt;blockquote>
&lt;p>ranking APIの呼び出される回数とscoreが入稿される回数は10～20倍くらい差がある
rankingはscoreを入稿したときしか変わらない&lt;/p>
&lt;/blockquote>
&lt;p>言われてみれば確かに。&lt;/p>
&lt;p>大会中にこのボトルネックに気づいていたらまず間違いなくDELETE+bulk insertで対処していたと思うのですが、 &lt;code>ON DUPLICATE KEY UPDATE&lt;/code> を初めて知ったのでこっちで実装してみることにしました。&lt;/p>
&lt;ul>
&lt;li>ON DUPLICATE KEY UPDATE
&lt;ul>
&lt;li>ON DUPLICATE KEY UPDATE を指定した時、UNIQUEインデックスまたは PRIMARY KEY
 に重複した値を発生させる行が挿入された場合、mysqlによって古い行の値が実行される&lt;/li>
&lt;li>存在していればupdate する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>やることとしては以下です。&lt;/p>
&lt;ul>
&lt;li>rankingテーブルを作成する
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> ranking (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span> BIGINT UNSIGNED &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>rank&lt;span style="color:#f92672">`&lt;/span> INT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>score&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_display_name&lt;span style="color:#f92672">`&lt;/span> TEXT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> (&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>rank&lt;span style="color:#f92672">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) ENGINE&lt;span style="color:#f92672">=&lt;/span>InnoDB &lt;span style="color:#66d9ef">DEFAULT&lt;/span> CHARACTER &lt;span style="color:#66d9ef">SET&lt;/span>&lt;span style="color:#f92672">=&lt;/span>utf8mb4;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>row_numは不要だから消したと思われる。competition_idさえ分かればtenant_idはなくても良さそうに思える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>scoreエンドポイントでrankingを生成し、insertする&lt;/li>
&lt;li>初期化対応
&lt;ul>
&lt;li>が必要とのことでしたが、データを入れ直さなくてもベンチマークが通ったのでしませんでした。データが溜まっていってしまうのを防ぐために削除だけ行うように修正しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/2be866a002c2e71dbc2c8b94367c8b3f34b7ed4a" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>ベンチマークを何度か実行していたのですが6500~5600と振り幅が大きい&amp;hellip;。&lt;/p>
&lt;h2 id="playersaddの改善">players/addの改善&lt;/h2>
&lt;p>alpの結果を眺めていたら上記エンドポイントが異常に重たくなっていました。スコアログを見返すとflockをトランザクションにしたあたりからずっとひどい状態でした笑&lt;/p>
&lt;p>スコアが伸び悩んでいたのもあり、気になったので改善してみようとコードを読んだら、こちらもfor文の中で逐一クエリが発行されていました。sqliteの負荷が懸念だったのもあり以下のようにそれぞれまとめて取得してPython側で頑張るように修正しました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/3016f0fe8a3198163c6153168ae0159a892990da" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>alpを見た感じ改修の効果は得られた(25s→2sになった)のですが、点数には影響せず&amp;hellip;。&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>10万はいかなくとも2万くらいはいきたいなと思っていたのですが、今のまま複数台分散してもそこまで上がる見込みがなく、だれてきてしまったのもあり一旦一区切りにしようと思います😓&lt;/p>
&lt;p>全体の改善のログは以下に。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/issues/1" target="_blank" rel="noopener"
>スコア推移のログ · Issue #1 · reiichii/isucon12q-after&lt;/a>&lt;/p>
&lt;p>ISUCON11予選問題解説のやり方を参考に残していました。&lt;/p></description></item><item><title>ISUCON12予選問題解き直し</title><link>https://reiichii.github.io/post/2022-08-27-15/</link><pubDate>Sat, 27 Aug 2022 14:57:37 +0900</pubDate><guid>https://reiichii.github.io/post/2022-08-27-15/</guid><description>&lt;p>8月は&lt;a class="link" href="https://isucon.net/archives/56842718.html" target="_blank" rel="noopener"
>ISUCON12 予選の解説 (Node.jsでSQLiteのまま10万点行く方法) | ISUCON公式Blog&lt;/a>を見ながらISUCON12予選問題の解き直しをしていました。まだ全部施策をやり切れておらず、点数も上がりきってはいないのですが、1ヶ月経ったので途中までまとめることに。&lt;/p>
&lt;p>実施できたもの&lt;/p>
&lt;ul>
&lt;li>adminDB visit_history にINDEXを張る&lt;/li>
&lt;li>dispenseIDでMySQLを使うのをやめる&lt;/li>
&lt;li>Ranking APIのループクエリをなくす&lt;/li>
&lt;li>Score APIの追加のループクエリをなくす&lt;/li>
&lt;li>アトミック書き込みのためのflockをトランザクションに変更する(※怪しい)&lt;/li>
&lt;li>adminDB visit_historyの初期データをコンパクトにする&lt;/li>
&lt;li>db用サーバを投入し、2台構成にする&lt;/li>
&lt;li>Finish APIでBillingReportを生成する(※怪しい)&lt;/li>
&lt;li>Player APIをなんとかする&lt;/li>
&lt;/ul>
&lt;p>まだできていないもの&lt;/p>
&lt;ul>
&lt;li>tenantDB player_scoreにINDEXをはる&lt;/li>
&lt;li>Ranking APIでランキング集計するのをやめる&lt;/li>
&lt;li>AddTenant APIでSQLite DBを作るのをやめる&lt;/li>
&lt;li>nginxで複数台に振り分ける&lt;/li>
&lt;li>nginxをupstream keepaliveする&lt;/li>
&lt;li>MySQLをちょっとチューニングする&lt;/li>
&lt;/ul>
&lt;p>半分以上は実施しているのに未だ点数が6000点代という&amp;hellip;思ったより厳しかった。&lt;/p>
&lt;h2 id="admindb-visit_history-にindexを張る">adminDB visit_history にINDEXを張る&lt;/h2>
&lt;p>去年の問題ならinitialエンドポイントテーブルが作り直しているのでschemaにindexを追加していたのですが、今回は対象テーブルではdrop createは実行されていないのでここに書いても意味なかったという🙂&lt;/p>
&lt;p>covering indexという概念を初めて知りました。indexって貼れていればいいと思っていたのですが、張り方によっても性能(点数)に差が出てしまうんですね。せっかくなので3パターンで実行計画を比較してみました。&lt;/p>
&lt;pre tabindex="0">&lt;code># 既存
EXPLAIN SELECT player_id, MIN(created_at) AS min_created_at FROM visit_history WHERE tenant_id = 1 AND competition_id = &amp;#39;S&amp;#39; GROUP BY player_id;
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx | tenant_id_idx | 8 | const | 1292937 | 10.00 | Using where; Using temporary |
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
# covering index
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx,idx_all_cover | idx_all_cover | 1030 | const,const | 1 | 100.00 | Using index |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
# createdなし
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx,idx_all_cover | idx_all_cover | 1030 | const,const | 1 | 100.00 | NULL |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>indexを追加すると、possible_keys,keyにidx_all_coverが追加され、filteredが100%になる&lt;/li>
&lt;li>covering indexにすると、ExtraにUsing indexが表示される&lt;/li>
&lt;li>createdありとなしではスコアには200点ほど差がでた&lt;/li>
&lt;/ul>
&lt;p>mysqlのconvering indexとは&lt;/p>
&lt;ul>
&lt;li>クエリーによって取得されたすべてのカラムを含む&lt;em>&lt;strong>インデックス&lt;/strong>&lt;/em>&lt;/li>
&lt;li>検索を索引内で完結でき、表からデータを読み取る必要がないため効率が良い&lt;/li>
&lt;li>表のサイズがメモリに保持しきれないほど大きい場合の検索で有効&lt;/li>
&lt;/ul>
&lt;p>+500点ほど&lt;/p>
&lt;h2 id="dispenseidでmysqlを使うのをやめる">dispenseIDでMySQLを使うのをやめる&lt;/h2>
&lt;p>一意なidを生成するために以下のようにわざわざDBにアクセスしているが、これをuuidを生成するようにする&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/3409af51893bbda12ca68dc1ff1d1de914b0bb14" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>SQLの&lt;code>REPLACE INTO&lt;/code>とは&lt;/p>
&lt;ul>
&lt;li>基本INSERTと同じだが、テーブル内の古い行にprivary keyまたはuniqueインデックスに関して新しい行と同じ値が含まれている場合その古い行は新しい行が挿入される前に削除される&lt;/li>
&lt;li>挿入 or 削除と挿入　の違い&lt;/li>
&lt;/ul>
&lt;p>raise fromについて&lt;/p>
&lt;ul>
&lt;li>例外を連鎖することができる
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Python" data-lang="Python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">RuntimeError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to open database&amp;#34;&lt;/span>) &lt;span style="color:#f92672">from&lt;/span> e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>出力は以下：&lt;code>The above exception was the direct cause of the following exception&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Python" data-lang="Python">&lt;span style="display:flex;">&lt;span>Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;~/ghq/github.com/reiichii/isucon12q-after/tmp.py&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ConnectionError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The above exception was the direct cause of the following exception:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;/~/ghq/github.com/reiichii/isucon12q-after/tmp.py&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">RuntimeError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to open database&amp;#34;&lt;/span>) &lt;span style="color:#f92672">from&lt;/span> e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">RuntimeError&lt;/span>: Failed to open database
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>from を使わないと、&lt;code>During handling of the above exception, another exception occurred&lt;/code> のようになる&lt;/li>
&lt;/ul>
&lt;p>+200点ほど&lt;/p>
&lt;h2 id="ranking-apiのループクエリをなくす">Ranking APIのループクエリをなくす&lt;/h2>
&lt;p>リクエストの合計時間が一番長い /api/player/competition/&amp;lt;competition_id&amp;gt;/ranking をなんとかする。&lt;/p>
&lt;p>N+1になっているのでjoinを使う。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/62e3d7bd4bdaca3b14cc682e0bce6605de907014" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>+1000点になりました😳&lt;/p>
&lt;h2 id="score-apiの追加のループクエリをなくす">Score APIの追加のループクエリをなくす&lt;/h2>
&lt;blockquote>
&lt;p>rankingの次にレスポンスタイム合計が大きいのはscoreなので&lt;/p>
&lt;/blockquote>
&lt;p>Node.jsで解いていたブログ記事では上記のように書いてあったが、私の環境(Python)ではscoreよりも/api/player/player/&amp;lt;player_id&amp;gt; の方が重かったです。&lt;/p>
&lt;p>自分では最後のinsertのところをbulk insertにすればいいのかなと思っていたが、存在しないplayer_idを返す必要はないので数を比較するだけで十分という考えには至れませんでした。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/8f787574d5a847a7f1cc33dc7ecdb4e35a1403d8" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>こちらも+1000点ほど&lt;/p>
&lt;h2 id="アトミック書き込みのためのflockをトランザクションに変更する怪しい">アトミック書き込みのためのflockをトランザクションに変更する(※怪しい)&lt;/h2>
&lt;p>既存コードではテナントDB更新の際に、排他制御をするためにファイルをロックすることをしていますが、トランザクションを使うようにします。
delete-insertの部分をトランザクションにしてflockを外す。他のflockは参照のみなので外すだけで良かった。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/69b53bfb6318f46cdc0db67e38c1fb64271693a0" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>この部分を実装したところ、数回に1回整合性チェックが通らなくなりました😢おそらくトランザクションがちゃんと効いていない模様で、なんでか全然分からなかったのですがおそらくAuto Commitが効いてしまっているところに思い至ったのでこれから確認する段階です。&lt;/p>
&lt;p>そしてなぜか点数はそれほど上がらないどころか実行するたびに数百点の振り幅が出るように。&lt;/p>
&lt;h2 id="admindb-visit_historyの初期データをコンパクトにする">adminDB visit_historyの初期データをコンパクトにする&lt;/h2>
&lt;p>アプリケーションの作りがアクセスしたかどうかが分かればいいため、visit_historyのテナントID、大会ID、プレイヤーIDをgroup byしてmin(created_at) / min(updated_at)のデータのみが残るようにして重複したデータを減らす。&lt;/p>
&lt;p>ちなみに対象テーブルのMySQLの初期化の部分は以下のようになっていて、一定のデータが消えないようになっています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">DELETE&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> visit_history &lt;span style="color:#66d9ef">WHERE&lt;/span> created_at &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;1654041600&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>念の為既存データを残しておきたかったので、私は以下の手順で実施しました。&lt;/p>
&lt;ol>
&lt;li>一時テーブルを作成（visit_history_tmpとする）&lt;/li>
&lt;li>INSERT SELECT
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">INSERT&lt;/span> &lt;span style="color:#66d9ef">INTO&lt;/span> visit_history_tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> player_id, tenant_id, competition_id, &lt;span style="color:#66d9ef">MIN&lt;/span>(created_at), &lt;span style="color:#66d9ef">MIN&lt;/span>(updated_at)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> visit_history
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">GROUP&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>古いテーブルをrename
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RENAME&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> visit_history &lt;span style="color:#66d9ef">TO&lt;/span> visit_history_backup;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>一時テーブルをvisit_historyにrename
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RENAME&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> visit_history_tmp &lt;span style="color:#66d9ef">TO&lt;/span> visit_history;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>初期化時点の行数：3,224,839 → 削減後のデータ数：200,474（0.06%にまで削減された）&lt;/p>
&lt;p>ただし私の場合スコアは変わらず&lt;/p>
&lt;h2 id="db用サーバを投入し2台構成にする">DB用サーバを投入し、2台構成にする&lt;/h2>
&lt;p>ブログの方では複数台構成準備のための施策に突入するのですが、私は先にappとdbの二台構成にすることにしました。&lt;/p>
&lt;ul>
&lt;li>mysqlで他サーバからのアクセスを許容する&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE USER `isucon`@`192.168.%` IDENTIFIED BY &amp;#39;isucon&amp;#39;;
GRANT ALL PRIVILEGES ON `isuports`.* TO `isucon`@`192.168.%`;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>application側で参照先dbを変更
&lt;ul>
&lt;li>今回はdocker-composeにホストが書いてあったのでそこの値を変更する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>前のベンチマークの時点でCPUが余っていたので、これやっても点数が大して変わらないのは予想通りでした。&lt;/p>
&lt;h2 id="finish-apiでbillingreportを生成する">Finish APIでBillingReportを生成する&lt;/h2>
&lt;blockquote>
&lt;p>今回の当日マニュアルにあった、「Finish APIを呼び出したあとにAdmin/OrganizerのBilling APIに結果が反映されるまで3秒の猶予があるの意味は、「初期実装だとBilling APIで請求額を計算しているけど、大会ごとにfinishするときに大会の請求額が確定するので、BillingReportをそこで生成してストレージにいれてね!」です。&lt;/p>
&lt;/blockquote>
&lt;p>分からん&amp;hellip;😇&lt;/p>
&lt;p>finish が呼ばれた時にbilling_report_by_competitionを呼び出して、その結果をinsertします。&lt;/p>
&lt;ul>
&lt;li>テーブルを作成
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#f92672">`&lt;/span>billing_report&lt;span style="color:#f92672">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span> BIGINT UNSIGNED &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_title&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_count&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>visitor_count&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_player_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_visitor_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span>(&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) ENGINE&lt;span style="color:#f92672">=&lt;/span>InnoDB &lt;span style="color:#66d9ef">DEFAULT&lt;/span> CHARACTER &lt;span style="color:#66d9ef">SET&lt;/span>&lt;span style="color:#f92672">=&lt;/span>utf8mb4;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>finish apiの時にbilling_report_by_competitionを呼び出して結果をinsertする&lt;/li>
&lt;li>admin/organizationのbillingの参照先をdbからselectして取ってくる&lt;/li>
&lt;li>初期データ生成処理を改修
&lt;ul>
&lt;li>初期データを入れ直したあとに全ての終了済み大会について billingReportByCompetition を実行してINSERTしなおす必要がある&lt;/li>
&lt;li>billing report初期データ生成スクリプトを作成&lt;/li>
&lt;li>&lt;code>mysqldump -uroot -proot isuports billing_report &amp;gt; initial_billing_report.dump&lt;/code>&lt;/li>
&lt;li>initial時に初期データをimportさせる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/64b7251efa85305e548fbfac2c19fed82d2379f9" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>スコアはそれほど変わらず、不安定さが増してしまったように見受けられました。(編集とは関係ないエンドポイントでエラーが発生する)
ただ&lt;code>api/admin/tenants/billing&lt;/code>, &lt;code>api/organizer/billing&lt;/code>の呼び出し回数と合計レスポンスタイムが大幅に改善されているので一旦よしとします。&lt;/p>
&lt;h2 id="player-apiをなんとかする">Player APIをなんとかする&lt;/h2>
&lt;p>上記のメトリクスを眺めているときにPlayer APIがものすごく重たくなっている(MAX 5s程度だったものがMAX 30sになっていた笑)ことに気づき、あまりにも気になったので先に直すことにしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/17801b6a6af423f4ea6bc0670ba91af8c0111660" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>これもN+1を直すだけです。必要な情報に対して多くクエリを発行しているのでスリムに書き直してあげます。&lt;/p>
&lt;p>今まで4000点代で伸び悩んでいたスコアが6000点台まで届きました👏&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>スコアが伸び悩んで、また他のことをやりたくなってきたのもあり、8月いっぱいで一旦やめにしようかなと思いかけていたのですが、月末の週に突入して解決の兆しが見えてきたので、もう少し粘ってみようかと思います。&lt;/p>
&lt;p>複数台構成にしたら10万点まで届くのだろうか&amp;hellip;&lt;/p>
&lt;p>続きも書けたら書きます。&lt;/p></description></item><item><title>ISUCON12予選参加した</title><link>https://reiichii.github.io/post/2022-07-24-14/</link><pubDate>Sun, 24 Jul 2022 14:06:01 +0900</pubDate><guid>https://reiichii.github.io/post/2022-07-24-14/</guid><description>&lt;img src="https://reiichii.github.io/post/2022-07-24-14/score_graph.png" alt="Featured image of post ISUCON12予選参加した" />&lt;p>ISUCON12予選に参加しました。結果は散々だったのですが振り返りも兼ねて残しておこうと思います。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">ISUCON12 オンライン予選、17:00の時点でスコアは凍結されました🚀 残時間 01:00:00のスコアはこちら！ &lt;a href="https://twitter.com/hashtag/isucon?src=hash&amp;amp;ref_src=twsrc%5Etfw">#isucon&lt;/a> &lt;a href="https://t.co/SGjrF9nBCR">pic.twitter.com/SGjrF9nBCR&lt;/a>&lt;/p>&amp;mdash; ISUCON公式 (@isucon_official) &lt;a href="https://twitter.com/isucon_official/status/1550753842446630912?ref_src=twsrc%5Etfw">July 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ステータス">ステータス&lt;/h2>
&lt;ul>
&lt;li>初出場&lt;/li>
&lt;li>Python&lt;/li>
&lt;li>1人チーム&lt;/li>
&lt;li>2502点&lt;/li>
&lt;/ul>
&lt;p>目標は「闇雲に手を動かずに爪痕残す」でした。
爪痕は残せませんでした🪦&lt;/p>
&lt;h2 id="準備">準備&lt;/h2>
&lt;p>やっていたこととしては以下です。&lt;/p>
&lt;ul>
&lt;li>ISUCON11予選過去問解く
&lt;ul>
&lt;li>alpやmysqlのslow query logなどの計測ツールを使えるようになっておくこと&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>6月に行われた事前講習とハンズオンへの参加
&lt;ul>
&lt;li>普段rubyさわらないので多少やりにくかったのですが、出て良かったです。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ISUCON用ansible playbookを用意
&lt;ul>
&lt;li>計測ツールの導入をスムーズに行うため準備していました&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="タイムライン">タイムライン&lt;/h2>
&lt;ul>
&lt;li>09:40~ 配信視聴
&lt;ul>
&lt;li>予選問題の概要を聞く&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>10:00~ 開始
&lt;ul>
&lt;li>ポータルサイト一通り見る（感動した）&lt;/li>
&lt;li>当日レギュレーションを読む&lt;/li>
&lt;li>マニュアルを読む&lt;/li>
&lt;li>読みながらアプリケーションを触ったり、ユースケース図を書いて仕様を把握&lt;/li>
&lt;li>サーバへのssh接続確認&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>11:00~ 準備
&lt;ul>
&lt;li>ソースコードをgit管理下に置く&lt;/li>
&lt;li>初回ベンチマークを実行&lt;/li>
&lt;li>フワッと改善の目星をつける&lt;/li>
&lt;li>サーバ構成をmysql用サーバとapplication用の2台構成に変更する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>12:00~ 準備
&lt;ul>
&lt;li>計測ツールの導入&lt;/li>
&lt;li>nginxの設定ファイルをgit管理下に配置し直す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>13:00~13:30 お昼休憩
&lt;ul>
&lt;li>20分でご飯食べて10分昼寝。もうこの時点で結構疲れていた&lt;/li>
&lt;li>午前中はアプリケーションコードをほとんど見れていない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>13:30~ 準備の延長戦
&lt;ul>
&lt;li>nginxの設定ファイルを間違えており、修正箇所探しに時間を潰す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>14:00~ 改善開始
&lt;ul>
&lt;li>アプリケーションのコードを眺める&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>14:30~16:30 改善案1.スロウクエリを潰す試み&lt;/li>
&lt;li>16:30~17:30 改善案2.リクエスト数の多いエンドポイントの改善&lt;/li>
&lt;li>17:30~ 改善案3.bulkinsertに書き換えてみる&lt;/li>
&lt;li>17:45~ 再起動チェック&lt;/li>
&lt;li>18:00~19:00 競技終了・配信で講評を聞く&lt;/li>
&lt;/ul>
&lt;p>こうして振り返ってみると計測ツールをスムーズに導入できていれば+1hくらいコード読む時間を捻出できていましたね。ansibleを用意していたがちょこちょこ小さいエラーにはまって気がついたら1hほど経ってしまっていました。&lt;/p>
&lt;p>今回の目標が闇雲に手を動かさないだったので、一応自分なりに根拠や狙いを持っていたつもりだったのですが、講評を聞く感じ的が外れていました。&lt;/p>
&lt;h3 id="改善案0サーバの役割分担">改善案0.サーバの役割分担&lt;/h3>
&lt;p>サーバ構成をmysql用サーバとapplication用の2台構成に変更しました。&lt;/p>
&lt;p>初回ベンチ実行時にtopの出力を眺めていたのですが、dbとpythonがcpuを食い潰しあっているように見えたため。先に分けた方が今後変化追いやすいかなと思ったというのもあります。&lt;/p>
&lt;p>分けたことにより+500点ほどスコアが改善しました。goからpythonにしたときに下がった分が元に戻っただけなので実質プラマイ0ですね。&lt;/p>
&lt;h3 id="改善案1料金集計処理のスロウクエリを潰す試み">改善案1.料金集計処理のスロウクエリを潰す試み&lt;/h3>
&lt;ul>
&lt;li>adminとorg系リクエストの配点が高いこと&lt;/li>
&lt;li>adminの一覧画面とorgの請求情報一覧画面が異様に重かったこと&lt;/li>
&lt;li>スロウクエリログで一番重かったクエリが、上記二つのリクエスト時に実行されるクエリだったこと&lt;/li>
&lt;/ul>
&lt;p>から、この処理を改善すればパフォーマンスが大きく改善するのではと着手することにしました。&lt;/p>
&lt;p>それ自体は良かったのですが、 処理が参照しているデータ源がmysqlとsqliteに分かれていることからどうしたら良いものかと手が動かず。sqliteをmysqlに載せ替えるといった選択肢は効果が見込めるかどうか分からなかったので実施に踏み切れませんでした。&lt;/p>
&lt;p>mysql側の改善をしようと検索件数を必要な分だけに絞ったりしていたのですが、ベンチマーカーによる整合性チェックでエラーが出てしまいました。この処理の改善に2hほどかけてしまっていたので中断することにしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify/commit/855a3be79efea20a55c1bd6f6a04bb1f3d050d19" target="_blank" rel="noopener"
>ログ&lt;/a>&lt;/p>
&lt;h3 id="改善案2-playerのリーダーボード一覧エンドポイントを改善する試み">改善案2. playerのリーダーボード一覧エンドポイントを改善する試み&lt;/h3>
&lt;ul>
&lt;li>alpでリクエストを集計したところ合計レスポンスタイムが一番多かったのはplayerのリーダーボード一覧エンドポイントだったこと&lt;/li>
&lt;li>ベンチマーカーの出力に「leaderboardの表示に1秒以上かかったため2人の参加者が離脱しました。」のように出ていたこと&lt;/li>
&lt;/ul>
&lt;p>player系エンドポイントは、先ほどのadminやorg系エンドポイントと異なり加算は少ないのですが、上記の理由からここを改善すれば少なくともスコアがそれなりに改善される見込みがありました。&lt;/p>
&lt;p>ただ参照先がsqliteのデータで、パフォーマンス改善ってどうやるんだと首を捻る羽目に。調べてみたらsqliteにもインデックスの概念があり、DB初期化スクリプトのcreate table sql見たところインデックスは貼られていなかったので試しに貼って見たのですが、ほとんどスコアに影響はありませんでした。&lt;/p>
&lt;p>まだ改善の余地はあったのかもですが、この時点で残り1hを切ってしまっていたため一旦深追いをやめてしまいました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify/commit/82167412532d0dd2e789c27afb5ed6187d427c3b" target="_blank" rel="noopener"
>ログ&lt;/a>&lt;/p>
&lt;h3 id="改善案3-forでinsertしている箇所をbulkinsertさせる">改善案3. forでinsertしている箇所をbulkinsertさせる&lt;/h3>
&lt;p>残り時間が微妙だったので、ソースコード眺めているときに気になっており、すぐに改善できそうな箇所として &lt;code>/api/organizer/players/add&lt;/code> のinsert処理を書き換えようと思いました。実施して見たもののベンチマーカーがこけました。単純に書き換えるだけだと後続処理が意図した形に動かなかくなってしまうことに後から気づきました。&lt;/p>
&lt;p>そもそもアプローチ方法が間違えていたのか、後続処理も合わせてなんとかする余地があったのか、残りが15分と検討する時間がもうなかったので中断しました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify/commit/e9bc7671bb06d673cb8a4061841e457da5d236ac" target="_blank" rel="noopener"
>ログ&lt;/a>&lt;/p>
&lt;h2 id="問題の所感">問題の所感&lt;/h2>
&lt;ul>
&lt;li>「mysqlで準備していたからpostgresqlとかだったらきついな..まあスポンサーにmysqlがいるからないか」とか思っていたらまさかのmysql+sqliteでびっくり&lt;/li>
&lt;li>auto_incrementのところも何か変なコードがあるなぁとは思っていたのですが、料金表とリーダーボード表示の箇所にばかり気を取られていたので全然見れませんでした&lt;/li>
&lt;li>講評で「インデックスを貼ればdbの負荷がひとまずは下がる」ようなことが言われていて、もう少しDB周りを重点的に確認すれば良かったです。見ていた箇所のクエリのインデックスは確認していたつもりだったのですがそうではなく、出てきたスロークエリに対してインデックスが効いているかを見ておくべきでした&lt;/li>
&lt;li>lockがやたら多いのも気にはなっていたのですが、トランザクションを使う箇所というのが出てきませんでした。ただの知見不足です&lt;/li>
&lt;li>ユースケース図を書いていたのですが、アプリの全体像を網羅的に把握するのに役立ちました。アプリケーションとdbのやりとり周りも何かしらの方法でスムーズに把握できるようになれると良かったのですが&lt;/li>
&lt;/ul>
&lt;h2 id="その他感想">その他感想&lt;/h2>
&lt;ul>
&lt;li>ISUCON11予選問題を解いていた時はアプリケーションの使用の仕様が難しく、何やっていいか全く分からない状態でした。それに比べたら今回の問題はまだその辺りの把握はしやすかったです&lt;/li>
&lt;li>ポータルサイトがどんなものかずっと見てみたかったので感動しました。終わった後速攻で選手用ページが見れなくなってしまい、ベンチマークのログやダッシュボードのスクショを取り損ねてしまいました&lt;/li>
&lt;li>終わった後眼精疲労でくたくたで、速攻でpc閉じてしまったのですが、DCの方では感想戦で盛り上がっていて他の参加者のバイタリティの高さを感じました。翌朝読み返していて面白く、復習時の参考にまた読み返そうと思います&lt;/li>
&lt;li>集中力は8h意外と持ちました。1h~1h30minにつき5minの休憩を無理やり設けるようにして良かったです&lt;/li>
&lt;/ul>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>無念 : 楽しかった！ が 6:4の気持ちです。&lt;/p>
&lt;p>あと目と手と頭が足りないです。本戦一人出場している人の凄さを実感します。私がアプリケーション側でもう少しまともに戦えるようになったら、次回は誰か誘ってみるのもありかもなと思えてしまいました。&lt;/p>
&lt;p>今年もPythonでの本戦出場選手は出なかったのでPythonで狙いたいなと思う反面、業務で触らないgoの勉強の口実にしたいという気持ちのが強いので、来年はgoで10000点以上出すことを目標に出てみたいと思います。ベンチマーカーがgoで書かれていて、その辺りの処理ももう少し読めるようになりたいんですよね。&lt;/p>
&lt;p>運営の皆様、開催ありがとうございました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify" target="_blank" rel="noopener"
>https://github.com/reiichii/isucon12-qualify&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12-qualify/issues/1" target="_blank" rel="noopener"
>計測ログ&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://reiichii.github.io/post/2022-07-24-14/score_graph.png"
width="2336"
height="1122"
srcset="https://reiichii.github.io/post/2022-07-24-14/score_graph_hu1c45c6ba752b88bcb48fca24fcaa2fcb_322845_480x0_resize_box_3.png 480w, https://reiichii.github.io/post/2022-07-24-14/score_graph_hu1c45c6ba752b88bcb48fca24fcaa2fcb_322845_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="上げられなかった"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="499px"
>&lt;/p>
&lt;p>&lt;img src="https://reiichii.github.io/post/2022-07-24-14/usecase.jpg"
width="4032"
height="3024"
srcset="https://reiichii.github.io/post/2022-07-24-14/usecase_hu8aac09e64bc6d0d3413f56a86150a826_1612266_480x0_resize_q75_box.jpg 480w, https://reiichii.github.io/post/2022-07-24-14/usecase_hu8aac09e64bc6d0d3413f56a86150a826_1612266_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="こんなアプリケーションでした(?)"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p></description></item><item><title>ISUCON11-qualifyのログインページが開かなかった</title><link>https://reiichii.github.io/post/2022-07-13-22/</link><pubDate>Wed, 13 Jul 2022 22:21:31 +0900</pubDate><guid>https://reiichii.github.io/post/2022-07-13-22/</guid><description>&lt;p>ISUCON11予選環境構築時、構築したアプリケーションでログインしようとすると「このサイトにアクセスできません」が表示されます。また遷移先urlが「&lt;code>http://localhost:5000/?callback=https://isucondition.t.isucon.dev&lt;/code>」のようにおかしな表示になります。&lt;/p>
&lt;p>前提として以下の手順を参考に、クラウド環境にアプリケーションを構築し、トップページが開けるところまでを確認済みです。&lt;/p>
&lt;p>&lt;a class="link" href="https://knowledge.sakura.ad.jp/31520/" target="_blank" rel="noopener"
>ISUCON過去問題の環境を「さくらのクラウド」で構築する | さくらのナレッジ&lt;/a>&lt;/p>
&lt;h2 id="やること1-jia-api-mockを起動する">やること1. JIA API Mockを起動する&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/blob/main/docs/isucondition.md#jia-api-mock-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6" target="_blank" rel="noopener"
>アプリケーションマニュアル&lt;/a>の末尾に書いてあるのですが、サーバの5000portで一部のリクエストを待ち受けるようになっているみたいです。&lt;/p>
&lt;p>実際urlからも分かる通り、apiのログイン時に5000portに飛ばすようになっています。該当コードは以下です。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/blob/main/webapp/frontend/src/components/Home/Auth.tsx#L6" target="_blank" rel="noopener"
>https://github.com/isucon/isucon11-qualify/blob/main/webapp/frontend/src/components/Home/Auth.tsx#L6&lt;/a>&lt;/p>
&lt;p>自動起動はしないため、マニュアルに書いてある手順でモックのサービスを起動してあげます。&lt;/p>
&lt;h2 id="やること2-ポートフォワーディングの設定">やること2. ポートフォワーディングの設定&lt;/h2>
&lt;p>このままだとアプリケーションした際にローカル環境の「localhost:5000」にアクセスされてしまいます。&lt;/p>
&lt;p>ローカル環境の5000にアクセスされたら、リモートサーバの5000にアクセスされるようにポートフォワーディングの設定をしておきます。&lt;/p>
&lt;p>&lt;code>ssh -A -L 5000:{ip}:5000 {user}@{ip}&lt;/code>&lt;/p>
&lt;p>ssh接続した状態で「JIAのアカウントでログイン」を押すと、「Sign in with JIA」の画面が開き、ユーザー名とパスワードを入力してログイン後の画面にすすめるようになります👏&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>分かる人には分かるのかもしれませんが、これは構築手順書に説明があった方が親切なような気がしました。&lt;/p>
&lt;p>ちなみにこの辺の仕様について話されているissueも発見しました。完全に理解はしていません..。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/issues/1260" target="_blank" rel="noopener"
>https://github.com/isucon/isucon11-qualify/issues/1260&lt;/a>&lt;/p></description></item><item><title>ISUCON12事前講習</title><link>https://reiichii.github.io/post/2022-06-07-20/</link><pubDate>Tue, 07 Jun 2022 20:56:13 +0900</pubDate><guid>https://reiichii.github.io/post/2022-06-07-20/</guid><description>&lt;p>ISUCONハンズオン目的で申し込んだのですが、去年一昨年の事前講習レポートには書いていない内容が盛り込まれていて普通に楽しかったです。&lt;/p>
&lt;p>&lt;a class="link" href="https://speakerdeck.com/rosylilly/isucon12-shi-qian-jiang-xi" target="_blank" rel="noopener"
>ISUCON12 事前講習 - Speaker Deck&lt;/a>&lt;/p>
&lt;p>ほぼ資料に書いてあるのですが、記念に手元のメモも残します。&lt;/p>
&lt;pre tabindex="0">&lt;code>## 強いチームがしていること
* なんとなくで手を動かさない。
- 優勝者インタビューで「何が効いたのかわからない」というチームはいない
* デプロイのリードタイムをに1分以上かけない
- GUIでgit操作しがちなご時世だけど、gitコマンドを使った方がいいよ
* 使い慣れたミドルウェアのconfigを1から書かない
- 事前に用意しておく
* やったことがないことをやらない
- 大会中に実務で触っていないgoに移植しようとしてボロ負けした経験がある
&lt;/code>&lt;/pre>&lt;p>なんとなく手を動かすな、仮説をベースに動くことはISUCON以外の仕事でも言える。&lt;/p>
&lt;pre tabindex="0">&lt;code>## タイムライン
10:00
* マニュアルとレギュレーションを読む
* ブラウザでサービスを見て、アプリケーションを把握する
* 各コンポートネントがどう起動されているか、設定やconfigの場所を確認
- init.dかsystemcnfかdockerかなど
* 自分が必要なruntimeをさっとインストールできるようにしておく
* dbスキーマがどう定義されているか調べる
* デプロイ方法を構築する
* 使われているミドルウェアの種類とバージョンを調べる
- 過去にmemcacheかと思ったらmemcacheのplaginを入れたmysqlでそれがすごく重い、という罠があったらしい
* 使っているサーバのスペックを各台調査する
- サーバによってスペックが異なるケースがある
* ベンチマークを実行する
11:00
* 得点源が何かを確認する
* 減点の要因を把握する
* プロファイリングツールを入れる
* 初期状態の完全なバックアップを作成する
- tarで固めておく
12:00
* ちゃんとご飯を食べる
* わからないことが出たらリストにしておく
* やること、やらないことを明確にする
13:00
* デプロイが1コマンドでできるように
* デプロイ→性能計測→プロファイルまで一気通貫で行える仕組みを用意しておく
- line_profile
- リクエスト単位　どちらも
14:00~17:00
* 1コミット1ベンチマーク
* 気にする指標を明確に把握してプロファイルする
17:00
* 再起動試験をする
* apmを入れていたら停止する
- newrelicのapm止めるの意外と難しかったりする
* デバックログの出力を止める
* プロファイル用に差し込んだものを止める
18:00
* 作業ログをブログに書く準備をする
* 記憶が明確な間に振り返りをする
&lt;/code>&lt;/pre>&lt;p>優勝経験チームの行動をトレスしたタイムラインは、考え方など参考にできるところが多い貴重な資料です。&lt;/p>
&lt;p>前にISUCON11予選過去問に挑戦した時、私の場合マニュアルとレギュレーションを読むだけで1時間はかかったので10:00代きっっっつて思いながら聞いていました🙂&lt;/p>
&lt;pre tabindex="0">&lt;code>### おすすめの練習
* デプロイ方法セットアップ
- リポジトリ作って、git initして、チェックインして、deploy
* ansibleを最速で回せるようになっておく
* ベンチマークから集計を1コマンドでできるようにする
- 集計スクリプトを作っておく
* サーバの役割変更
- 起動を止める(systemctlならdisableし忘れない)、接続先を変更する
* 使いたいツールのインストール
- 使いたいツールは一発で入れられるようにする(alp,pt-query-digest)
- prebuilt binaryが用意できるなら用意するのも手
&lt;/code>&lt;/pre>&lt;p>もし今年出れるなら、最低限これだけは準備していきたい。&lt;/p>
&lt;p>また最後に同じ問題5回くらい解くと、新しい発見があって楽しいよといったこともあって、また過去問解き直そうと思いました。&lt;/p>
&lt;p>ちなみにまだ参加申し込みできていませんorz&lt;/p></description></item><item><title>キーマップ変更する時の手順</title><link>https://reiichii.github.io/post/2022-06-05-16/</link><pubDate>Sun, 05 Jun 2022 16:19:27 +0900</pubDate><guid>https://reiichii.github.io/post/2022-06-05-16/</guid><description>&lt;img src="https://reiichii.github.io/post/2022-06-05-16/img_keymap.png" alt="Featured image of post キーマップ変更する時の手順" />&lt;p>&lt;img src="https://reiichii.github.io/post/2022-06-05-16/img_keymap.png"
width="720"
height="720"
srcset="https://reiichii.github.io/post/2022-06-05-16/img_keymap_hu50b55d9f2e639c377323533322f7b495_75174_480x0_resize_box_3.png 480w, https://reiichii.github.io/post/2022-06-05-16/img_keymap_hu50b55d9f2e639c377323533322f7b495_75174_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="新しいキーマップ。大体端のものを真ん中に寄せているだけ"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>1年ほど前にこしらえた自作キーボードでpc作業を行なっています。&lt;/p>
&lt;p>久しぶりにキーマップを変えようと思ったらびっくりするくらいやり方を忘れており、思い出すのに結構時間が掛かったため未来の自分用に忘備録としてやり方を残しておきます。&lt;/p>
&lt;p>&lt;a class="link" href="https://reiichii.hateblo.jp/entry/2021/05/04/210513" target="_blank" rel="noopener"
>【自作キーボード】Sparrow62を組み立てた&lt;/a>&lt;/p>
&lt;h2 id="やること">やること&lt;/h2>
&lt;ul>
&lt;li>キーマップの設計&lt;/li>
&lt;li>キーボードのfirmwareに書き込む&lt;/li>
&lt;/ul>
&lt;h3 id="キーマップの設計">キーマップの設計&lt;/h3>
&lt;p>キーマップの設計は、&lt;a class="link" href="https://config.qmk.fm/#/sparrow62/LAYOUT" target="_blank" rel="noopener"
>QMK Configurator&lt;/a>というWebアプリからGUIで行います。&lt;/p>
&lt;ol>
&lt;li>前の設定を読み込ませる
&lt;ul>
&lt;li>KEYBOARDを自分が使っているものに選択する&lt;/li>
&lt;li>urlからjsonをアップロードするボタンを押下し、keymap.json（以前の設定時にexportしておいたもの）のrowファイルのurlを読み込ませる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>画面ぽちぽちでキーマップの配置を変更する&lt;/li>
&lt;li>右上のCOMPILEボタンを押下する&lt;/li>
&lt;li>右下のFIRMWAREボタンを押下し、hexファイルをダウンロードする&lt;/li>
&lt;/ol>
&lt;p>後の作業のために、この画面はまだ閉じないでおく。&lt;/p>
&lt;p>参考：&lt;a class="link" href="https://salicylic-acid3.hatenablog.com/entry/qmk-configurator" target="_blank" rel="noopener"
>（初心者編）QMK Configuratorを使ってキーマップを書き換えよう - 自作キーボード温泉街の歩き方&lt;/a>&lt;/p>
&lt;h3 id="キーボードのfirmwareに書き込む">キーボードのfirmwareに書き込む&lt;/h3>
&lt;p>ローカルPCにインストール済みのQMK Toolboxに先ほどのhexファイルを読み込ませ、キーボードのfirmwareに書き込みます。キーボードは左右繋げたままにして、左右それぞれに書き込みをします。&lt;/p>
&lt;ol>
&lt;li>QMK Toolboxを開く&lt;/li>
&lt;li>先ほどダウンロードしたhexファイルを読み込ませる&lt;/li>
&lt;li>autoreloadにチェックをする&lt;/li>
&lt;li>キーボードのリセットボタンを1度押下する
&lt;ul>
&lt;li>書き込みが始まり、「done. thank you. disconnect」の文言が出たら無事成功&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>反対のキーボードにケーブルを差し、3と4を行う&lt;/li>
&lt;/ol>
&lt;p>QMK ConfiguratorのTEST KEYBOARDでキーボードのボタンに意図した変更が反映されていることを確認する。&lt;/p>
&lt;p>参考：&lt;a class="link" href="https://salicylic-acid3.hatenablog.com/entry/qmk-toolbox" target="_blank" rel="noopener"
>（初心者編）自作キーボードにファームウェアを書き込む - 自作キーボード温泉街の歩き方&lt;/a>&lt;/p>
&lt;h3 id="後片付け">後片付け&lt;/h3>
&lt;ul>
&lt;li>QMK Configuratorでjsonファイルをexportしておく（次回また読み込ませるため）&lt;/li>
&lt;li>PRINT KEYMAPで画像をスクショしておく（稀にボタンの配置がどうなっていたのか見返したくなるため）&lt;/li>
&lt;li>上記をkeymapリポジトリに反映させておく&lt;/li>
&lt;/ul>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>初回は設定で精一杯で運用(?)のことを全然考えていなかったので、「あれjsonファイル出力してたっけ」「キーマップの画像をスクショしておいたはずなんだけどどこやったっけ」なんてわたわたしていました。githubに上げておけば家からでも会社からでもキーマップ確認できるし、これできっと一安心😌&lt;/p></description></item><item><title>About</title><link>https://reiichii.github.io/page/about/</link><pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate><guid>https://reiichii.github.io/page/about/</guid><description>&lt;p>日々のあれこれを忘れないようにするためのブログです。&lt;br>
ジャンルは絞らず、気の向くままに続けていけたらと思っています。&lt;/p>
&lt;p>&lt;a class="link" href="https://reiichii.hateblo.jp/" target="_blank" rel="noopener"
>旧ブログ（はてなブログ）&lt;/a>&lt;/p></description></item><item><title>ブログ引っ越した</title><link>https://reiichii.github.io/post/2022-05-27-16/</link><pubDate>Fri, 27 May 2022 17:01:55 +0900</pubDate><guid>https://reiichii.github.io/post/2022-05-27-16/</guid><description>&lt;img src="https://reiichii.github.io/post/2022-05-27-16/IMG_8179.jpg" alt="Featured image of post ブログ引っ越した" />&lt;p>はてなからHugoで立てたブログに引っ越しました。&lt;/p>
&lt;p>大きな理由としては、以前のブログの見た目が気に入らなかった（カスタマイズのコストが高い）ことと、vscodeとmarkdownでブログ書きたかったというのが主です。&lt;/p>
&lt;p>デプロイ先はNetlifyを使おうか悩んだのですが、ブログの目的がアウトプットの習慣付けが主で、アクセス数稼ぎに力を入れていないことと、普段業務でGitLabを使うことが多かったので、GitHub PagesやCICDをちょっと触ってみたいなというのもあり、ミニマムにGitHub Pagesで始めてみることにしました。後から乗り換えることもできなくはないですし。その場合ドメイン変わってしまいますが個人ブログでリスクもないので気の向くままにやっていく方針で😌&lt;/p>
&lt;p>既存のブログと記事は特にexportせずそのまま残しておく予定です。（もしかしたら戻る可能性もなくはないので）&lt;/p>
&lt;p>これからもマイペースに続けていきたいと思います。&lt;/p>
&lt;p>&lt;a class="link" href="https://reiichii.hateblo.jp/" target="_blank" rel="noopener"
>以前のブログ&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://reiichii.github.io/post/2022-05-27-16/IMG_8179.jpg"
width="2448"
height="1471"
srcset="https://reiichii.github.io/post/2022-05-27-16/IMG_8179_hu05940ea99d8537e6bd20faf24b516d8b_1077440_480x0_resize_q75_box.jpg 480w, https://reiichii.github.io/post/2022-05-27-16/IMG_8179_hu05940ea99d8537e6bd20faf24b516d8b_1077440_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="こないだ食べたコース料理のデザートの羊モナカ可愛かった"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p></description></item><item><title>Archives</title><link>https://reiichii.github.io/page/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://reiichii.github.io/page/archives/</guid><description/></item><item><title>Search</title><link>https://reiichii.github.io/page/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://reiichii.github.io/page/search/</guid><description/></item></channel></rss>