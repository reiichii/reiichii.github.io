[{"content":"ISUCON12予選に参加しました。結果は散々だったのですが振り返りも兼ねて残しておこうと思います。\nISUCON12 オンライン予選、17:00の時点でスコアは凍結されました🚀 残時間 01:00:00のスコアはこちら！ #isucon pic.twitter.com/SGjrF9nBCR\n\u0026mdash; ISUCON公式 (@isucon_official) July 23, 2022 ステータス 初出場 Python 1人チーム 2502点 目標は「闇雲に手を動かずに爪痕残す」でした。 爪痕は残せませんでした🪦\n準備 やっていたこととしては以下です。\nisucon11予選過去問解く alpやmysqlのslow query logなどの計測ツールを使えるようになっておくこと 6月に行われた事前講習とハンズオンへの参加 普段rubyさわらないので多少やりにくかったのですが、出て良かったです。 isucon用ansible playbookを用意 計測ツールの導入をスムーズに行うため準備していました タイムライン 09:40~ 配信視聴 予選問題の概要を聞く 10:00~ 開始 ポータルサイト一通り見る（感動した） 当日レギュレーションを読む マニュアルを読む 読みながらアプリケーションを触ったり、ユースケース図を書いて仕様を把握 サーバへのssh接続確認 11:00~ 準備 ソースコードをgit管理下に置く 初回ベンチマークを実行 フワッと改善の目星をつける サーバ構成をmysql用サーバとapplication用の2台構成に変更する 12:00~ 準備 計測ツールの導入 nginxの設定ファイルをgit管理下に配置し直す 13:00~13:30 お昼休憩 20分でご飯食べて10分昼寝。もうこの時点で結構疲れていた 午前中はアプリケーションコードをほとんど見れていない 13:30~ 準備の延長戦 nginxの設定ファイルを間違えており、修正箇所探しに時間を潰す 14:00~ 改善開始 アプリケーションのコードを眺める 14:30~16:30 改善案1.スロウクエリを潰す試み 16:30~17:30 改善案2.リクエスト数の多いエンドポイントの改善 17:30~ 改善案3.bulkinsertに書き換えてみる 17:45~ 再起動チェック 18:00~19:00 競技終了・配信で講評を聞く こうして振り返ってみると計測ツールをスムーズに導入できていれば+1hくらいコード読む時間を捻出できていましたね。ansibleを用意していたがちょこちょこ小さいエラーにはまって気がついたら1hほど経ってしまっていました。\n今回の目標が闇雲に手を動かさないだったので、一応自分なりに根拠や狙いを持っていたつもりだったのですが、講評を聞く感じ的が外れていました。\n改善案0.サーバの役割分担 サーバ構成をmysql用サーバとapplication用の2台構成に変更しました。\n初回ベンチ実行時にtopの出力を眺めていたのですが、dbとpythonがcpuを食い潰しあっているように見えたため。先に分けた方が今後変化追いやすいかなと思ったというのもあります。\n分けたことにより+500点ほどスコアが改善しました。goからpythonにしたときに下がった分が元に戻っただけなので実質プラマイ0ですね。\n改善案1.料金集計処理のスロウクエリを潰す試み adminとorg系リクエストの配点が高いこと adminの一覧画面とorgの請求情報一覧画面が異様に重かったこと スロウクエリログで一番重かったクエリが、上記二つのリクエスト時に実行されるクエリだったこと から、この処理を改善すればパフォーマンスが大きく改善するのではと着手することにしました。\nそれ自体は良かったのですが、 処理が参照しているデータ源がmysqlとsqliteに分かれていることからどうしたら良いものかと手が動かず。sqliteをmysqlに載せ替えるといった選択肢は効果が見込めるかどうか分からなかったので実施に踏み切れませんでした。\nmysql側の改善をしようと検索件数を必要な分だけに絞ったりしていたのですが、ベンチマーカーによる整合性チェックでエラーが出てしまいました。この処理の改善に2hほどかけてしまっていたので中断することにしました。\nログ\n改善案2. playerのリーダーボード一覧エンドポイントを改善する試み alpでリクエストを集計したところ合計レスポンスタイムが一番多かったのはplayerのリーダーボード一覧エンドポイントだったこと ベンチマーカーの出力に「leaderboardの表示に1秒以上かかったため2人の参加者が離脱しました。」のように出ていたこと player系エンドポイントは、先ほどのadminやorg系エンドポイントと異なり加算は少ないのですが、上記の理由からここを改善すれば少なくともスコアがそれなりに改善される見込みがありました。\nただ参照先がsqliteのデータで、パフォーマンス改善ってどうやるんだと首を捻る羽目に。調べてみたらsqliteにもインデックスの概念があり、DB初期化スクリプトのcreate table sql見たところインデックスは貼られていなかったので試しに貼って見たのですが、ほとんどスコアに影響はありませんでした。\nまだ改善の余地はあったのかもですが、この時点で残り1hを切ってしまっていたため一旦深追いをやめてしまいました。\nログ\n改善案3. forでinsertしている箇所をbulkinsertさせる 残り時間が微妙だったので、ソースコード眺めているときに気になっており、すぐに改善できそうな箇所として /api/organizer/players/add のinsert処理を書き換えようと思いました。実施して見たもののベンチマーカーがこけました。単純に書き換えるだけだと後続処理が意図した形に動かなかくなってしまうことに後から気づきました。\nそもそもアプローチ方法が間違えていたのか、後続処理も合わせてなんとかする余地があったのか、残りが15分と検討する時間がもうなかったので中断しました。\nログ\n問題の所感 「mysqlで準備していたからpostgresqlとかだったらきついな..まあスポンサーにmysqlがいるからないか」とか思っていたらまさかのmysql+sqliteでびっくり auto_incrementのところも何か変なコードがあるなぁとは思っていたのですが、料金表とリーダーボード表示の箇所にばかり気を取られていたので全然見れませんでした 講評で「インデックスを貼ればdbの負荷がひとまずは下がる」ようなことが言われていて、もう少しDB周りを重点的に確認すれば良かったです。見ていた箇所のクエリのインデックスは確認していたつもりだったのですがそうではなく、出てきたスロークエリに対してインデックスが効いているかを見ておくべきでした lockがやたら多いのも気にはなっていたのですが、トランザクションを使う箇所というのが出てきませんでした。ただの知見不足です ユースケース図を書いていたのですが、アプリの全体像を網羅的に把握するのに役立ちました。アプリケーションとdbのやりとり周りも何かしらの方法でスムーズに把握できるようになれると良かったのですが その他感想 isucon11予選問題を解いていた時はアプリケーションの使用の仕様が難しく、何やっていいか全く分からない状態でした。それに比べたら今回の問題はまだその辺りの把握はしやすかったです ポータルサイトがどんなものかずっと見てみたかったので感動しました。終わった後速攻で選手用ページが見れなくなってしまい、ベンチマークのログやダッシュボードのスクショを取り損ねてしまいました 終わった後眼精疲労でくたくたで、速攻でpc閉じてしまったのですが、DCの方では感想戦で盛り上がっていて他の参加者のバイタリティの高さを感じました。翌朝読み返していて面白く、復習時の参考にまた読み返そうと思います 集中力は8h意外と持ちました。1h~1h30minにつき5minの休憩を無理やり設けるようにして良かったです おわりに 無念 : 楽しかった！ が 6:4の気持ちです。\nあと目と手と頭が足りないです。本戦一人出場している人の凄さを実感します。私がアプリケーション側でもう少しまともに戦えるようになったら、次回は誰か誘ってみるのもありかもなと思えてしまいました。\n今年もPythonでの本戦出場選手は出なかったのでPythonで狙いたいなと思う反面、業務で触らないgoの勉強の口実にしたいという気持ちのが強いので、来年はgoで10000点以上出すことを目標に出てみたいと思います。ベンチマーカーがgoで書かれていて、その辺りの処理ももう少し読めるようになりたいんですよね。\n運営の皆様、開催ありがとうございました。\nhttps://github.com/reiichii/isucon12-qualify\n計測ログ\n","date":"2022-07-24T14:06:01+09:00","image":"https://reiichii.github.io/post/2022-07-24-14/score_graph_hu1c45c6ba752b88bcb48fca24fcaa2fcb_322845_120x120_fill_box_smart1_3.png","permalink":"https://reiichii.github.io/post/2022-07-24-14/","title":"isucon12予選参加した"},{"content":"ISUCON11予選環境構築時、構築したアプリケーションでログインしようとすると「このサイトにアクセスできません」が表示されます。また遷移先urlが「http://localhost:5000/?callback=https://isucondition.t.isucon.dev」のようにおかしな表示になります。\n前提として以下の手順を参考に、クラウド環境にアプリケーションを構築し、トップページが開けるところまでを確認済みです。\nISUCON過去問題の環境を「さくらのクラウド」で構築する | さくらのナレッジ\nやること1. JIA API Mockを起動する アプリケーションマニュアルの末尾に書いてあるのですが、サーバの5000portで一部のリクエストを待ち受けるようになっているみたいです。\n実際urlからも分かる通り、apiのログイン時に5000portに飛ばすようになっています。該当コードは以下です。\nhttps://github.com/isucon/isucon11-qualify/blob/main/webapp/frontend/src/components/Home/Auth.tsx#L6\n自動起動はしないため、マニュアルに書いてある手順でモックのサービスを起動してあげます。\nやること2. ポートフォワーディングの設定 このままだとアプリケーションした際にローカル環境の「localhost:5000」にアクセスされてしまいます。\nローカル環境の5000にアクセスされたら、リモートサーバの5000にアクセスされるようにポートフォワーディングの設定をしておきます。\nssh -A -L 5000:{ip}:5000 {user}@{ip}\nssh接続した状態で「JIAのアカウントでログイン」を押すと、「Sign in with JIA」の画面が開き、ユーザー名とパスワードを入力してログイン後の画面にすすめるようになります👏\nおわりに 分かる人には分かるのかもしれませんが、これは構築手順書に説明があった方が親切なような気がしました。\nちなみにこの辺の仕様について話されているissueも発見しました。完全に理解はしていません..。\nhttps://github.com/isucon/isucon11-qualify/issues/1260\n","date":"2022-07-13T22:21:31+09:00","permalink":"https://reiichii.github.io/post/2022-07-13-22/","title":"isucon11-qualifyのログインページが開かなかった"},{"content":"ISUCONハンズオン目的で申し込んだのですが、去年一昨年の事前講習レポートには書いていない内容が盛り込まれていて普通に楽しかったです。\nISUCON12 事前講習 - Speaker Deck\nほぼ資料に書いてあるのですが、記念に手元のメモも残します。\n## 強いチームがしていること * なんとなくで手を動かさない。 - 優勝者インタビューで「何が効いたのかわからない」というチームはいない * デプロイのリードタイムをに1分以上かけない - GUIでgit操作しがちなご時世だけど、gitコマンドを使った方がいいよ * 使い慣れたミドルウェアのconfigを1から書かない - 事前に用意しておく * やったことがないことをやらない - 大会中に実務で触っていないgoに移植しようとしてボロ負けした経験がある なんとなく手を動かすな、仮説をベースに動くことはisucon以外の仕事でも言える。\n## タイムライン 10:00 * マニュアルとレギュレーションを読む * ブラウザでサービスを見て、アプリケーションを把握する * 各コンポートネントがどう起動されているか、設定やconfigの場所を確認 - init.dかsystemcnfかdockerかなど * 自分が必要なruntimeをさっとインストールできるようにしておく * dbスキーマがどう定義されているか調べる * デプロイ方法を構築する * 使われているミドルウェアの種類とバージョンを調べる - 過去にmemcacheかと思ったらmemcacheのplaginを入れたmysqlでそれがすごく重い、という罠があったらしい * 使っているサーバのスペックを各台調査する - サーバによってスペックが異なるケースがある * ベンチマークを実行する 11:00 * 得点源が何かを確認する * 減点の要因を把握する * プロファイリングツールを入れる * 初期状態の完全なバックアップを作成する - tarで固めておく 12:00 * ちゃんとご飯を食べる * わからないことが出たらリストにしておく * やること、やらないことを明確にする 13:00 * デプロイが1コマンドでできるように * デプロイ→性能計測→プロファイルまで一気通貫で行える仕組みを用意しておく - line_profile - リクエスト単位　どちらも 14:00~17:00 * 1コミット1ベンチマーク * 気にする指標を明確に把握してプロファイルする 17:00 * 再起動試験をする * apmを入れていたら停止する - newrelicのapm止めるの意外と難しかったりする * デバックログの出力を止める * プロファイル用に差し込んだものを止める 18:00 * 作業ログをブログに書く準備をする * 記憶が明確な間に振り返りをする 優勝経験チームの行動をトレスしたタイムラインは、考え方など参考にできるところが多い貴重な資料です。\n前にisucon11予選過去問に挑戦した時、私の場合マニュアルとレギュレーションを読むだけで1時間はかかったので10:00代きっっっつて思いながら聞いていました🙂\n### おすすめの練習 * デプロイ方法セットアップ - リポジトリ作って、git initして、チェックインして、deploy * ansibleを最速で回せるようになっておく * ベンチマークから集計を1コマンドでできるようにする - 集計スクリプトを作っておく * サーバの役割変更 - 起動を止める(systemctlならdisableし忘れない)、接続先を変更する * 使いたいツールのインストール - 使いたいツールは一発で入れられるようにする(alp,pt-query-digest) - prebuilt binaryが用意できるなら用意するのも手 もし今年出れるなら、最低限これだけは準備していきたい。\nまた最後に同じ問題5回くらい解くと、新しい発見があって楽しいよといったこともあって、また過去問解き直そうと思いました。\nちなみにまだ参加申し込みできていませんorz\n","date":"2022-06-07T20:56:13+09:00","permalink":"https://reiichii.github.io/post/2022-06-07-20/","title":"ISUCON12事前講習"},{"content":"\n1年ほど前にこしらえた自作キーボードでpc作業を行なっています。\n久しぶりにキーマップを変えようと思ったらびっくりするくらいやり方を忘れており、思い出すのに結構時間が掛かったため未来の自分用に忘備録としてやり方を残しておきます。\n【自作キーボード】Sparrow62を組み立てた\nやること キーマップの設計 キーボードのfirmwareに書き込む キーマップの設計 キーマップの設計は、QMK ConfiguratorというWebアプリからGUIで行います。\n前の設定を読み込ませる KEYBOARDを自分が使っているものに選択する urlからjsonをアップロードするボタンを押下し、keymap.json（以前の設定時にexportしておいたもの）のrowファイルのurlを読み込ませる 画面ぽちぽちでキーマップの配置を変更する 右上のCOMPILEボタンを押下する 右下のFIRMWAREボタンを押下し、hexファイルをダウンロードする 後の作業のために、この画面はまだ閉じないでおく。\n参考：（初心者編）QMK Configuratorを使ってキーマップを書き換えよう - 自作キーボード温泉街の歩き方\nキーボードのfirmwareに書き込む ローカルPCにインストール済みのQMK Toolboxに先ほどのhexファイルを読み込ませ、キーボードのfirmwareに書き込みます。キーボードは左右繋げたままにして、左右それぞれに書き込みをします。\nQMK Toolboxを開く 先ほどダウンロードしたhexファイルを読み込ませる autoreloadにチェックをする キーボードのリセットボタンを1度押下する 書き込みが始まり、「done. thank you. disconnect」の文言が出たら無事成功 反対のキーボードにケーブルを差し、3と4を行う QMK ConfiguratorのTEST KEYBOARDでキーボードのボタンに意図した変更が反映されていることを確認する。\n参考：（初心者編）自作キーボードにファームウェアを書き込む - 自作キーボード温泉街の歩き方\n後片付け QMK Configuratorでjsonファイルをexportしておく（次回また読み込ませるため） PRINT KEYMAPで画像をスクショしておく（稀にボタンの配置がどうなっていたのか見返したくなるため） 上記をkeymapリポジトリに反映させておく おわりに 初回は設定で精一杯で運用(?)のことを全然考えていなかったので、「あれjsonファイル出力してたっけ」「キーマップの画像をスクショしておいたはずなんだけどどこやったっけ」なんてわたわたしていました。githubに上げておけば家からでも会社からでもキーマップ確認できるし、これできっと一安心😌\n","date":"2022-06-05T16:19:27+09:00","image":"https://reiichii.github.io/post/2022-06-05-16/img_keymap_hu50b55d9f2e639c377323533322f7b495_75174_120x120_fill_box_smart1_3.png","permalink":"https://reiichii.github.io/post/2022-06-05-16/","title":"キーマップ変更する時の手順"},{"content":"はてなからHugoで立てたブログに引っ越しました。\n大きな理由としては、以前のブログの見た目が気に入らなかった（カスタマイズのコストが高い）ことと、vscodeとmarkdownでブログ書きたかったというのが主です。\nデプロイ先はNetlifyを使おうか悩んだのですが、ブログの目的がアウトプットの習慣付けが主で、アクセス数稼ぎに力を入れていないことと、普段業務でGitLabを使うことが多かったので、GitHub PagesやCICDをちょっと触ってみたいなというのもあり、ミニマムにGitHub Pagesで始めてみることにしました。後から乗り換えることもできなくはないですし。その場合ドメイン変わってしまいますが個人ブログでリスクもないので気の向くままにやっていく方針で😌\n既存のブログと記事は特にexportせずそのまま残しておく予定です。（もしかしたら戻る可能性もなくはないので）\nこれからもマイペースに続けていきたいと思います。\n以前のブログ\n","date":"2022-05-27T17:01:55+09:00","image":"https://reiichii.github.io/post/2022-05-27-16/IMG_8179_hu05940ea99d8537e6bd20faf24b516d8b_1077440_120x120_fill_q75_box_smart1.jpg","permalink":"https://reiichii.github.io/post/2022-05-27-16/","title":"ブログ引っ越した"}]