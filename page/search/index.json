[{"content":"ISUCONハンズオン目的で申し込んだのですが、去年一昨年の事前講習レポートには書いていない内容が盛り込まれていて普通に楽しかったです。\nISUCON12 事前講習 - Speaker Deck\nほぼ資料に書いてあるのですが、記念に手元のメモも残します。\n## 強いチームがしていること * なんとなくで手を動かさない。 - 優勝者インタビューで「何が効いたのかわからない」というチームはいない * デプロイのリードタイムをに1分以上かけない - GUIでgit操作しがちなご時世だけど、gitコマンドを使った方がいいよ * 使い慣れたミドルウェアのconfigを1から書かない - 事前に用意しておく * やったことがないことをやらない - 大会中に実務で触っていないgoに移植しようとしてボロ負けした経験がある なんとなく手を動かすな、仮説をベースに動くことはisucon以外の仕事でも言える。\n## タイムライン 10:00 * マニュアルとレギュレーションを読む * ブラウザでサービスを見て、アプリケーションを把握する * 各コンポートネントがどう起動されているか、設定やconfigの場所を確認 - init.dかsystemcnfかdockerかなど * 自分が必要なruntimeをさっとインストールできるようにしておく * dbスキーマがどう定義されているか調べる * デプロイ方法を構築する * 使われているミドルウェアの種類とバージョンを調べる - 過去にmemcacheかと思ったらmemcacheのplaginを入れたmysqlでそれがすごく重い、という罠があったらしい * 使っているサーバのスペックを各台調査する - サーバによってスペックが異なるケースがある * ベンチマークを実行する 11:00 * 得点源が何かを確認する * 減点の要因を把握する * プロファイリングツールを入れる * 初期状態の完全なバックアップを作成する - tarで固めておく 12:00 * ちゃんとご飯を食べる * わからないことが出たらリストにしておく * やること、やらないことを明確にする 13:00 * デプロイが1コマンドでできるように * デプロイ→性能計測→プロファイルまで一気通貫で行える仕組みを用意しておく - line_profile - リクエスト単位　どちらも 14:00~17:00 * 1コミット1ベンチマーク * 気にする指標を明確に把握してプロファイルする 17:00 * 再起動試験をする * apmを入れていたら停止する - newrelicのapm止めるの意外と難しかったりする * デバックログの出力を止める * プロファイル用に差し込んだものを止める 18:00 * 作業ログをブログに書く準備をする * 記憶が明確な間に振り返りをする 優勝経験チームの行動をトレスしたタイムラインは、考え方など参考にできるところが多い貴重な資料です。\n前にisucon11予選過去問に挑戦した時、私の場合マニュアルとレギュレーションを読むだけで1時間はかかったので10:00代きっっっつて思いながら聞いていました🙂\n### おすすめの練習 * デプロイ方法セットアップ - リポジトリ作って、git initして、チェックインして、deploy * ansibleを最速で回せるようになっておく * ベンチマークから集計を1コマンドでできるようにする - 集計スクリプトを作っておく * サーバの役割変更 - 起動を止める(systemctlならdisableし忘れない)、接続先を変更する * 使いたいツールのインストール - 使いたいツールは一発で入れられるようにする(alp,pt-query-digest) - prebuilt binaryが用意できるなら用意するのも手 もし今年出れるなら、最低限これだけは準備していきたい。\nまた最後に同じ問題5回くらい解くと、新しい発見があって楽しいよといったこともあって、また過去問解き直そうと思いました。\nちなみにまだ参加申し込みできていませんorz\n","date":"2022-06-07T20:56:13+09:00","permalink":"https://reiichii.github.io/post/2022-06-07-20/","title":"ISUCON12事前講習"},{"content":"\n1年ほど前にこしらえた自作キーボードでpc作業を行なっています。\n久しぶりにキーマップを変えようと思ったらびっくりするくらいやり方を忘れており、思い出すのに結構時間が掛かったため未来の自分用に忘備録としてやり方を残しておきます。\n【自作キーボード】Sparrow62を組み立てた\nやること キーマップの設計 キーボードのfirmwareに書き込む キーマップの設計 キーマップの設計は、QMK ConfiguratorというWebアプリからGUIで行います。\n前の設定を読み込ませる KEYBOARDを自分が使っているものに選択する urlからjsonをアップロードするボタンを押下し、keymap.json（以前の設定時にexportしておいたもの）のrowファイルのurlを読み込ませる 画面ぽちぽちでキーマップの配置を変更する 右上のCOMPILEボタンを押下する 右下のFIRMWAREボタンを押下し、hexファイルをダウンロードする 後の作業のために、この画面はまだ閉じないでおく。\n参考：（初心者編）QMK Configuratorを使ってキーマップを書き換えよう - 自作キーボード温泉街の歩き方\nキーボードのfirmwareに書き込む ローカルPCにインストール済みのQMK Toolboxに先ほどのhexファイルを読み込ませ、キーボードのfirmwareに書き込みます。キーボードは左右繋げたままにして、左右それぞれに書き込みをします。\nQMK Toolboxを開く 先ほどダウンロードしたhexファイルを読み込ませる autoreloadにチェックをする キーボードのリセットボタンを1度押下する 書き込みが始まり、「done. thank you. disconnect」の文言が出たら無事成功 反対のキーボードにケーブルを差し、3と4を行う QMK ConfiguratorのTEST KEYBOARDでキーボードのボタンに意図した変更が反映されていることを確認する。\n参考：（初心者編）自作キーボードにファームウェアを書き込む - 自作キーボード温泉街の歩き方\n後片付け QMK Configuratorでjsonファイルをexportしておく（次回また読み込ませるため） PRINT KEYMAPで画像をスクショしておく（稀にボタンの配置がどうなっていたのか見返したくなるため） 上記をkeymapリポジトリに反映させておく おわりに 初回は設定で精一杯で運用(?)のことを全然考えていなかったので、「あれjsonファイル出力してたっけ」「キーマップの画像をスクショしておいたはずなんだけどどこやったっけ」なんてわたわたしていました。githubに上げておけば家からでも会社からでもキーマップ確認できるし、これできっと一安心😌\n","date":"2022-06-05T16:19:27+09:00","image":"https://reiichii.github.io/post/2022-06-05-16/img_keymap_hu50b55d9f2e639c377323533322f7b495_75174_120x120_fill_box_smart1_3.png","permalink":"https://reiichii.github.io/post/2022-06-05-16/","title":"キーマップ変更する時の手順"},{"content":"はてなからHugoで立てたブログに引っ越しました。\n大きな理由としては、以前のブログの見た目が気に入らなかった（カスタマイズのコストが高い）ことと、vscodeとmarkdownでブログ書きたかったというのが主です。\nデプロイ先はNetlifyを使おうか悩んだのですが、ブログの目的がアウトプットの習慣付けが主で、アクセス数稼ぎに力を入れていないことと、普段業務でGitLabを使うことが多かったので、GitHub PagesやCICDをちょっと触ってみたいなというのもあり、ミニマムにGitHub Pagesで始めてみることにしました。後から乗り換えることもできなくはないですし。その場合ドメイン変わってしまいますが個人ブログでリスクもないので気の向くままにやっていく方針で😌\n既存のブログと記事は特にexportせずそのまま残しておく予定です。（もしかしたら戻る可能性もなくはないので）\nこれからもマイペースに続けていきたいと思います。\n以前のブログ\n","date":"2022-05-27T17:01:55+09:00","image":"https://reiichii.github.io/post/2022-05-27-16/IMG_8179_hu05940ea99d8537e6bd20faf24b516d8b_1077440_120x120_fill_q75_box_smart1.jpg","permalink":"https://reiichii.github.io/post/2022-05-27-16/","title":"ブログ引っ越した"}]