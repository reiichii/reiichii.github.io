<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on 日々のあれこれφ(．．)</title><link>https://reiichii.github.io/categories/tech/</link><description>Recent content in tech on 日々のあれこれφ(．．)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 10 Oct 2022 12:30:14 +0900</lastBuildDate><atom:link href="https://reiichii.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>TyperとPoetryでcliを作って公開するまでの流れ</title><link>https://reiichii.github.io/post/2022-10-10-12/</link><pubDate>Mon, 10 Oct 2022 12:30:14 +0900</pubDate><guid>https://reiichii.github.io/post/2022-10-10-12/</guid><description>&lt;p>cliを作りたかったというよりは、FastAPIの兄弟ツールTyperを触ってみたかったのと、Pythonでcliを作る流れを思い出したかったのが動機です。ですのでtodolistは最小限の機能だけを持っています。&lt;/p>
&lt;p>最後にcliを作ったのはPython初めて1年目くらいの頃で、その頃はまだPoetryも触っておらず、setup.py書くの大変だったという記憶しかなかったのですが、今はこんなに手軽に作れてしまうんだなと感動でした。&lt;/p>
&lt;h2 id="poetryでパッケージを作成する">Poetryでパッケージを作成する&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Poetryでプロジェクトの雛形を作成します&lt;/p>
&lt;pre tabindex="0">&lt;code>poetry new python_cli_todo
.
├── README.md
├── pyproject.toml
├── r_todolist
│ └── __init__.py
└── tests
└── __init__.py
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>作成したライブラリに必要なパッケージをインストールします。&lt;/p>
&lt;pre tabindex="0">&lt;code>poetry add typer[all]
&lt;/code>&lt;/pre>&lt;p>今回はTyperだけです。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pyproject.tomlにcli用の設定を追記&lt;/p>
&lt;pre tabindex="0">&lt;code>[tool.poetry.scripts]
todo = &amp;#34;r_todolist.main:app&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;code>todo&lt;/code>コマンドで動くようになっています&lt;/p>
&lt;/li>
&lt;li>
&lt;p>サンプルコードを載せておく&lt;/p>
&lt;p>動作確認をした後実装する予定なので、今は公式ドキュメントの以下のコードを配置しておきます。&lt;/p>
&lt;p>&lt;a class="link" href="https://typer.tiangolo.com/tutorial/package/#create-your-app" target="_blank" rel="noopener"
>https://typer.tiangolo.com/tutorial/package/#create-your-app&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>仮想環境内でcliを実行してみる&lt;/p>
&lt;pre tabindex="0">&lt;code>poetry install
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ poetry run todo load
Loading portal gun
$ poetry run todo shoot
Shooting portal gun
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="アプリケーションの実装">アプリケーションの実装&lt;/h2>
&lt;p>今回実装するtodolistはCRUD4つのサブコマンドを持つものです。DBはSQLite3を使います。各サブコマンドの細かい出力例は&lt;a class="link" href="https://github.com/reiichii/python-todolist-cli#%E4%BB%95%E6%A7%98" target="_blank" rel="noopener"
>README&lt;/a>に記載してあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>add&lt;/code>: タスクの追加&lt;/li>
&lt;li>&lt;code>ls&lt;/code>: タスクの一覧参照(デフォルトで未完了のもの・オプションで完了済みのものを表示できる)&lt;/li>
&lt;li>&lt;code>done&lt;/code>: 完了したタスクを完了済みにする&lt;/li>
&lt;li>&lt;code>rm&lt;/code>: タスクの削除(複数指定可)&lt;/li>
&lt;/ul>
&lt;h3 id="typerについて">Typerについて&lt;/h3>
&lt;p>&lt;a class="link" href="https://typer.tiangolo.com/" target="_blank" rel="noopener"
>https://typer.tiangolo.com/&lt;/a>&lt;/p>
&lt;p>FastAPIの作者が作ったcliを作成するためのライブラリになります。作者曰く兄弟ライブラリとのことで、FastAPIの要素である「型定義してエディタのサポートを受け開発効率を上げる」をcli開発時にも実現する設計思想のようです。ただしPydanticではなくClickパッケージをベースに実現させているようでした。&lt;/p>
&lt;p>他にもcli出力時にstyleを良い感じにしてくれるrichというライブラリや、パッケージをインストールしたときに自動で実行環境のシェルに合う形で自動補完設定を追記してくれる機能がついていたりなど、色々充実していました。&lt;/p>
&lt;p>以下ではTyper周りの部分だけ抜粋する形で取り上げています。コードの全体は&lt;a class="link" href="https://github.com/reiichii/python-todolist-cli/blob/main/r_todolist/main.py" target="_blank" rel="noopener"
>main.py&lt;/a>の1ファイルに全部収まっています。&lt;/p>
&lt;h3 id="addサブコマンド">addサブコマンド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> typer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> rich &lt;span style="color:#f92672">import&lt;/span> print
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Typer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.command&lt;/span>() &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task: str &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Option( &lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prompt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, &lt;span style="color:#75715e"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;what you have to do.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show_default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;send a email&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> add task to list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#f92672">.&lt;/span>insert_task(task)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;[green]added.[/green]&amp;#34;&lt;/span>) &lt;span style="color:#75715e"># 5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;code>@app.command()&lt;/code> でサブコマンドを関数として定義できる&lt;/li>
&lt;li>Typerの基本的な挙動として、関数の引数にデフォルト値を含めなければcli実行時の必須のパラメータになり、デフォルト値を指定すればcli実行時のoptionを作ることができる&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>例えばadd関数の例では、上記の定義をすれば &lt;code>--task&lt;/code> というoptionが使えるようになっており、&lt;code>--task&lt;/code>で指定した値がtask変数に渡される&lt;/li>
&lt;li>今回はoptionで指定しているが、デフォルト値を省略しているため必須項目としてhelpの表示が出たり、バリデーションが走るようになっている&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;code>typer.Option()&lt;/code>や &lt;code>typer.Arguments()&lt;/code>を使えば、引数により詳細な設定を追加することができる&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>例えば&lt;code>prompt=True&lt;/code>にしていることで、この関数ではtaskの入力を対話形式で入力できる&lt;/li>
&lt;li>&lt;code>help&lt;/code>パラメータで、&lt;code>--help&lt;/code>した時にこのオプションの説明を追加することができる&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>docstringで定義した文章は、&lt;code>--help&lt;/code>時にそのままサブコマンドの説明として表示される&lt;/li>
&lt;li>richライブラリの機能で、文字を緑色で表示させる。&lt;/li>
&lt;/ol>
&lt;h3 id="lsサブコマンド">lsサブコマンド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> typer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> rich &lt;span style="color:#f92672">import&lt;/span> print
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Typer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.command&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ls&lt;/span>(done: bool &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Option(&lt;span style="color:#66d9ef">False&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Show only DONE tasks.&amp;#34;&lt;/span>)): &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> show incomplete tasks.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task_lists &lt;span style="color:#f92672">=&lt;/span> db&lt;span style="color:#f92672">.&lt;/span>get_lists(done)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> l &lt;span style="color:#f92672">in&lt;/span> task_lists:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is_done &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\[x]&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> l&lt;span style="color:#f92672">.&lt;/span>is_done &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;[]&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;- &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>is_done&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>l&lt;span style="color:#f92672">.&lt;/span>id&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">. &amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>l&lt;span style="color:#f92672">.&lt;/span>task&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>lsサブコマンドのデフォルトの引数を &lt;code>False&lt;/code> に設定している。この定義をした時点で &lt;code>--done&lt;/code> というoptionが使えるようになっており、これを指定するとTrueが渡される&lt;/li>
&lt;li>markdownのチェックボックス形式でタスク一覧を表示させるようにしたかったが、&lt;code>[x]&lt;/code>のように書いてしまうとrichの機能と競合して表示されなかった&lt;/li>
&lt;/ol>
&lt;h3 id="doneサブコマンド">doneサブコマンド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.command&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">done&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: int &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Argument( &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Select task id&amp;#34;&lt;/span>, metavar&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TASK_ID&amp;#34;&lt;/span>, show_default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> check the task
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task &lt;span style="color:#f92672">=&lt;/span> db&lt;span style="color:#f92672">.&lt;/span>done_task(id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>task&lt;span style="color:#f92672">.&lt;/span>id&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">. &amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>task&lt;span style="color:#f92672">.&lt;/span>task&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34; is done:tada:&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>task_idが必須項目になるので &lt;code>typer.Argument(...)&lt;/code>で定義した&lt;/li>
&lt;li>metavarパラメータでhelpの表示時を指定できる。また関数のデフォルト値ではなく、helpに表示するときのデフォルト値を&lt;code>show_default&lt;/code>で変えられる&lt;/li>
&lt;li>richの機能で絵文字が表示させることができる&lt;/li>
&lt;/ol>
&lt;h3 id="rmコマンド">rmコマンド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.command&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">rm&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ids: List[int] &lt;span style="color:#f92672">=&lt;/span> typer&lt;span style="color:#f92672">.&lt;/span>Argument( &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Select task_ids separated by spaces.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show_default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1 2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metavar&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TASK_ID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> delete the tasks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db&lt;span style="color:#f92672">.&lt;/span>delete_ids(ids)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;removed: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join([str(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> ids])&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>スペース区切りで入力したcliの引数値を、配列として渡すことができる&lt;/li>
&lt;/ol>
&lt;h2 id="pypiへ公開する">PyPIへ公開する&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>PyPIへログインし、API tokenを発行する&lt;/p>
&lt;p>ちなみにAPI tokenを発行する際にはscopeを選択するのですが、プロジェクトがない状態だと全プロジェクトしか選択できません。ただプロジェクトをpublishした後にプロジェクトの管理画面からスコープをプロジェクトに限定したAPI tokenが発行できるようでした。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PoetryにPyPIのAPI tokenを設定する&lt;/p>
&lt;pre tabindex="0">&lt;code>$ poetry config pypi-token.pypi {API TOKEN}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>publishする&lt;/p>
&lt;pre tabindex="0">&lt;code>poetry publish --build
&lt;/code>&lt;/pre>&lt;p>publishしたらもう公開されており、pip installでインストールできるようになっています。また更新はpyproject.tomlで設定しているversionを更新して再度同じコマンドを実行する必要があります。&lt;/p>
&lt;p>&lt;a class="link" href="https://pypi.org/project/r-todolist/" target="_blank" rel="noopener"
>https://pypi.org/project/r-todolist/&lt;/a> 🎉&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://typer.tiangolo.com/tutorial/package/" target="_blank" rel="noopener"
>Building a Package - Typer&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>ISUCON12予選問題解き直し2</title><link>https://reiichii.github.io/post/2022-09-04-22/</link><pubDate>Sun, 04 Sep 2022 22:28:00 +0900</pubDate><guid>https://reiichii.github.io/post/2022-09-04-22/</guid><description>&lt;p>&lt;a class="link" href="http://localhost:1313/post/2022-08-27-15/" target="_blank" rel="noopener"
>前回の記事&lt;/a>の続きです。&lt;/p>
&lt;p>&lt;a class="link" href="https://isucon.net/archives/56842718.html" target="_blank" rel="noopener"
>ISUCON12 予選の解説 (Node.jsでSQLiteのまま10万点行く方法) : ISUCON公式Blog&lt;/a>を参考にPythonで解き直していました。アプリケーションサーバを分ける手前まで改善したのですがmax6500点までしかいかず、分けても10万点どころか予選突破相当の24000点に届くかさえ怪しかったので頓挫しました。&lt;/p>
&lt;p>追加で実施できたもの&lt;/p>
&lt;ul>
&lt;li>tenantDB player_scoreにINDEXをはる&lt;/li>
&lt;li>Ranking APIでランキング集計するのをやめる&lt;/li>
&lt;/ul>
&lt;p>自分で追加で行ったこと&lt;/p>
&lt;ul>
&lt;li>scoreエンドポイントのトランザクション見直し&lt;/li>
&lt;li>Finish APIでBillingReportを生成する の修正&lt;/li>
&lt;li>lockによるエラーが多発したので一旦timeoutを伸ばす&lt;/li>
&lt;li>players/addの改善&lt;/li>
&lt;/ul>
&lt;p>実施しなかったもの&lt;/p>
&lt;ul>
&lt;li>AddTenant APIでSQLite DBを作るのをやめる&lt;/li>
&lt;li>nginxで複数台に振り分ける&lt;/li>
&lt;li>nginxをupstream keepaliveする&lt;/li>
&lt;li>MySQLをちょっとチューニングする&lt;/li>
&lt;/ul>
&lt;h2 id="scoreエンドポイントのトランザクション見直し">scoreエンドポイントのトランザクション見直し&lt;/h2>
&lt;p>整合性チェック時に3回に1回くらいの頻度でエラーが発生していたので修正に着手しました。
AUTOCOMMITの設定がちゃんと効いていなかった模様。sqlalchemyはデフォルトでautocommitが効いており、scoreの時だけ設定を上書きするようにしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/91045ac410fa11ce0fbf7b6bfabf3b08bfe9a3f1" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>エラー解消が目的だったのでスコアに影響はありませんでした。&lt;/p>
&lt;p>参考&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.sqlalchemy.org/en/14/orm/session_transaction.html#setting-isolation-for-individual-transactions" target="_blank" rel="noopener"
>Transactions and Connection Management — SQLAlchemy 1.4 Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://qiita.com/tosizo/items/7a3e2d5b6f2f34867274" target="_blank" rel="noopener"
>SQLAlchemyのautocommitについて - Qiita&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="finish-apiでbillingreportを生成する-の修正">Finish APIでBillingReportを生成する の修正&lt;/h2>
&lt;p>整合性チェックは通るのですがベンチマーク全体の中で1~3回ほど &lt;code>GET /api/organizer/billing 請求レポートの数が違います (want: 5, got: 1)のようなエラーが出る。&lt;/code> のようなエラーが出る状態でした。&lt;/p>
&lt;p>終わっていない大会の情報も出してあげる必要があったのですが、それらの情報がDBには存在していないのが原因でした。存在しなければscore等を0を入れてレスポンスデータを生成します。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/9a515f9acb6249dabdc8f1752bbc2f4a56517e5c" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>上記二つを行なってエラーもなくなり、スコアが安定するようになりました。ただし負荷走行中にSQLite3でlockエラーが多発するようになりました。&lt;/p>
&lt;h2 id="tenantdb-player_scoreにindexをはる">tenantDB player_scoreにINDEXをはる&lt;/h2>
&lt;p>初期化時にinitial_dataをtenant_db配下にコピーしているのでinitial_dataのテーブルに対してINDEXを追加します。
テナントごとにdbがあるのでシェルでまとめて適用してあげます（ブログに書いてあったコマンドをそのまま実行しました）&lt;/p>
&lt;p>クエリ：&lt;code>create index idx_score on player_score (tenant_id, competition_id, player_id);&lt;/code>&lt;/p>
&lt;p>&lt;code>for db in *.db; do echo &amp;quot;CREATE INDEX...&amp;quot; | sqlite3 $db; done&lt;/code>&lt;/p>
&lt;p>ちなみにplayer_score以外のテーブルはデータ量が100件程度しかなく、貼っても意味なさそうなのでそのままにしました。
SQLite3の実行計画は クエリの頭に&lt;code>EXPLAIN QUERY PLAN&lt;/code> を付けます。&lt;/p>
&lt;pre tabindex="0">&lt;code># player/&amp;lt;player_id&amp;gt;時
EXPLAIN QUERY PLAN SELECT c.title AS title, p.score AS score
FROM player_score AS p
INNER JOIN competition AS c ON c.id = p.competition_id
WHERE c.tenant_id = ?
AND p.player_id = ?
ORDER BY c.created_at ASC
# 結果
|--SCAN p
|--SEARCH c USING INDEX sqlite_autoindex_competition_1 (id=?)
`--USE TEMP B-TREE FOR ORDER BY
&lt;/code>&lt;/pre>&lt;p>点数は500点ほど上がったのですが、それ以上にDBのlockによるエラーがひどく、41%失点している有様でした。&lt;/p>
&lt;h2 id="lockによるエラーが多発したので一旦timeoutを伸ばす">lockによるエラーが多発したので一旦timeoutを伸ばす&lt;/h2>
&lt;p>タイムアウトを伸ばすしか思い浮かばなかったのでデフォルト値を調べてみることにしました。&lt;/p>
&lt;p>ソースコードを見た感じPythonのSQLite3の標準ライブラリの設定がそのまま反映されているようでそれが5sでした。
30sに設定してみたところlockによる500エラーは大幅に減らせました。ただしclient側でconnection timeoutが発生しているのですがひとまず1件程度まで抑えられたので一旦よしとしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/74691d3703b159842f71a2c409156028e87b142b" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;h2 id="ranking-apiでランキング集計するのをやめる">Ranking APIでランキング集計するのをやめる&lt;/h2>
&lt;blockquote>
&lt;p>ranking APIの呼び出される回数とscoreが入稿される回数は10～20倍くらい差がある
rankingはscoreを入稿したときしか変わらない&lt;/p>
&lt;/blockquote>
&lt;p>言われてみれば確かに。&lt;/p>
&lt;p>大会中にこのボトルネックに気づいていたらまず間違いなくDELETE+bulk insertで対処していたと思うのですが、 &lt;code>ON DUPLICATE KEY UPDATE&lt;/code> を初めて知ったのでこっちで実装してみることにしました。&lt;/p>
&lt;ul>
&lt;li>ON DUPLICATE KEY UPDATE
&lt;ul>
&lt;li>ON DUPLICATE KEY UPDATE を指定した時、UNIQUEインデックスまたは PRIMARY KEY
 に重複した値を発生させる行が挿入された場合、mysqlによって古い行の値が実行される&lt;/li>
&lt;li>存在していればupdate する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>やることとしては以下です。&lt;/p>
&lt;ul>
&lt;li>rankingテーブルを作成する
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> ranking (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span> BIGINT UNSIGNED &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>rank&lt;span style="color:#f92672">`&lt;/span> INT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>score&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_display_name&lt;span style="color:#f92672">`&lt;/span> TEXT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> (&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>rank&lt;span style="color:#f92672">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) ENGINE&lt;span style="color:#f92672">=&lt;/span>InnoDB &lt;span style="color:#66d9ef">DEFAULT&lt;/span> CHARACTER &lt;span style="color:#66d9ef">SET&lt;/span>&lt;span style="color:#f92672">=&lt;/span>utf8mb4;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>row_numは不要だから消したと思われる。competition_idさえ分かればtenant_idはなくても良さそうに思える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>scoreエンドポイントでrankingを生成し、insertする&lt;/li>
&lt;li>初期化対応
&lt;ul>
&lt;li>が必要とのことでしたが、データを入れ直さなくてもベンチマークが通ったのでしませんでした。データが溜まっていってしまうのを防ぐために削除だけ行うように修正しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/2be866a002c2e71dbc2c8b94367c8b3f34b7ed4a" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>ベンチマークを何度か実行していたのですが6500~5600と振り幅が大きい&amp;hellip;。&lt;/p>
&lt;h2 id="playersaddの改善">players/addの改善&lt;/h2>
&lt;p>alpの結果を眺めていたら上記エンドポイントが異常に重たくなっていました。スコアログを見返すとflockをトランザクションにしたあたりからずっとひどい状態でした笑&lt;/p>
&lt;p>スコアが伸び悩んでいたのもあり、気になったので改善してみようとコードを読んだら、こちらもfor文の中で逐一クエリが発行されていました。sqliteの負荷が懸念だったのもあり以下のようにそれぞれまとめて取得してPython側で頑張るように修正しました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/3016f0fe8a3198163c6153168ae0159a892990da" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>alpを見た感じ改修の効果は得られた(25s→2sになった)のですが、点数には影響せず&amp;hellip;。&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>10万はいかなくとも2万くらいはいきたいなと思っていたのですが、今のまま複数台分散してもそこまで上がる見込みがなく、だれてきてしまったのもあり一旦一区切りにしようと思います😓&lt;/p>
&lt;p>全体の改善のログは以下に。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/issues/1" target="_blank" rel="noopener"
>スコア推移のログ · Issue #1 · reiichii/isucon12q-after&lt;/a>&lt;/p>
&lt;p>ISUCON11予選問題解説のやり方を参考に残していました。&lt;/p></description></item><item><title>ISUCON12予選問題解き直し</title><link>https://reiichii.github.io/post/2022-08-27-15/</link><pubDate>Sat, 27 Aug 2022 14:57:37 +0900</pubDate><guid>https://reiichii.github.io/post/2022-08-27-15/</guid><description>&lt;p>8月は&lt;a class="link" href="https://isucon.net/archives/56842718.html" target="_blank" rel="noopener"
>ISUCON12 予選の解説 (Node.jsでSQLiteのまま10万点行く方法) | ISUCON公式Blog&lt;/a>を見ながらISUCON12予選問題の解き直しをしていました。まだ全部施策をやり切れておらず、点数も上がりきってはいないのですが、1ヶ月経ったので途中までまとめることに。&lt;/p>
&lt;p>実施できたもの&lt;/p>
&lt;ul>
&lt;li>adminDB visit_history にINDEXを張る&lt;/li>
&lt;li>dispenseIDでMySQLを使うのをやめる&lt;/li>
&lt;li>Ranking APIのループクエリをなくす&lt;/li>
&lt;li>Score APIの追加のループクエリをなくす&lt;/li>
&lt;li>アトミック書き込みのためのflockをトランザクションに変更する(※怪しい)&lt;/li>
&lt;li>adminDB visit_historyの初期データをコンパクトにする&lt;/li>
&lt;li>db用サーバを投入し、2台構成にする&lt;/li>
&lt;li>Finish APIでBillingReportを生成する(※怪しい)&lt;/li>
&lt;li>Player APIをなんとかする&lt;/li>
&lt;/ul>
&lt;p>まだできていないもの&lt;/p>
&lt;ul>
&lt;li>tenantDB player_scoreにINDEXをはる&lt;/li>
&lt;li>Ranking APIでランキング集計するのをやめる&lt;/li>
&lt;li>AddTenant APIでSQLite DBを作るのをやめる&lt;/li>
&lt;li>nginxで複数台に振り分ける&lt;/li>
&lt;li>nginxをupstream keepaliveする&lt;/li>
&lt;li>MySQLをちょっとチューニングする&lt;/li>
&lt;/ul>
&lt;p>半分以上は実施しているのに未だ点数が6000点代という&amp;hellip;思ったより厳しかった。&lt;/p>
&lt;h2 id="admindb-visit_history-にindexを張る">adminDB visit_history にINDEXを張る&lt;/h2>
&lt;p>去年の問題ならinitialエンドポイントテーブルが作り直しているのでschemaにindexを追加していたのですが、今回は対象テーブルではdrop createは実行されていないのでここに書いても意味なかったという🙂&lt;/p>
&lt;p>covering indexという概念を初めて知りました。indexって貼れていればいいと思っていたのですが、張り方によっても性能(点数)に差が出てしまうんですね。せっかくなので3パターンで実行計画を比較してみました。&lt;/p>
&lt;pre tabindex="0">&lt;code># 既存
EXPLAIN SELECT player_id, MIN(created_at) AS min_created_at FROM visit_history WHERE tenant_id = 1 AND competition_id = &amp;#39;S&amp;#39; GROUP BY player_id;
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx | tenant_id_idx | 8 | const | 1292937 | 10.00 | Using where; Using temporary |
+----+-------------+---------------+------------+------+---------------+---------------+---------+-------+---------+----------+------------------------------+
# covering index
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx,idx_all_cover | idx_all_cover | 1030 | const,const | 1 | 100.00 | Using index |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------------+
# createdなし
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
| 1 | SIMPLE | visit_history | NULL | ref | tenant_id_idx,idx_all_cover | idx_all_cover | 1030 | const,const | 1 | 100.00 | NULL |
+----+-------------+---------------+------------+------+-----------------------------+---------------+---------+-------------+------+----------+-------+
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>indexを追加すると、possible_keys,keyにidx_all_coverが追加され、filteredが100%になる&lt;/li>
&lt;li>covering indexにすると、ExtraにUsing indexが表示される&lt;/li>
&lt;li>createdありとなしではスコアには200点ほど差がでた&lt;/li>
&lt;/ul>
&lt;p>mysqlのconvering indexとは&lt;/p>
&lt;ul>
&lt;li>クエリーによって取得されたすべてのカラムを含む&lt;em>&lt;strong>インデックス&lt;/strong>&lt;/em>&lt;/li>
&lt;li>検索を索引内で完結でき、表からデータを読み取る必要がないため効率が良い&lt;/li>
&lt;li>表のサイズがメモリに保持しきれないほど大きい場合の検索で有効&lt;/li>
&lt;/ul>
&lt;p>+500点ほど&lt;/p>
&lt;h2 id="dispenseidでmysqlを使うのをやめる">dispenseIDでMySQLを使うのをやめる&lt;/h2>
&lt;p>一意なidを生成するために以下のようにわざわざDBにアクセスしているが、これをuuidを生成するようにする&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/3409af51893bbda12ca68dc1ff1d1de914b0bb14" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>SQLの&lt;code>REPLACE INTO&lt;/code>とは&lt;/p>
&lt;ul>
&lt;li>基本INSERTと同じだが、テーブル内の古い行にprivary keyまたはuniqueインデックスに関して新しい行と同じ値が含まれている場合その古い行は新しい行が挿入される前に削除される&lt;/li>
&lt;li>挿入 or 削除と挿入　の違い&lt;/li>
&lt;/ul>
&lt;p>raise fromについて&lt;/p>
&lt;ul>
&lt;li>例外を連鎖することができる
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Python" data-lang="Python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">RuntimeError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to open database&amp;#34;&lt;/span>) &lt;span style="color:#f92672">from&lt;/span> e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>出力は以下：&lt;code>The above exception was the direct cause of the following exception&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Python" data-lang="Python">&lt;span style="display:flex;">&lt;span>Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;~/ghq/github.com/reiichii/isucon12q-after/tmp.py&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ConnectionError&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ConnectionError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The above exception was the direct cause of the following exception:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;/~/ghq/github.com/reiichii/isucon12q-after/tmp.py&amp;#34;&lt;/span>, line &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#f92672">in&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>module&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">RuntimeError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to open database&amp;#34;&lt;/span>) &lt;span style="color:#f92672">from&lt;/span> e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">RuntimeError&lt;/span>: Failed to open database
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>from を使わないと、&lt;code>During handling of the above exception, another exception occurred&lt;/code> のようになる&lt;/li>
&lt;/ul>
&lt;p>+200点ほど&lt;/p>
&lt;h2 id="ranking-apiのループクエリをなくす">Ranking APIのループクエリをなくす&lt;/h2>
&lt;p>リクエストの合計時間が一番長い /api/player/competition/&amp;lt;competition_id&amp;gt;/ranking をなんとかする。&lt;/p>
&lt;p>N+1になっているのでjoinを使う。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/62e3d7bd4bdaca3b14cc682e0bce6605de907014" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>+1000点になりました😳&lt;/p>
&lt;h2 id="score-apiの追加のループクエリをなくす">Score APIの追加のループクエリをなくす&lt;/h2>
&lt;blockquote>
&lt;p>rankingの次にレスポンスタイム合計が大きいのはscoreなので&lt;/p>
&lt;/blockquote>
&lt;p>Node.jsで解いていたブログ記事では上記のように書いてあったが、私の環境(Python)ではscoreよりも/api/player/player/&amp;lt;player_id&amp;gt; の方が重かったです。&lt;/p>
&lt;p>自分では最後のinsertのところをbulk insertにすればいいのかなと思っていたが、存在しないplayer_idを返す必要はないので数を比較するだけで十分という考えには至れませんでした。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/8f787574d5a847a7f1cc33dc7ecdb4e35a1403d8" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>こちらも+1000点ほど&lt;/p>
&lt;h2 id="アトミック書き込みのためのflockをトランザクションに変更する怪しい">アトミック書き込みのためのflockをトランザクションに変更する(※怪しい)&lt;/h2>
&lt;p>既存コードではテナントDB更新の際に、排他制御をするためにファイルをロックすることをしていますが、トランザクションを使うようにします。
delete-insertの部分をトランザクションにしてflockを外す。他のflockは参照のみなので外すだけで良かった。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/69b53bfb6318f46cdc0db67e38c1fb64271693a0" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>この部分を実装したところ、数回に1回整合性チェックが通らなくなりました😢おそらくトランザクションがちゃんと効いていない模様で、なんでか全然分からなかったのですがおそらくAuto Commitが効いてしまっているところに思い至ったのでこれから確認する段階です。&lt;/p>
&lt;p>そしてなぜか点数はそれほど上がらないどころか実行するたびに数百点の振り幅が出るように。&lt;/p>
&lt;h2 id="admindb-visit_historyの初期データをコンパクトにする">adminDB visit_historyの初期データをコンパクトにする&lt;/h2>
&lt;p>アプリケーションの作りがアクセスしたかどうかが分かればいいため、visit_historyのテナントID、大会ID、プレイヤーIDをgroup byしてmin(created_at) / min(updated_at)のデータのみが残るようにして重複したデータを減らす。&lt;/p>
&lt;p>ちなみに対象テーブルのMySQLの初期化の部分は以下のようになっていて、一定のデータが消えないようになっています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">DELETE&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> visit_history &lt;span style="color:#66d9ef">WHERE&lt;/span> created_at &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;1654041600&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>念の為既存データを残しておきたかったので、私は以下の手順で実施しました。&lt;/p>
&lt;ol>
&lt;li>一時テーブルを作成（visit_history_tmpとする）&lt;/li>
&lt;li>INSERT SELECT
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">INSERT&lt;/span> &lt;span style="color:#66d9ef">INTO&lt;/span> visit_history_tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> player_id, tenant_id, competition_id, &lt;span style="color:#66d9ef">MIN&lt;/span>(created_at), &lt;span style="color:#66d9ef">MIN&lt;/span>(updated_at)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> visit_history
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">GROUP&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>古いテーブルをrename
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RENAME&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> visit_history &lt;span style="color:#66d9ef">TO&lt;/span> visit_history_backup;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>一時テーブルをvisit_historyにrename
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RENAME&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> visit_history_tmp &lt;span style="color:#66d9ef">TO&lt;/span> visit_history;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>初期化時点の行数：3,224,839 → 削減後のデータ数：200,474（0.06%にまで削減された）&lt;/p>
&lt;p>ただし私の場合スコアは変わらず&lt;/p>
&lt;h2 id="db用サーバを投入し2台構成にする">DB用サーバを投入し、2台構成にする&lt;/h2>
&lt;p>ブログの方では複数台構成準備のための施策に突入するのですが、私は先にappとdbの二台構成にすることにしました。&lt;/p>
&lt;ul>
&lt;li>mysqlで他サーバからのアクセスを許容する&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>CREATE USER `isucon`@`192.168.%` IDENTIFIED BY &amp;#39;isucon&amp;#39;;
GRANT ALL PRIVILEGES ON `isuports`.* TO `isucon`@`192.168.%`;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>application側で参照先dbを変更
&lt;ul>
&lt;li>今回はdocker-composeにホストが書いてあったのでそこの値を変更する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>前のベンチマークの時点でCPUが余っていたので、これやっても点数が大して変わらないのは予想通りでした。&lt;/p>
&lt;h2 id="finish-apiでbillingreportを生成する">Finish APIでBillingReportを生成する&lt;/h2>
&lt;blockquote>
&lt;p>今回の当日マニュアルにあった、「Finish APIを呼び出したあとにAdmin/OrganizerのBilling APIに結果が反映されるまで3秒の猶予があるの意味は、「初期実装だとBilling APIで請求額を計算しているけど、大会ごとにfinishするときに大会の請求額が確定するので、BillingReportをそこで生成してストレージにいれてね!」です。&lt;/p>
&lt;/blockquote>
&lt;p>分からん&amp;hellip;😇&lt;/p>
&lt;p>finish が呼ばれた時にbilling_report_by_competitionを呼び出して、その結果をinsertします。&lt;/p>
&lt;ul>
&lt;li>テーブルを作成
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#f92672">`&lt;/span>billing_report&lt;span style="color:#f92672">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span> BIGINT UNSIGNED &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>competition_title&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>player_count&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>visitor_count&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_player_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_visitor_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">`&lt;/span>billing_yen&lt;span style="color:#f92672">`&lt;/span> BIGINT &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span>(&lt;span style="color:#f92672">`&lt;/span>tenant_id&lt;span style="color:#f92672">`&lt;/span>, &lt;span style="color:#f92672">`&lt;/span>competition_id&lt;span style="color:#f92672">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) ENGINE&lt;span style="color:#f92672">=&lt;/span>InnoDB &lt;span style="color:#66d9ef">DEFAULT&lt;/span> CHARACTER &lt;span style="color:#66d9ef">SET&lt;/span>&lt;span style="color:#f92672">=&lt;/span>utf8mb4;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>finish apiの時にbilling_report_by_competitionを呼び出して結果をinsertする&lt;/li>
&lt;li>admin/organizationのbillingの参照先をdbからselectして取ってくる&lt;/li>
&lt;li>初期データ生成処理を改修
&lt;ul>
&lt;li>初期データを入れ直したあとに全ての終了済み大会について billingReportByCompetition を実行してINSERTしなおす必要がある&lt;/li>
&lt;li>billing report初期データ生成スクリプトを作成&lt;/li>
&lt;li>&lt;code>mysqldump -uroot -proot isuports billing_report &amp;gt; initial_billing_report.dump&lt;/code>&lt;/li>
&lt;li>initial時に初期データをimportさせる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/64b7251efa85305e548fbfac2c19fed82d2379f9" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>スコアはそれほど変わらず、不安定さが増してしまったように見受けられました。(編集とは関係ないエンドポイントでエラーが発生する)
ただ&lt;code>api/admin/tenants/billing&lt;/code>, &lt;code>api/organizer/billing&lt;/code>の呼び出し回数と合計レスポンスタイムが大幅に改善されているので一旦よしとします。&lt;/p>
&lt;h2 id="player-apiをなんとかする">Player APIをなんとかする&lt;/h2>
&lt;p>上記のメトリクスを眺めているときにPlayer APIがものすごく重たくなっている(MAX 5s程度だったものがMAX 30sになっていた笑)ことに気づき、あまりにも気になったので先に直すことにしました。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/reiichii/isucon12q-after/commit/17801b6a6af423f4ea6bc0670ba91af8c0111660" target="_blank" rel="noopener"
>コミットログ&lt;/a>&lt;/p>
&lt;p>これもN+1を直すだけです。必要な情報に対して多くクエリを発行しているのでスリムに書き直してあげます。&lt;/p>
&lt;p>今まで4000点代で伸び悩んでいたスコアが6000点台まで届きました👏&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>スコアが伸び悩んで、また他のことをやりたくなってきたのもあり、8月いっぱいで一旦やめにしようかなと思いかけていたのですが、月末の週に突入して解決の兆しが見えてきたので、もう少し粘ってみようかと思います。&lt;/p>
&lt;p>複数台構成にしたら10万点まで届くのだろうか&amp;hellip;&lt;/p>
&lt;p>続きも書けたら書きます。&lt;/p></description></item><item><title>ISUCON11-qualifyのログインページが開かなかった</title><link>https://reiichii.github.io/post/2022-07-13-22/</link><pubDate>Wed, 13 Jul 2022 22:21:31 +0900</pubDate><guid>https://reiichii.github.io/post/2022-07-13-22/</guid><description>&lt;p>ISUCON11予選環境構築時、構築したアプリケーションでログインしようとすると「このサイトにアクセスできません」が表示されます。また遷移先urlが「&lt;code>http://localhost:5000/?callback=https://isucondition.t.isucon.dev&lt;/code>」のようにおかしな表示になります。&lt;/p>
&lt;p>前提として以下の手順を参考に、クラウド環境にアプリケーションを構築し、トップページが開けるところまでを確認済みです。&lt;/p>
&lt;p>&lt;a class="link" href="https://knowledge.sakura.ad.jp/31520/" target="_blank" rel="noopener"
>ISUCON過去問題の環境を「さくらのクラウド」で構築する | さくらのナレッジ&lt;/a>&lt;/p>
&lt;h2 id="やること1-jia-api-mockを起動する">やること1. JIA API Mockを起動する&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/blob/main/docs/isucondition.md#jia-api-mock-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6" target="_blank" rel="noopener"
>アプリケーションマニュアル&lt;/a>の末尾に書いてあるのですが、サーバの5000portで一部のリクエストを待ち受けるようになっているみたいです。&lt;/p>
&lt;p>実際urlからも分かる通り、apiのログイン時に5000portに飛ばすようになっています。該当コードは以下です。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/blob/main/webapp/frontend/src/components/Home/Auth.tsx#L6" target="_blank" rel="noopener"
>https://github.com/isucon/isucon11-qualify/blob/main/webapp/frontend/src/components/Home/Auth.tsx#L6&lt;/a>&lt;/p>
&lt;p>自動起動はしないため、マニュアルに書いてある手順でモックのサービスを起動してあげます。&lt;/p>
&lt;h2 id="やること2-ポートフォワーディングの設定">やること2. ポートフォワーディングの設定&lt;/h2>
&lt;p>このままだとアプリケーションした際にローカル環境の「localhost:5000」にアクセスされてしまいます。&lt;/p>
&lt;p>ローカル環境の5000にアクセスされたら、リモートサーバの5000にアクセスされるようにポートフォワーディングの設定をしておきます。&lt;/p>
&lt;p>&lt;code>ssh -A -L 5000:{ip}:5000 {user}@{ip}&lt;/code>&lt;/p>
&lt;p>ssh接続した状態で「JIAのアカウントでログイン」を押すと、「Sign in with JIA」の画面が開き、ユーザー名とパスワードを入力してログイン後の画面にすすめるようになります👏&lt;/p>
&lt;h2 id="おわりに">おわりに&lt;/h2>
&lt;p>分かる人には分かるのかもしれませんが、これは構築手順書に説明があった方が親切なような気がしました。&lt;/p>
&lt;p>ちなみにこの辺の仕様について話されているissueも発見しました。完全に理解はしていません..。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/isucon/isucon11-qualify/issues/1260" target="_blank" rel="noopener"
>https://github.com/isucon/isucon11-qualify/issues/1260&lt;/a>&lt;/p></description></item></channel></rss>